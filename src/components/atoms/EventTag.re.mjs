// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core from "@lingui/core";
import * as LucideReact from "lucide-react";
import * as JsxRuntime from "react/jsx-runtime";
import * as ReactPopover from "@radix-ui/react-popover";
import * as ReactTooltip from "@radix-ui/react-tooltip";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

function getTagType(tag) {
  switch (tag) {
    case "3.0+" :
    case "3.5+" :
    case "4.0+" :
    case "4.5+" :
    case "5.0+" :
    case "all level" :
        return "level";
    case "comp" :
        return "comp";
    case "drill" :
        return "drill";
    case "rec" :
        return "recreational";
    default:
      return "other";
  }
}

function getTagTooltip(tag) {
  switch (tag) {
    case "3.0+" :
        return t`Lower intermediate and above`;
    case "3.5+" :
        return t`Upper intermediate and above`;
    case "4.0+" :
        return t`Advanced players`;
    case "4.5+" :
        return t`Highly skilled players`;
    case "5.0+" :
        return t`Professional players`;
    case "all level" :
        return t`No restriction on skill level. Open to all players.`;
    case "comp" :
        return t`Results will be submitted to competitive ratings.`;
    case "drill" :
        return t`Skills practice and drills focused on technique improvement`;
    case "dupr" :
        return t`Matches will be submitted to DUPR.`;
    case "rec" :
        return t`Recreational play that will not be submitted to competitive ratings nor DUPR.`;
    default:
      return t`Event tag: ${tag}`;
  }
}

function useMobileDetection() {
  var match = React.useState(function () {
        return false;
      });
  var setIsMobile = match[1];
  React.useEffect((function () {
          var checkIsMobile = function () {
            setIsMobile(function (param) {
                  return (typeof window !== 'undefined' && window.innerWidth < 768);
                });
          };
          checkIsMobile();
          var handleResize = function () {
            checkIsMobile();
          };
          (window.addEventListener("resize", handleResize));
          return (function () {
                    (window.removeEventListener("resize", handleResize));
                  });
        }), []);
  return match[0];
}

function EventTag(props) {
  var __size = props.size;
  var tag = props.tag;
  var size = __size !== undefined ? __size : "small";
  var isMobile = useMobileDetection();
  var tagType = getTagType(tag);
  var iconSize = size === "small" ? "h-4 w-4" : "h-5 w-5";
  var content = tagType === "comp" ? JsxRuntime.jsx("span", {
          children: JsxRuntime.jsx(LucideReact.Trophy, {
                className: iconSize
              }),
          className: "inline-flex items-center text-yellow-500 cursor-help"
        }) : JsxRuntime.jsx("span", {
          children: Core.i18n._(tag),
          className: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help"
        });
  if (isMobile) {
    return JsxRuntime.jsxs(ReactPopover.Root, {
                children: [
                  JsxRuntime.jsx(ReactPopover.Trigger, {
                        asChild: true,
                        children: Caml_option.some(content)
                      }),
                  JsxRuntime.jsx(ReactPopover.Content, {
                        side: "top",
                        className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95",
                        children: getTagTooltip(tag)
                      })
                ]
              });
  } else {
    return JsxRuntime.jsxs(ReactTooltip.Root, {
                delayDuration: 200,
                children: [
                  JsxRuntime.jsx(ReactTooltip.Trigger, {
                        asChild: true,
                        children: content
                      }),
                  JsxRuntime.jsx(ReactTooltip.Content, {
                        children: getTagTooltip(tag),
                        side: "top",
                        className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95"
                      })
                ]
              });
  }
}

function EventTag$TagList(props) {
  var __className = props.className;
  var __size = props.size;
  var tags = props.tags;
  var size = __size !== undefined ? __size : "small";
  var className = __className !== undefined ? __className : "";
  var isMobile = useMobileDetection();
  var iconSize = size === "small" ? "h-4 w-4" : "h-5 w-5";
  return JsxRuntime.jsx("div", {
              children: isMobile ? tags.map(function (tag) {
                      var tagType = getTagType(tag);
                      var content = tagType === "comp" ? JsxRuntime.jsx("span", {
                              children: JsxRuntime.jsx(LucideReact.Trophy, {
                                    className: iconSize
                                  }),
                              className: "inline-flex items-center text-yellow-500 cursor-help"
                            }) : JsxRuntime.jsx("span", {
                              children: Core.i18n._(tag),
                              className: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help"
                            });
                      return JsxRuntime.jsxs(ReactPopover.Root, {
                                  children: [
                                    JsxRuntime.jsx(ReactPopover.Trigger, {
                                          asChild: true,
                                          children: Caml_option.some(content)
                                        }),
                                    JsxRuntime.jsx(ReactPopover.Content, {
                                          side: "top",
                                          className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95",
                                          children: getTagTooltip(tag)
                                        })
                                  ]
                                }, tag);
                    }) : JsxRuntime.jsx(ReactTooltip.Provider, {
                      children: tags.map(function (tag) {
                            var tagType = getTagType(tag);
                            var content = tagType === "comp" ? JsxRuntime.jsx("span", {
                                    children: JsxRuntime.jsx(LucideReact.Trophy, {
                                          className: iconSize
                                        }),
                                    className: "inline-flex items-center text-yellow-500 cursor-help"
                                  }) : JsxRuntime.jsx("span", {
                                    children: Core.i18n._(tag),
                                    className: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help"
                                  });
                            return JsxRuntime.jsxs(ReactTooltip.Root, {
                                        delayDuration: 200,
                                        children: [
                                          JsxRuntime.jsx(ReactTooltip.Trigger, {
                                                asChild: true,
                                                children: content
                                              }),
                                          JsxRuntime.jsx(ReactTooltip.Content, {
                                                children: getTagTooltip(tag),
                                                side: "top",
                                                className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95"
                                              })
                                        ]
                                      }, tag);
                          })
                    }),
              className: "flex gap-2 " + className
            });
}

var TagList = {
  make: EventTag$TagList
};

var make = EventTag;

export {
  getTagType ,
  getTagTooltip ,
  useMobileDetection ,
  make ,
  TagList ,
}
/*  Not a pure module */

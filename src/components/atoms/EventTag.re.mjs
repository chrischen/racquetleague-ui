// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core from "@lingui/core";
import * as LucideReact from "lucide-react";
import * as ResponsiveTooltip from "../molecules/ResponsiveTooltip.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Solid from "@heroicons/react/24/solid";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

function getTagType(tag) {
  switch (tag) {
    case "3.0+" :
    case "3.5+" :
    case "4.0+" :
    case "4.5+" :
    case "5.0+" :
    case "all level" :
        return "level";
    case "comp" :
        return "comp";
    case "drill" :
        return "drill";
    case "rec" :
        return "recreational";
    default:
      return "other";
  }
}

function getTagTooltip(tag) {
  switch (tag) {
    case "3.0+" :
        return t`Lower intermediate and above`;
    case "3.5+" :
        return t`Upper intermediate and above`;
    case "4.0+" :
        return t`Advanced players`;
    case "4.5+" :
        return t`Highly skilled players`;
    case "5.0+" :
        return t`Professional players`;
    case "all level" :
        return t`No restriction on skill level. Open to all players.`;
    case "comp" :
        return t`Results will be submitted to competitive ratings.`;
    case "drill" :
        return t`Skills practice and drills focused on technique improvement`;
    case "dupr" :
        return t`Matches will be submitted to DUPR.`;
    case "rec" :
        return t`Recreational play that will not be submitted to competitive ratings nor DUPR.`;
    case "unlisted" :
        return t`This event is private. Please do not share this event without permission from the organizer.`;
    default:
      return t`Event tag: ${tag}`;
  }
}

function EventTag(props) {
  var __size = props.size;
  var tag = props.tag;
  var size = __size !== undefined ? __size : "small";
  var tagType = getTagType(tag);
  var iconSize = size === "small" ? "h-4 w-4" : "h-5 w-5";
  var content;
  var exit = 0;
  if (tagType === "comp") {
    content = JsxRuntime.jsx("span", {
          children: JsxRuntime.jsx(LucideReact.Trophy, {
                className: iconSize
              }),
          className: "inline-flex items-center text-yellow-500 cursor-help"
        });
  } else if (tagType === "other" && tag === "unlisted") {
    content = JsxRuntime.jsx("span", {
          children: JsxRuntime.jsx(Solid.LockClosedIcon, {
                className: iconSize + " text-gray-600"
              }),
          className: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help"
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    content = JsxRuntime.jsx("span", {
          children: Core.i18n._(tag),
          className: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help"
        });
  }
  return JsxRuntime.jsx(ResponsiveTooltip.make, {
              children: content,
              content: getTagTooltip(tag)
            });
}

function EventTag$TagList(props) {
  var __className = props.className;
  var __size = props.size;
  var size = __size !== undefined ? __size : "small";
  var className = __className !== undefined ? __className : "";
  var iconSize = size === "small" ? "h-4 w-4" : "h-5 w-5";
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx(ResponsiveTooltip.Provider.make, {
                    children: props.tags.map(function (tag) {
                          var tagType = getTagType(tag);
                          var content;
                          var exit = 0;
                          if (tagType === "comp") {
                            content = JsxRuntime.jsx("span", {
                                  children: JsxRuntime.jsx(LucideReact.Trophy, {
                                        className: iconSize
                                      }),
                                  className: "inline-flex items-center text-yellow-500 cursor-help"
                                });
                          } else if (tagType === "other" && tag === "unlisted") {
                            content = JsxRuntime.jsx("span", {
                                  children: JsxRuntime.jsx(Solid.LockClosedIcon, {
                                        className: iconSize + " text-gray-600"
                                      }),
                                  className: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help"
                                });
                          } else {
                            exit = 1;
                          }
                          if (exit === 1) {
                            content = JsxRuntime.jsx("span", {
                                  children: Core.i18n._(tag),
                                  className: "inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10 cursor-help"
                                });
                          }
                          return JsxRuntime.jsx(ResponsiveTooltip.make, {
                                      children: content,
                                      content: getTagTooltip(tag)
                                    }, tag);
                        })
                  }),
              className: "flex gap-2 " + className
            });
}

var TagList = {
  make: EventTag$TagList
};

var make = EventTag;

export {
  getTagType ,
  getTagTooltip ,
  make ,
  TagList ,
}
/*  Not a pure module */

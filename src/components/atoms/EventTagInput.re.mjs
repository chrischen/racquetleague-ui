// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as EventTag from "./EventTag.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as Core$1 from "@linaria/core";
import * as JsxRuntime from "react/jsx-runtime";
import * as ReactPopover from "@radix-ui/react-popover";
import * as ReactTooltip from "@radix-ui/react-tooltip";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

function getTagType(tag) {
  switch (tag) {
    case "3.0+" :
    case "3.5+" :
    case "4.0+" :
    case "4.5+" :
    case "5.0+" :
    case "all level" :
        return "level";
    case "comp" :
        return "comp";
    case "drill" :
        return "drill";
    case "dupr" :
        return "dupr";
    case "rec" :
        return "recreational";
    default:
      return "other";
  }
}

function getTagCategory(tag) {
  switch (tag) {
    case "3.0+" :
    case "3.5+" :
    case "4.0+" :
    case "4.5+" :
    case "5.0+" :
    case "all level" :
        return "level";
    default:
      return "type";
  }
}

function useMobileDetection() {
  var match = React.useState(function () {
        return false;
      });
  var setIsMobile = match[1];
  React.useEffect((function () {
          var checkIsMobile = function () {
            setIsMobile(function (param) {
                  return (typeof window !== 'undefined' && window.innerWidth < 768);
                });
          };
          checkIsMobile();
          var handleResize = function () {
            checkIsMobile();
          };
          (window.addEventListener("resize", handleResize));
          return (function () {
                    (window.removeEventListener("resize", handleResize));
                  });
        }), []);
  return match[0];
}

function EventTagInput(props) {
  var onToggle = props.onToggle;
  var tag = props.tag;
  var isMobile = useMobileDetection();
  var buttonContent = JsxRuntime.jsx("button", {
        children: Core.i18n._(tag),
        className: Core$1.cx("inline-flex items-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 cursor-help", props.isSelected ? "bg-indigo-600 text-white hover:bg-indigo-500 focus-visible:outline-indigo-600" : "bg-white text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:outline-indigo-600"),
        type: "button",
        onClick: (function (param) {
            onToggle();
          })
      });
  if (isMobile) {
    return JsxRuntime.jsxs(ReactPopover.Root, {
                children: [
                  JsxRuntime.jsx(ReactPopover.Trigger, {
                        asChild: true,
                        children: Caml_option.some(buttonContent)
                      }),
                  JsxRuntime.jsx(ReactPopover.Content, {
                        side: "top",
                        className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95",
                        children: EventTag.getTagTooltip(tag)
                      })
                ]
              });
  } else {
    return JsxRuntime.jsxs(ReactTooltip.Root, {
                delayDuration: 200,
                children: [
                  JsxRuntime.jsx(ReactTooltip.Trigger, {
                        asChild: true,
                        children: buttonContent
                      }),
                  JsxRuntime.jsx(ReactTooltip.Content, {
                        children: EventTag.getTagTooltip(tag),
                        side: "top",
                        className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95"
                      })
                ]
              });
  }
}

function getMainTypeTags() {
  return [
          "rec",
          "comp"
        ];
}

function getSubTags(state) {
  if (state === "rec") {
    return ["drill"];
  } else {
    return [
            "drill",
            "dupr"
          ];
  }
}

function getAllSubTags() {
  return [
          "drill",
          "dupr"
        ];
}

function getLevelTags() {
  return [
          "all level",
          "3.0+",
          "3.5+",
          "4.0+",
          "4.5+",
          "5.0+"
        ];
}

function getEventTypeState(selectedTags) {
  if (selectedTags.includes("comp")) {
    return "comp";
  } else {
    return "rec";
  }
}

function isTagHighlighted(tag, selectedTags) {
  switch (tag) {
    case "comp" :
        return selectedTags.includes("comp");
    case "drill" :
    case "dupr" :
        return selectedTags.includes(tag);
    case "rec" :
        return !selectedTags.includes("comp");
    default:
      return false;
  }
}

function isTagSelected(tag, selectedTags, category) {
  if (category !== "level") {
    return isTagHighlighted(tag, selectedTags);
  }
  var levelTags = [
    "all level",
    "3.0+",
    "3.5+",
    "4.0+",
    "4.5+",
    "5.0+"
  ];
  var selectedLevelTags = selectedTags.filter(function (t) {
        return levelTags.includes(t);
      });
  if (selectedTags.includes(tag)) {
    return true;
  } else if (selectedLevelTags.length === 0) {
    return tag === "all level";
  } else {
    return false;
  }
}

function toggleTag(tag, selectedTags, category) {
  if (category === "level") {
    var levelTags = [
      "all level",
      "3.0+",
      "3.5+",
      "4.0+",
      "4.5+",
      "5.0+"
    ];
    var isSelected = isTagSelected(tag, selectedTags, category);
    if (isSelected) {
      return selectedTags.filter(function (t) {
                  return t !== tag;
                });
    } else if (tag === "all level") {
      return selectedTags.filter(function (t) {
                  return !levelTags.includes(t);
                });
    } else {
      return selectedTags.concat([tag]);
    }
  }
  switch (tag) {
    case "comp" :
        if (selectedTags.includes("comp")) {
          var validRecSubTags = ["drill"];
          var allSubTags = [
            "drill",
            "dupr"
          ];
          return selectedTags.filter(function (t) {
                      if (t !== "comp") {
                        if (validRecSubTags.includes(t)) {
                          return true;
                        } else {
                          return !allSubTags.includes(t);
                        }
                      } else {
                        return false;
                      }
                    });
        }
        var validCompSubTags = [
          "drill",
          "dupr"
        ];
        var allSubTags$1 = [
          "drill",
          "dupr"
        ];
        var filteredTags = selectedTags.filter(function (t) {
              if (validCompSubTags.includes(t)) {
                return true;
              } else {
                return !allSubTags$1.includes(t);
              }
            });
        return filteredTags.concat(["comp"]);
    case "drill" :
    case "dupr" :
        break;
    case "rec" :
        var validRecSubTags$1 = ["drill"];
        var allSubTags$2 = [
          "drill",
          "dupr"
        ];
        return selectedTags.filter(function (t) {
                    if (t !== "comp") {
                      if (validRecSubTags$1.includes(t)) {
                        return true;
                      } else {
                        return !allSubTags$2.includes(t);
                      }
                    } else {
                      return false;
                    }
                  });
    default:
      return selectedTags;
  }
  if (selectedTags.includes(tag)) {
    return selectedTags.filter(function (t) {
                return t !== tag;
              });
  } else {
    return selectedTags.concat([tag]);
  }
}

var TagLogic = {
  getMainTypeTags: getMainTypeTags,
  getSubTags: getSubTags,
  getAllSubTags: getAllSubTags,
  getLevelTags: getLevelTags,
  getEventTypeState: getEventTypeState,
  isTagHighlighted: isTagHighlighted,
  isTagSelected: isTagSelected,
  toggleTag: toggleTag
};

function EventTagInput$TagGroup(props) {
  var __className = props.className;
  var category = props.category;
  var onTagsChange = props.onTagsChange;
  var selectedTags = props.selectedTags;
  var tags = props.tags;
  var className = __className !== undefined ? __className : "";
  var isMobile = useMobileDetection();
  var renderTagButtonContent = function (tag, isSelected, onToggle) {
    return JsxRuntime.jsx("button", {
                children: Core.i18n._(tag),
                className: Core$1.cx("inline-flex items-center rounded-md px-3 py-2 text-sm font-semibold shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 cursor-help", isSelected ? "bg-indigo-600 text-white hover:bg-indigo-500 focus-visible:outline-indigo-600" : "bg-white text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus-visible:outline-indigo-600"),
                type: "button",
                onClick: (function (param) {
                    onToggle();
                  })
              });
  };
  var renderTagButton = function (tag, isSelected, onToggle) {
    var buttonContent = renderTagButtonContent(tag, isSelected, onToggle);
    if (isMobile) {
      return JsxRuntime.jsxs(ReactPopover.Root, {
                  children: [
                    JsxRuntime.jsx(ReactPopover.Trigger, {
                          asChild: true,
                          children: Caml_option.some(buttonContent)
                        }),
                    JsxRuntime.jsx(ReactPopover.Content, {
                          side: "top",
                          className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95",
                          children: EventTag.getTagTooltip(tag)
                        })
                  ]
                }, tag);
    } else {
      return JsxRuntime.jsxs(ReactTooltip.Root, {
                  delayDuration: 200,
                  children: [
                    JsxRuntime.jsx(ReactTooltip.Trigger, {
                          asChild: true,
                          children: buttonContent
                        }),
                    JsxRuntime.jsx(ReactTooltip.Content, {
                          children: EventTag.getTagTooltip(tag),
                          side: "top",
                          className: "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95"
                        })
                  ]
                }, tag);
    }
  };
  var tmp;
  if (isMobile) {
    if (category === "level") {
      tmp = JsxRuntime.jsx("div", {
            children: tags.map(function (tag) {
                  var isSelected = isTagSelected(tag, selectedTags, category);
                  var onToggle = function () {
                    var newTags = toggleTag(tag, selectedTags, category);
                    onTagsChange(newTags);
                  };
                  return renderTagButton(tag, isSelected, onToggle);
                }),
            className: "mt-2 flex gap-2"
          });
    } else {
      var mainTags = [
        "rec",
        "comp"
      ];
      var currentState = getEventTypeState(selectedTags);
      var subTags = getSubTags(currentState);
      tmp = JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                    children: mainTags.map(function (tag) {
                          var isSelected = isTagSelected(tag, selectedTags, category);
                          var onToggle = function () {
                            var newTags = toggleTag(tag, selectedTags, category);
                            onTagsChange(newTags);
                          };
                          return renderTagButton(tag, isSelected, onToggle);
                        }),
                    className: "flex gap-2"
                  }),
              subTags.length > 0 ? JsxRuntime.jsx("div", {
                      children: subTags.map(function (subTag) {
                            var isSelected = isTagSelected(subTag, selectedTags, category);
                            var onToggle = function () {
                              var newTags = toggleTag(subTag, selectedTags, category);
                              onTagsChange(newTags);
                            };
                            return renderTagButton(subTag, isSelected, onToggle);
                          }),
                      className: "ml-4 flex gap-2"
                    }) : null
            ],
            className: "mt-2 space-y-3"
          });
    }
  } else {
    var tmp$1;
    if (category === "level") {
      tmp$1 = JsxRuntime.jsx("div", {
            children: tags.map(function (tag) {
                  var isSelected = isTagSelected(tag, selectedTags, category);
                  var onToggle = function () {
                    var newTags = toggleTag(tag, selectedTags, category);
                    onTagsChange(newTags);
                  };
                  return renderTagButton(tag, isSelected, onToggle);
                }),
            className: "mt-2 flex gap-2"
          });
    } else {
      var mainTags$1 = [
        "rec",
        "comp"
      ];
      var currentState$1 = getEventTypeState(selectedTags);
      var subTags$1 = getSubTags(currentState$1);
      tmp$1 = JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                    children: mainTags$1.map(function (tag) {
                          var isSelected = isTagSelected(tag, selectedTags, category);
                          var onToggle = function () {
                            var newTags = toggleTag(tag, selectedTags, category);
                            onTagsChange(newTags);
                          };
                          return renderTagButton(tag, isSelected, onToggle);
                        }),
                    className: "flex gap-2"
                  }),
              subTags$1.length > 0 ? JsxRuntime.jsx("div", {
                      children: subTags$1.map(function (subTag) {
                            var isSelected = isTagSelected(subTag, selectedTags, category);
                            var onToggle = function () {
                              var newTags = toggleTag(subTag, selectedTags, category);
                              onTagsChange(newTags);
                            };
                            return renderTagButton(subTag, isSelected, onToggle);
                          }),
                      className: "ml-4 flex gap-2"
                    }) : null
            ],
            className: "mt-2 space-y-3"
          });
    }
    tmp = JsxRuntime.jsx(ReactTooltip.Provider, {
          children: tmp$1
        });
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("label", {
                      children: props.label,
                      className: "block text-sm font-medium leading-6 text-gray-900"
                    }),
                tmp,
                Core__Option.getOr(Core__Option.map(props.description, (function (desc) {
                            return JsxRuntime.jsx("p", {
                                        children: desc,
                                        className: "mt-1 text-sm text-gray-500"
                                      });
                          })), null)
              ],
              className: "col-span-full " + className
            });
}

var TagGroup = {
  make: EventTagInput$TagGroup
};

var make = EventTagInput;

export {
  getTagType ,
  getTagCategory ,
  useMobileDetection ,
  make ,
  TagLogic ,
  TagGroup ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Lingui from "../../locales/Lingui.re.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "./LangProvider.re.mjs";
import * as LocaleDetector from "../../lib/LocaleDetector.re.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.re.mjs";
import * as DetectLocale from "@lingui/detect-locale";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.re.mjs";

function parse(json) {
  var decoder = Json_Decode$JsonCombinators.object(function (field) {
        return {
                lang: field.optional("lang", Json_Decode$JsonCombinators.string),
                locale: field.optional("locale", Json_Decode$JsonCombinators.string)
              };
      });
  try {
    return Json$JsonCombinators.decode(json, decoder);
  }
  catch (exn){
    return {
            TAG: "Error",
            _0: "An unexpected error occurred when checking the id."
          };
  }
}

var RouteParams = {
  parse: parse
};

var LoaderArgs = {};

var InvalidLanguageException = /* @__PURE__ */Caml_exceptions.create("Lang.InvalidLanguageException");

function isInvalidLanguageError(error) {
  var exnId = Js_dict.get(error, "RE_EXN_ID");
  if (exnId === undefined) {
    return false;
  }
  var exnId$1 = Caml_option.valFromOption(exnId);
  console.log(exnId$1);
  return String(exnId$1).includes("InvalidLanguageException");
}

async function loader(param) {
  var params = param.params;
  var validLangs = [
    "en",
    "ja",
    "th",
    "zh-TW",
    "zh-CN"
  ];
  var lang = params.lang;
  if (lang !== undefined && !validLangs.includes(lang)) {
    throw {
          RE_EXN_ID: InvalidLanguageException,
          _1: lang,
          Error: new Error()
        };
  }
  var lang$1 = Core__Option.getOr(params.lang, "en");
  var locale;
  switch (lang$1) {
    case "ja" :
        locale = "jp";
        break;
    case "th" :
        locale = "th";
        break;
    case "zh-CN" :
        locale = "cn";
        break;
    case "zh-TW" :
        locale = "tw";
        break;
    default:
      locale = "us";
  }
  var tmp;
  if (import.meta.env.SSR) {
    var tmp$1;
    switch (lang$1) {
      case "ja" :
          tmp$1 = LocaleDetector.jaFallback;
          break;
      case "th" :
          tmp$1 = LocaleDetector.thFallback;
          break;
      case "zh-CN" :
          tmp$1 = LocaleDetector.zhCNFallback;
          break;
      case "zh-TW" :
          tmp$1 = LocaleDetector.zhTWFallback;
          break;
      default:
        tmp$1 = LocaleDetector.enFallback;
    }
    tmp = DetectLocale.detect(DetectLocale.fromNavigator({
              language: lang$1
            }), tmp$1);
  } else {
    var tmp$2;
    switch (lang$1) {
      case "ja" :
          tmp$2 = LocaleDetector.jaFallback;
          break;
      case "th" :
          tmp$2 = LocaleDetector.thFallback;
          break;
      case "zh-CN" :
          tmp$2 = LocaleDetector.zhCNFallback;
          break;
      case "zh-TW" :
          tmp$2 = LocaleDetector.zhTWFallback;
          break;
      default:
        tmp$2 = LocaleDetector.enFallback;
    }
    tmp = DetectLocale.detect(DetectLocale.fromNavigator(window.navigator), tmp$2).toLowerCase();
  }
  var detectedLocale = tmp;
  Lingui.i18n.activate(lang$1);
  var detectedLang = (function (__x) {
        return Core__Option.flatMap(__x, LangProvider.parseLang);
      })(detectedLocale);
  return {
          locale: locale,
          detectedLocale: (function (__x) {
                return Core__Option.flatMap(__x, LangProvider.parseLocale);
              })(detectedLocale),
          detectedLang: detectedLang,
          lang: lang$1,
          timezone: "Asia/Tokyo"
        };
}

var Component = LangProvider.make;

export {
  RouteParams ,
  LoaderArgs ,
  InvalidLanguageException ,
  isInvalidLanguageError ,
  loader ,
  Component ,
}
/* Lingui Not a pure module */

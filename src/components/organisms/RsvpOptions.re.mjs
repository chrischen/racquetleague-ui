// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Dropdown from "../catalyst/Dropdown.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as ConfirmDialog from "../molecules/ConfirmDialog.re.mjs";
import * as RelayRuntime from "relay-runtime";
import * as React$1 from "@headlessui/react";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as RsvpOptions_rsvp_graphql from "../../__generated__/RsvpOptions_rsvp_graphql.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as RsvpOptionsDeleteMutation_graphql from "../../__generated__/RsvpOptionsDeleteMutation_graphql.re.mjs";

import { t, plural } from '@lingui/macro'
;

var convertFragment = RsvpOptions_rsvp_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(RsvpOptions_rsvp_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, RsvpOptions_rsvp_graphql.node, convertFragment);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

var convertVariables = RsvpOptionsDeleteMutation_graphql.Internal.convertVariables;

var convertResponse = RsvpOptionsDeleteMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = RsvpOptionsDeleteMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, RsvpOptionsDeleteMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables, RsvpOptionsDeleteMutation_graphql.node, convertResponse, convertWrapRawResponse);

var RsvpOptionsDeleteMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use$1
};

function RsvpOptions(props) {
  var __id = props.__id;
  var match = use$1();
  var commitMutationDeleteRsvp = match[0];
  var rsvp = use(props.rsvp);
  var match$1 = React.useState(function () {
        return false;
      });
  var setIsOpen = match$1[1];
  var isOpen = match$1[0];
  return Core__Option.getOr(Core__Option.map(rsvp.user, (function (user) {
                    return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                children: [
                                  JsxRuntime.jsxs(React$1.Menu, {
                                        children: [
                                          JsxRuntime.jsx(Dropdown.DropdownButton.make, {
                                                children: JsxRuntime.jsx(Solid.ChevronDownIcon, {}),
                                                outline: true
                                              }),
                                          JsxRuntime.jsx(Dropdown.DropdownMenu.make, {
                                                children: JsxRuntime.jsx(Dropdown.DropdownItem.make, {
                                                      children: t`Remove from event`,
                                                      onClick: (function (e) {
                                                          e.stopPropagation();
                                                          setIsOpen(function (param) {
                                                                return true;
                                                              });
                                                        })
                                                    })
                                              })
                                        ]
                                      }),
                                  JsxRuntime.jsx(ConfirmDialog.make, {
                                        title: t`Remove this RSVP`,
                                        description: t`Are you sure you want to remove this person from the event?`,
                                        onConfirmed: (function () {
                                            var userId = user.id;
                                            var connectionId = RelayRuntime.ConnectionHandler.getConnectionID(__id, "EventRsvps_event_rsvps", undefined);
                                            commitMutationDeleteRsvp({
                                                  connections: [connectionId],
                                                  id: __id,
                                                  userId: userId
                                                }, undefined, undefined, undefined, undefined, undefined, undefined);
                                          }),
                                        setIsOpen: setIsOpen,
                                        isOpen: isOpen
                                      })
                                ]
                              });
                  })), null);
}

var make = RsvpOptions;

export {
  Fragment ,
  RsvpOptionsDeleteMutation ,
  make ,
}
/*  Not a pure module */

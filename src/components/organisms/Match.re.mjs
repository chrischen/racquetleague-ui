// Generated by ReScript, PLEASE EDIT WITH CARE

import Zod from "zod";
import * as Form from "../molecules/forms/Form.re.mjs";
import * as Util from "../shared/Util.re.mjs";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LucideReact from "lucide-react";
import * as EventRsvpUser from "./EventRsvpUser.re.mjs";
import * as FramerMotion from "framer-motion";
import * as RelayRuntime from "relay-runtime";
import * as ReactHookForm from "react-hook-form";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as MatchMutation_graphql from "../../__generated__/MatchMutation_graphql.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as Zod$1 from "@hookform/resolvers/zod";
import * as MatchPredictMatchOutcomeQuery_graphql from "../../__generated__/MatchPredictMatchOutcomeQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var convertVariables = MatchPredictMatchOutcomeQuery_graphql.Internal.convertVariables;

var convertResponse = MatchPredictMatchOutcomeQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = MatchPredictMatchOutcomeQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, MatchPredictMatchOutcomeQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, MatchPredictMatchOutcomeQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(MatchPredictMatchOutcomeQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(MatchPredictMatchOutcomeQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(MatchPredictMatchOutcomeQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(MatchPredictMatchOutcomeQuery_graphql.node, convertVariables);

var PredictMatchOutcome = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var convertVariables$1 = MatchMutation_graphql.Internal.convertVariables;

var convertResponse$1 = MatchMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = MatchMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables$1, MatchMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables$1, MatchMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var CreateLeagueMatchMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  commitMutation: commitMutation,
  use: use$1
};

function Match$PredictionBar(props) {
  var odds = props.odds;
  var odds$1 = odds[1] - odds[0];
  var leftOdds = odds$1 < 0 ? Math.abs(odds$1 * 100) : 0;
  var rightOdds = odds$1 < 0 ? 0 : odds$1 * 100;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: odds$1 < 0 ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
                              children: [
                                JsxRuntime.jsx(LucideReact.MoveLeft, {
                                      className: "inline",
                                      color: "red"
                                    }),
                                t`predicted winner`,
                                JsxRuntime.jsx(LucideReact.MoveRight, {
                                      className: "inline",
                                      color: "#929292"
                                    })
                              ]
                            }) : JsxRuntime.jsxs(JsxRuntime.Fragment, {
                              children: [
                                JsxRuntime.jsx(LucideReact.MoveLeft, {
                                      className: "inline",
                                      color: "#929292"
                                    }),
                                t`predicted winner`,
                                JsxRuntime.jsx(LucideReact.MoveRight, {
                                      className: "inline",
                                      color: "red"
                                    })
                              ]
                            }),
                      className: "col-span-2 text-center"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(FramerMotion.motion.div, {
                            className: "h-2 rounded-l-full bg-red-400 float-right",
                            animate: {
                              width: leftOdds.toFixed(3) + "%"
                            },
                            initial: {
                              width: "0%"
                            }
                          }),
                      className: "overflow-hidden rounded-l-full bg-gray-200 mt-1 place-content-end border-r-4 border-black"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(FramerMotion.motion.div, {
                            className: "h-2 rounded-r-full bg-blue-400",
                            animate: {
                              width: rightOdds.toFixed(3) + "%"
                            },
                            initial: {
                              width: "0%"
                            }
                          }),
                      className: "overflow-hidden rounded-r-full bg-gray-200 mt-1 border-l-4 border-black border-l-radius"
                    })
              ],
              className: "grid grid-cols-2 gap-0"
            });
}

var PredictionBar = {
  make: Match$PredictionBar
};

var ControllerOfInputsMatch = {};

var schema = Zod.object({
      scoreLeft: Zod.number({}).gte(0),
      scoreRight: Zod.number({}).gte(0)
    });

function Match(props) {
  var maxRating = props.maxRating;
  var minRating = props.minRating;
  var activity = props.activity;
  var match = props.match;
  var match$1 = use$1();
  var commitMutationCreateLeagueMatch = match$1[0];
  var team1 = match[0];
  var team2 = match[1];
  var outcome = use({
        input: {
          team1RatingIds: team1.map(function (node) {
                return Core__Option.getOr(Core__Option.map(node.rating, (function (rating) {
                                  return rating.id;
                                })), "");
              }),
          team2RatingIds: team2.map(function (node) {
                return Core__Option.getOr(Core__Option.map(node.rating, (function (rating) {
                                  return rating.id;
                                })), "");
              })
        }
      }, undefined, undefined, undefined).predictMatchOutcome;
  var match$2 = ReactHookForm.useForm({
        resolver: Caml_option.some(Zod$1.zodResolver(schema)),
        defaultValues: {}
      });
  var setValue = match$2.setValue;
  var register = match$2.register;
  var onSubmit = function (data) {
    var winningSide = data.scoreLeft > data.scoreRight ? "Left" : "Right";
    var winners = Core__Array.filterMap(winningSide === "Left" ? team1 : team2, (function (n) {
              return n.user;
            })).map(function (p) {
          return p.id;
        });
    var losers = Core__Array.filterMap(winningSide === "Left" ? team2 : team1, (function (n) {
              return n.user;
            })).map(function (p) {
          return p.id;
        });
    var score = winningSide === "Left" ? [
        data.scoreLeft,
        data.scoreRight
      ] : [
        data.scoreRight,
        data.scoreLeft
      ];
    Core__Option.map(activity.slug, (function (slug) {
            var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("root", "MatchListFragment_matches", {
                  activitySlug: slug,
                  after: undefined,
                  before: undefined,
                  eventId: undefined,
                  first: undefined,
                  namespace: "doubles:rec"
                });
            commitMutationCreateLeagueMatch({
                  connections: [connectionId],
                  matchInput: {
                    activitySlug: slug,
                    doublesMatch: {
                      createdAt: Util.Datetime.fromDate(new Date()),
                      losers: losers,
                      score: score,
                      winners: winners
                    },
                    namespace: "doubles:rec"
                  }
                }, undefined, undefined, undefined, undefined, undefined, undefined);
            setValue("scoreLeft", 0, undefined);
            setValue("scoreRight", 0, undefined);
          }));
  };
  return JsxRuntime.jsx("form", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            children: Core__Option.getOr(Core__Option.map(props.onDelete, (function (onDelete) {
                                        return JsxRuntime.jsx(UiAction.make, {
                                                    onClick: onDelete,
                                                    children: t`delete`
                                                  });
                                      })), null),
                            className: "col-span-2"
                          }),
                      JsxRuntime.jsx("div", {
                            children: team1.map(function (playerRsvp) {
                                  return Core__Option.getOr(Core__Option.map(playerRsvp.user, (function (user) {
                                                    return JsxRuntime.jsx(EventRsvpUser.make, {
                                                                user: user.fragmentRefs,
                                                                ratingPercent: Core__Option.getOr(Core__Option.flatMap(playerRsvp.rating, (function (rating) {
                                                                            return Core__Option.map(rating.mu, (function (mu) {
                                                                                          return (mu - minRating) / (maxRating - minRating) * 100;
                                                                                        }));
                                                                          })), 0)
                                                              });
                                                  })), null);
                                }),
                            className: "grid gap-4"
                          }),
                      JsxRuntime.jsx("div", {
                            children: team2.map(function (playerRsvp) {
                                  return Core__Option.getOr(Core__Option.map(playerRsvp.user, (function (user) {
                                                    return JsxRuntime.jsx(EventRsvpUser.make, {
                                                                user: user.fragmentRefs,
                                                                ratingPercent: Core__Option.getOr(Core__Option.flatMap(playerRsvp.rating, (function (rating) {
                                                                            return Core__Option.map(rating.mu, (function (mu) {
                                                                                          return (mu - minRating) / (maxRating - minRating) * 100;
                                                                                        }));
                                                                          })), 0)
                                                              });
                                                  })), null);
                                }),
                            className: "grid gap-4"
                          }),
                      JsxRuntime.jsx("div", {
                            children: Core__Option.getOr(Core__Option.map(outcome, (function (outcome) {
                                        return JsxRuntime.jsx(Match$PredictionBar, {
                                                    odds: [
                                                      Core__Option.getOr(outcome.team1, 0),
                                                      Core__Option.getOr(outcome.team2, 0)
                                                    ]
                                                  });
                                      })), null),
                            className: "grid gap-0 col-span-2"
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(Form.Input.make, {
                                                label: t`points`,
                                                className: "w-24 sm:w-32 md:w-48  flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 text-2xl sm:text-5xl sm:leading-6",
                                                id: "scoreLeft",
                                                type_: "text",
                                                register: register("scoreLeft", {
                                                      setValueAs: (function (v) {
                                                          if (v === "") {
                                                            return 0;
                                                          } else {
                                                            return Core__Option.getOr(Core__Float.fromString(v), 1);
                                                          }
                                                        })
                                                    })
                                              }),
                                          className: "mx-auto col-span-1"
                                        }),
                                    className: "grid grid-cols-1 gap-4"
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(Form.Input.make, {
                                                label: t`points`,
                                                className: "w-24 sm:w-32 md:w-48 block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 text-2xl sm:text-5xl sm:leading-6",
                                                id: "scoreRight",
                                                type_: "text",
                                                register: register("scoreRight", {
                                                      setValueAs: (function (v) {
                                                          if (v === "") {
                                                            return 0;
                                                          } else {
                                                            return Core__Option.getOr(Core__Float.fromString(v), 1);
                                                          }
                                                        })
                                                    })
                                              }),
                                          className: "mx-auto col-span-1"
                                        }),
                                    className: "grid grid-cols-1 gap-4"
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("input", {
                                          className: "mx-auto block text-3xl bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded",
                                          type: "submit",
                                          value: "Submit"
                                        }),
                                    className: "col-span-2 md:col-span-2 gap-4"
                                  })
                            ],
                            className: "grid grid-cols-2 col-span-2 items-start gap-4 md:grid-cols-2 md:gap-8"
                          })
                    ],
                    className: "grid grid-cols-2 gap-4 col-span-2"
                  }),
              onSubmit: match$2.handleSubmit(onSubmit)
            });
}

var make = Match;

export {
  PredictMatchOutcome ,
  CreateLeagueMatchMutation ,
  PredictionBar ,
  ControllerOfInputsMatch ,
  schema ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as EventRsvp from "./EventRsvp.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LucideReact from "lucide-react";
import * as RsvpListTitle from "../molecules/RsvpListTitle.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as GoingRsvps_event_graphql from "../../__generated__/GoingRsvps_event_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var getConnectionNodes = GoingRsvps_event_graphql.Utils.getConnectionNodes;

var convertFragment = GoingRsvps_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(GoingRsvps_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, GoingRsvps_event_graphql.node, convertFragment);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function GoingRsvps(props) {
  var maxRating = props.maxRating;
  var activitySlug = props.activitySlug;
  var viewer = props.viewer;
  var eventData = use(props.event);
  var rsvps = getConnectionNodes(eventData.rsvps);
  var match = React.useState(function () {
        return false;
      });
  var setExpanded = match[1];
  var expanded = match[0];
  var isWaitlist = function (count) {
    return Core__Option.getOr(Core__Option.map(eventData.maxRsvps, (function (max) {
                      return count >= max;
                    })), false);
  };
  var mainList = rsvps.filter(function (edge) {
        if (edge.listType === undefined) {
          return true;
        } else {
          return Caml_obj.equal(edge.listType, 0);
        }
      });
  var confirmedRsvps = mainList.filter(function (param, i) {
          return !isWaitlist(i);
        }).toSorted(function (a, b) {
        var userA = Core__Option.getOr(Core__Option.flatMap(a.rating, (function (rating) {
                    return rating.mu;
                  })), 0);
        var userB = Core__Option.getOr(Core__Option.flatMap(b.rating, (function (rating) {
                    return rating.mu;
                  })), 0);
        if (userB > userA) {
          return 1;
        } else if (userB < userA) {
          return -1;
        } else {
          return 0;
        }
      });
  var displayedGoingRsvps = expanded ? confirmedRsvps : confirmedRsvps.slice(0, 3);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(RsvpListTitle.make, {
                            title: t`Going`,
                            count: confirmedRsvps.length,
                            max: eventData.maxRsvps
                          }),
                      className: "flex justify-between items-center mb-3"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        displayedGoingRsvps.map(function (edge) {
                              return JsxRuntime.jsx(EventRsvp.make, {
                                          rsvp: edge.fragmentRefs,
                                          viewer: viewer,
                                          activitySlug: activitySlug,
                                          maxRating: maxRating,
                                          eventId: eventData.id,
                                          isAdmin: eventData.viewerIsAdmin
                                        }, edge.id);
                            }),
                        !expanded && confirmedRsvps.length > 3 ? JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("span", {
                                        children: t`+${(confirmedRsvps.length - 3 | 0).toString()} more`,
                                        className: "text-sm font-medium"
                                      }),
                                  JsxRuntime.jsx(LucideReact.ChevronDown, {
                                        size: 16,
                                        className: "ml-1"
                                      })
                                ],
                                className: "flex items-center cursor-pointer text-blue-600 hover:text-blue-800 bg-blue-50 hover:bg-blue-100 rounded-full px-3 py-1",
                                onClick: (function (param) {
                                    setExpanded(function (param) {
                                          return true;
                                        });
                                  })
                              }) : null,
                        !expanded && confirmedRsvps.length <= 3 && confirmedRsvps.length > 0 ? JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("span", {
                                        children: t`See all`,
                                        className: "text-sm font-medium"
                                      }),
                                  JsxRuntime.jsx(LucideReact.ChevronDown, {
                                        size: 16,
                                        className: "ml-1"
                                      })
                                ],
                                className: "flex items-center cursor-pointer text-blue-600 hover:text-blue-800 bg-blue-50 hover:bg-blue-100 rounded-full px-3 py-1",
                                onClick: (function (param) {
                                    setExpanded(function (param) {
                                          return true;
                                        });
                                  })
                              }) : null,
                        expanded ? JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx("a", {
                                      children: t`Show less`,
                                      className: "text-sm font-medium text-blue-600 hover:text-blue-800 cursor-pointer",
                                      onClick: (function (param) {
                                          setExpanded(function (param) {
                                                return false;
                                              });
                                        })
                                    }),
                                className: "text-center mt-3"
                              }) : null
                      ],
                      className: "flex flex-wrap gap-3"
                    })
              ],
              className: props.className
            });
}

var make = GoingRsvps;

export {
  Fragment ,
  make ,
}
/*  Not a pure module */

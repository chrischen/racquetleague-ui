// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as RsvpUser from "./RsvpUser.re.mjs";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as SubmitMatch from "./SubmitMatch.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LucideReact from "lucide-react";
import * as Core from "@linaria/core";
import * as EventRsvpUser from "./EventRsvpUser.re.mjs";
import * as FramerMotion from "framer-motion";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as SelectMatch_event_graphql from "../../__generated__/SelectMatch_event_graphql.re.mjs";
import * as SelectMatchRsvpsRefetchQuery_graphql from "../../__generated__/SelectMatchRsvpsRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var convertFragment = SelectMatch_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(SelectMatch_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, SelectMatch_event_graphql.node, convertFragment);
}

var makeRefetchVariables = SelectMatchRsvpsRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = SelectMatchRsvpsRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(SelectMatch_event_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(SelectMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(SelectMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment_getConnectionNodes = SelectMatch_event_graphql.Utils.getConnectionNodes;

var Fragment = {
  getConnectionNodes: Fragment_getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

function SelectMatch$SortAction(props) {
  var setSortDir = props.setSortDir;
  var tmp;
  tmp = props.sortDir === "Asc" ? JsxRuntime.jsx(LucideReact.ArrowUpNarrowWide, {}) : JsxRuntime.jsx(LucideReact.ArrowDownWideNarrow, {});
  return JsxRuntime.jsx(UiAction.make, {
              onClick: (function () {
                  setSortDir(function (dir) {
                        if (dir === "Asc") {
                          return "Desc";
                        } else {
                          return "Asc";
                        }
                      });
                }),
              children: tmp
            });
}

var SortAction = {
  make: SelectMatch$SortAction
};

function SelectMatch$SelectEventPlayersList(props) {
  var __maxRating = props.maxRating;
  var __minRating = props.minRating;
  var onSelectPlayer = props.onSelectPlayer;
  var disabled = props.disabled;
  var selected = props.selected;
  var players = props.players;
  var minRating = __minRating !== undefined ? __minRating : 0;
  var maxRating = __maxRating !== undefined ? __maxRating : 1;
  var match = React.useState(function () {
        return "Desc";
      });
  var sortDir = match[0];
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx(SelectMatch$SortAction, {
                            sortDir: sortDir,
                            setSortDir: match[1]
                          }),
                      JsxRuntime.jsx(JsxRuntime.Fragment, {
                            children: Caml_option.some(JsxRuntime.jsx("ul", {
                                      children: JsxRuntime.jsx(FramerMotion.AnimatePresence, {
                                            children: players.length !== 0 ? players.toSorted(function (a, b) {
                                                      var userA = a.rating.mu;
                                                      var userB = b.rating.mu;
                                                      if (userA < userB) {
                                                        if (sortDir === "Desc") {
                                                          return 1;
                                                        } else {
                                                          return -1;
                                                        }
                                                      } else if (sortDir === "Desc") {
                                                        return -1;
                                                      } else {
                                                        return 1;
                                                      }
                                                    }).map(function (player) {
                                                    var disabled$1 = Core__Option.getOr(Core__Option.map(disabled, (function (disabled) {
                                                                return disabled.findIndex(function (p) {
                                                                            return player.id === p.id;
                                                                          }) >= 0;
                                                              })), false);
                                                    return JsxRuntime.jsxs(FramerMotion.motion.li, {
                                                                className: "mt-4 flex w-full flex-none gap-x-4 px-6",
                                                                style: {
                                                                  originX: 0.05,
                                                                  originY: 0.05
                                                                },
                                                                animate: {
                                                                  opacity: 1,
                                                                  scale: 1
                                                                },
                                                                initial: {
                                                                  opacity: 0,
                                                                  scale: 1.15
                                                                },
                                                                exit: {
                                                                  opacity: 0,
                                                                  scale: 1.15
                                                                },
                                                                layout: true,
                                                                children: [
                                                                  JsxRuntime.jsx("div", {
                                                                        children: JsxRuntime.jsx("span", {
                                                                              children: t`Player`,
                                                                              className: "sr-only"
                                                                            }),
                                                                        className: "flex-none"
                                                                      }),
                                                                  JsxRuntime.jsx("div", {
                                                                        children: JsxRuntime.jsx("a", {
                                                                              children: Core__Option.getOr(Core__Option.flatMap(player.data, (function (data) {
                                                                                          return Core__Option.map(data.user, (function (user) {
                                                                                                        return JsxRuntime.jsx(EventRsvpUser.make, {
                                                                                                                    user: user.fragmentRefs,
                                                                                                                    highlight: selected.findIndex(function (player) {
                                                                                                                          return player.id === user.id;
                                                                                                                        }) >= 0,
                                                                                                                    ratingPercent: (player.rating.mu - minRating) / (maxRating - minRating) * 100
                                                                                                                  });
                                                                                                      }));
                                                                                        })), JsxRuntime.jsx(RsvpUser.make, {
                                                                                        user: RsvpUser.makeGuest(player.name),
                                                                                        highlight: selected.findIndex(function (p) {
                                                                                              return p.id === player.id;
                                                                                            }) >= 0,
                                                                                        ratingPercent: (player.rating.mu - minRating) / (maxRating - minRating) * 100
                                                                                      })),
                                                                              href: "#",
                                                                              onClick: (function (e) {
                                                                                  e.preventDefault();
                                                                                  if (disabled$1) {
                                                                                    
                                                                                  } else {
                                                                                    Core__Option.map(onSelectPlayer, (function (f) {
                                                                                            f(player);
                                                                                          }));
                                                                                  }
                                                                                })
                                                                            }),
                                                                        className: Core.cx("text-sm w-full font-medium leading-6 text-gray-900", disabled$1 ? "opacity-50" : "")
                                                                      })
                                                                ]
                                                              }, player.id);
                                                  }) : t`no players yet`
                                          }),
                                      className: "w-full"
                                    }))
                          })
                    ],
                    className: "mt-4 flex w-full flex-none gap-x-4 border-t border-gray-900/5 px-6 py-4"
                  }),
              className: "rounded-lg bg-gray-50 shadow-sm ring-1 ring-gray-900/5"
            });
}

var SelectEventPlayersList = {
  make: SelectMatch$SelectEventPlayersList
};

function rot2(players, player) {
  var len = players.length;
  if (len >= 3) {
    return [player];
  }
  switch (len) {
    case 0 :
        return [player];
    case 1 :
        var p1 = players[0];
        return [
                p1,
                player
              ];
    case 2 :
        var p2 = players[1];
        return [
                p2,
                player
              ];
    
  }
}

function SelectMatch(props) {
  var onMatchCompleted = props.onMatchCompleted;
  var onMatchQueued = props.onMatchQueued;
  var activity = props.activity;
  var players = props.players;
  var match = React.useState(function () {
        return [];
      });
  var setLeftNodes = match[1];
  var leftNodes = match[0];
  var match$1 = React.useState(function () {
        return [];
      });
  var setRightNodes = match$1[1];
  var rightNodes = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setSelectedMatch = match$2[1];
  var matchSelected = function (match) {
    if (match[0].length !== 2 || match[1].length !== 2) {
      return ;
    } else {
      return setSelectedMatch(function (param) {
                  return match;
                });
    }
  };
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (next.rating.mu > acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (next.rating.mu < acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var onSelectLeftNode = function (node) {
    if (leftNodes.findIndex(function (node$p) {
            return node$p.id === node.id;
          }) >= 0) {
      return ;
    } else {
      return setLeftNodes(function (nodes) {
                  var nodes$1 = rot2(nodes, node);
                  matchSelected([
                        nodes$1,
                        rightNodes
                      ]);
                  return nodes$1;
                });
    }
  };
  var onSelectRightNode = function (node) {
    if (rightNodes.findIndex(function (node$p) {
            return node$p.id === node.id;
          }) >= 0) {
      return ;
    } else {
      return setRightNodes(function (nodes) {
                  var nodes$1 = rot2(nodes, node);
                  matchSelected([
                        leftNodes,
                        nodes$1
                      ]);
                  return nodes$1;
                });
    }
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("section", {
                            children: [
                              JsxRuntime.jsx("h2", {
                                    children: "Winners",
                                    className: "sr-only",
                                    id: "section-1-title"
                                  }),
                              JsxRuntime.jsx("h2", {
                                    children: t`left team players`
                                  }),
                              JsxRuntime.jsx(SelectMatch$SelectEventPlayersList, {
                                    players: players,
                                    selected: leftNodes,
                                    onSelectPlayer: onSelectLeftNode,
                                    minRating: minRating,
                                    maxRating: maxRating
                                  })
                            ],
                            "aria-labelledby": "section-1-title",
                            className: "col-span-2"
                          }),
                      className: "grid grid-cols-1 gap-4"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("section", {
                            children: [
                              JsxRuntime.jsx("h2", {
                                    children: "Losers",
                                    className: "sr-only",
                                    id: "section-2-title"
                                  }),
                              JsxRuntime.jsx("h2", {
                                    children: t`right team players`
                                  }),
                              JsxRuntime.jsx(SelectMatch$SelectEventPlayersList, {
                                    players: players,
                                    selected: rightNodes,
                                    disabled: leftNodes,
                                    onSelectPlayer: onSelectRightNode,
                                    minRating: minRating,
                                    maxRating: maxRating
                                  })
                            ],
                            "aria-labelledby": "section-2-title",
                            className: "col-span-2"
                          }),
                      className: "grid grid-cols-1 gap-4"
                    }),
                JsxRuntime.jsx("div", {
                      children: Core__Option.getOr(Core__Option.map(match$2[0], (function (match) {
                                  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                              children: [
                                                JsxRuntime.jsx("div", {
                                                      children: JsxRuntime.jsx(UiAction.make, {
                                                            onClick: (function () {
                                                                onMatchQueued(match);
                                                              }),
                                                            children: t`Queue Match`
                                                          }),
                                                      className: "text-center md:col-span-2"
                                                    }),
                                                JsxRuntime.jsx(React.Suspense, {
                                                      children: Caml_option.some(Core__Option.getOr(Core__Option.map(activity, (function (activity) {
                                                                      return JsxRuntime.jsx(SubmitMatch.make, {
                                                                                  match: match,
                                                                                  activity: activity,
                                                                                  minRating: minRating,
                                                                                  maxRating: maxRating,
                                                                                  onComplete: (function (match) {
                                                                                      onMatchCompleted(match);
                                                                                      setSelectedMatch(function (param) {
                                                                                            
                                                                                          });
                                                                                    })
                                                                                });
                                                                    })), null)),
                                                      fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                                                children: t`Loading`
                                                              }))
                                                    })
                                              ]
                                            });
                                })), null),
                      className: "grid grid-cols-1 md:col-span-2"
                    })
              ],
              className: "grid grid-cols-1 items-start gap-4 md:grid-cols-2 md:gap-8"
            });
}

var make = SelectMatch;

export {
  Fragment ,
  SortAction ,
  SelectEventPlayersList ,
  rot2 ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Rating from "../../lib/Rating.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as EventRsvpUser from "./EventRsvpUser.re.mjs";
import * as FramerMotion from "framer-motion";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as EventRsvps_rsvp_graphql from "../../__generated__/EventRsvps_rsvp_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var convertFragment = EventRsvps_rsvp_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventRsvps_rsvp_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventRsvps_rsvp_graphql.node, convertFragment);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function EventRsvp$ListItem(props) {
  return JsxRuntime.jsxs(FramerMotion.motion.li, {
              className: "mt-4 flex w-full flex-none",
              style: {
                originX: 0.05,
                originY: 0.05
              },
              animate: {
                opacity: 1,
                scale: 1
              },
              initial: {
                opacity: 0,
                scale: 1.15
              },
              exit: {
                opacity: 0,
                scale: 1.15
              },
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("span", {
                            children: t`Player`,
                            className: "sr-only"
                          }),
                      className: "flex-none"
                    }),
                JsxRuntime.jsx("div", {
                      children: props.children,
                      className: "w-full text-sm font-medium leading-6 text-gray-900"
                    })
              ]
            });
}

var ListItem = {
  make: EventRsvp$ListItem
};

function EventRsvp$StatusMessage(props) {
  var message = props.message;
  var match = React.useState(function () {
        return false;
      });
  var setExpanded = match[1];
  var isLong = message.length > 25;
  var content = isLong && !match[0] ? message.slice(0, 25) + "..." : message;
  return JsxRuntime.jsx("div", {
              children: content,
              className: "text-sm text-gray-500 ml-2 mt-4" + (
                isLong ? " cursor-pointer" : ""
              ),
              onClick: (function (param) {
                  if (isLong) {
                    return setExpanded(function (prev) {
                                return !prev;
                              });
                  }
                  
                })
            });
}

var StatusMessage = {
  make: EventRsvp$StatusMessage
};

function EventRsvp(props) {
  var maxRating = props.maxRating;
  var activitySlug = props.activitySlug;
  var viewer = props.viewer;
  var rsvp = use(props.rsvp);
  return Core__Option.getOr(Core__Option.map(rsvp.user, (function (user) {
                    var tmp;
                    tmp = activitySlug === "pickleball" ? Core__Option.getOr(Core__Option.map(Core__Option.flatMap(rsvp.rating, (function (r) {
                                      return r.mu;
                                    })), (function (mu) {
                                  return "DUPR " + Rating.guessDupr(mu).toFixed(2);
                                })), "") : "";
                    return JsxRuntime.jsxs(EventRsvp$ListItem, {
                                children: [
                                  JsxRuntime.jsx(EventRsvpUser.make, {
                                        user: user.fragmentRefs,
                                        highlight: Core__Option.getOr(Core__Option.map(viewer, (function (viewer) {
                                                    return viewer.id === user.id;
                                                  })), false),
                                        link: "/league/" + Core__Option.getOr(activitySlug, "badminton") + "/p/" + user.id,
                                        secondaryText: tmp,
                                        sigmaPercent: Core__Option.getOr(Core__Option.flatMap(rsvp.rating, (function (rating) {
                                                    return Core__Option.map(rating.sigma, (function (sigma) {
                                                                  return 3 * sigma / maxRating * 100;
                                                                }));
                                                  })), 0),
                                        ratingPercent: Core__Option.getOr(Core__Option.flatMap(rsvp.rating, (function (rating) {
                                                    return Core__Option.flatMap(rating.mu, (function (mu) {
                                                                  return Core__Option.map(rating.sigma, (function (sigma) {
                                                                                return (mu - sigma * 3.0) / maxRating * 100;
                                                                              }));
                                                                }));
                                                  })), 0)
                                      }),
                                  Core__Option.getOr(Core__Option.map(rsvp.message, (function (message) {
                                              return JsxRuntime.jsx(EventRsvp$StatusMessage, {
                                                          message: message
                                                        });
                                            })), null)
                                ]
                              }, user.id);
                  })), null);
}

var make = EventRsvp;

export {
  Fragment ,
  ListItem ,
  StatusMessage ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import Zod from "zod";
import * as Form from "../molecules/forms/Form.re.mjs";
import * as Grid from "../vanillaui/atoms/Grid.re.mjs";
import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as DateFns from "date-fns";
import * as Core__Int from "@rescript/core/src/Core__Int.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FormSection from "../molecules/forms/FormSection.re.mjs";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as Core$1 from "@linaria/core";
import * as FramerMotion from "framer-motion";
import * as RelayRuntime from "relay-runtime";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactHookForm from "react-hook-form";
import * as ReactRouterDom from "react-router-dom";
import * as React$1 from "@headlessui/react";
import * as JsxRuntime from "react/jsx-runtime";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as Zod$1 from "@hookform/resolvers/zod";
import * as CreateLocationEventForm_event_graphql from "../../__generated__/CreateLocationEventForm_event_graphql.re.mjs";
import * as CreateLocationEventFormMutation_graphql from "../../__generated__/CreateLocationEventFormMutation_graphql.re.mjs";
import * as CreateLocationEventForm_location_graphql from "../../__generated__/CreateLocationEventForm_location_graphql.re.mjs";
import * as CreateLocationEventForm_activities_graphql from "../../__generated__/CreateLocationEventForm_activities_graphql.re.mjs";
import * as CreateLocationEventFormUpdateMutation_graphql from "../../__generated__/CreateLocationEventFormUpdateMutation_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertVariables = CreateLocationEventFormMutation_graphql.Internal.convertVariables;

var convertResponse = CreateLocationEventFormMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = CreateLocationEventFormMutation_graphql.Internal.convertWrapRawResponse;

RescriptRelay_Mutation.commitMutation(convertVariables, CreateLocationEventFormMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, CreateLocationEventFormMutation_graphql.node, convertResponse, convertWrapRawResponse);

var convertFragment = CreateLocationEventForm_event_graphql.Internal.convertFragment;

var convertVariables$1 = CreateLocationEventFormUpdateMutation_graphql.Internal.convertVariables;

var convertResponse$1 = CreateLocationEventFormUpdateMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = CreateLocationEventFormUpdateMutation_graphql.Internal.convertWrapRawResponse;

RescriptRelay_Mutation.commitMutation(convertVariables$1, CreateLocationEventFormUpdateMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables$1, CreateLocationEventFormUpdateMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var convertFragment$1 = CreateLocationEventForm_location_graphql.Internal.convertFragment;

function use$2(fRef) {
  return RescriptRelay_Fragment.useFragment(CreateLocationEventForm_location_graphql.node, convertFragment$1, fRef);
}

var convertFragment$2 = CreateLocationEventForm_activities_graphql.Internal.convertFragment;

function use$3(fRef) {
  return RescriptRelay_Fragment.useFragment(CreateLocationEventForm_activities_graphql.node, convertFragment$2, fRef);
}

var schema = Zod.object({
      title: Zod.string({
              required_error: t`title is required`
            }).min(1),
      activity: Zod.string({
            required_error: t`activity is required`
          }),
      maxRsvps: Zod.number({}).gte(1).optional(),
      startDate: Zod.string({
              required_error: t`event date is required`
            }).min(1),
      endTime: Zod.string({
              required_error: t`end time is required`
            }).min(5),
      details: Zod.string({}).optional(),
      listed: Zod.boolean({})
    });

function makeAction($$event) {
  if ($$event !== undefined) {
    return {
            TAG: "Update",
            _0: $$event
          };
  } else {
    return "Create";
  }
}

function CreateLocationEventForm(props) {
  var $$event = Core__Option.map(props.event, (function ($$event) {
          return RescriptRelay_Fragment.useFragment(CreateLocationEventForm_event_graphql.node, convertFragment, $$event);
        }));
  var $$location = use$2(props.location);
  var query = use$3(props.query);
  var match = use();
  var commitMutationCreate = match[0];
  var match$1 = use$1();
  var commitMutationUpdate = match$1[0];
  var navigate = ReactRouterDom.useNavigate();
  var action = makeAction($$event);
  var match$2 = ReactHookForm.useForm({
        resolver: Caml_option.some(Zod$1.zodResolver(schema)),
        defaultValues: Core__Option.getOr(Core__Option.map($$event, (function ($$event) {
                    return {
                            title: Core__Option.getOr($$event.title, ""),
                            activity: Core__Option.getOr(Core__Option.map($$event.activity, (function (a) {
                                        return a.id;
                                      })), ""),
                            maxRsvps: Caml_option.some(Core__Option.map($$event.maxRsvps, (function (prim) {
                                        return prim;
                                      }))),
                            startDate: Core__Option.getOr(Core__Option.map($$event.startDate, (function (d) {
                                        return DateFns.format(Util.Datetime.toDate(d), "yyyy-MM-dd'T'HH:00");
                                      })), ""),
                            endTime: Core__Option.getOr(Core__Option.map($$event.endDate, (function (d) {
                                        return DateFns.format(Util.Datetime.toDate(d), "HH:mm");
                                      })), ""),
                            details: Caml_option.some($$event.details),
                            listed: Core__Option.getOr($$event.listed, false)
                          };
                  })), {
              listed: false
            })
      });
  var setValue = match$2.setValue;
  var formState = match$2.formState;
  var handleSubmit = match$2.handleSubmit;
  var register = match$2.register;
  var listed = Core__Option.getOr(Core__Option.map(match$2.watch("listed"), (function (listed) {
              if (!Array.isArray(listed) && (listed === null || typeof listed !== "object") && typeof listed !== "string" && typeof listed !== "number" && typeof listed !== "boolean" || typeof listed !== "boolean") {
                return false;
              } else {
                return listed;
              }
            })), false);
  React.useEffect((function () {
          if (typeof action !== "object") {
            var now = new Date();
            var currentISODate = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
            var currentDate = DateFns.parseISO(currentISODate);
            var defaultStartDate = DateFns.format(currentDate, "yyyy-MM-dd'T'HH:00");
            var defaultEndTime = DateFns.format(DateFns.addHours(DateFns.parseISO(defaultStartDate), 2.0), "HH:mm");
            setValue("startDate", defaultStartDate, undefined);
            setValue("endTime", defaultEndTime, undefined);
          }
          
        }), []);
  var onSubmit = function (data) {
    if (typeof action !== "object") {
      var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("client:root", "EventsListFragment_events", undefined);
      var startDate = DateFns.parseISO(data.startDate);
      var endDate = DateFns.parse(data.endTime, "HH:mm", startDate);
      commitMutationCreate({
            connections: [connectionId],
            input: {
              activity: data.activity,
              details: Core__Option.getOr(data.details, ""),
              endDate: Util.Datetime.fromDate(endDate),
              listed: data.listed,
              locationId: $$location.id,
              maxRsvps: Core__Option.map(data.maxRsvps, (function (prim) {
                      return prim | 0;
                    })),
              startDate: Util.Datetime.fromDate(startDate),
              title: data.title
            }
          }, undefined, undefined, undefined, (function (response, _errors) {
              Core__Option.map(response.createEvent.event, (function ($$event) {
                      navigate("/events/" + $$event.id, undefined);
                    }));
            }), undefined, undefined);
      return ;
    }
    var $$event = action._0;
    var startDate$1 = DateFns.parseISO(data.startDate);
    var endDate$1 = DateFns.parse(data.endTime, "HH:mm", startDate$1);
    commitMutationUpdate({
          eventId: $$event.id,
          input: {
            activity: data.activity,
            details: Core__Option.getOr(data.details, ""),
            endDate: Util.Datetime.fromDate(endDate$1),
            listed: data.listed,
            locationId: $$location.id,
            maxRsvps: Core__Option.map(data.maxRsvps, (function (prim) {
                    return prim | 0;
                  })),
            startDate: Util.Datetime.fromDate(startDate$1),
            title: data.title
          }
        }, undefined, undefined, undefined, (function (response, _errors) {
            navigate("/events/" + $$event.id, undefined);
          }), undefined, undefined);
  };
  return JsxRuntime.jsx(FramerMotion.motion.div, {
              style: {
                opacity: 0,
                y: -50
              },
              animate: {
                opacity: 1,
                scale: 1,
                y: 0.00
              },
              initial: {
                opacity: 0,
                scale: 1,
                y: -50
              },
              exit: {
                opacity: 0,
                scale: 1,
                y: -50
              },
              children: Caml_option.some(JsxRuntime.jsx(WaitForMessages.make, {
                        children: (function () {
                            var match = formState.errors.title;
                            var tmp;
                            if (match !== undefined) {
                              var message = match.message;
                              tmp = message !== undefined ? message : "";
                            } else {
                              tmp = "";
                            }
                            var match$1 = formState.errors.activity;
                            var tmp$1;
                            if (match$1 !== undefined) {
                              var message$1 = match$1.message;
                              tmp$1 = message$1 !== undefined ? message$1 : "";
                            } else {
                              tmp$1 = "";
                            }
                            return JsxRuntime.jsx(JsxRuntime.Fragment, {
                                        children: Caml_option.some(JsxRuntime.jsx(Grid.make, {
                                                  className: "grid-cols-1",
                                                  children: JsxRuntime.jsxs("form", {
                                                        children: [
                                                          JsxRuntime.jsx(FormSection.make, {
                                                                title: t`${Core__Option.getOr($$location.name, "?")} event details`,
                                                                description: Caml_option.some(t`details specific to this event on the specified date and time.`),
                                                                children: JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsxs("div", {
                                                                              children: [
                                                                                JsxRuntime.jsx(Form.Input.make, {
                                                                                      label: t`title`,
                                                                                      name: "title",
                                                                                      id: "title",
                                                                                      placeholder: t`All Level`,
                                                                                      register: register("title", undefined)
                                                                                    }),
                                                                                JsxRuntime.jsx("p", {
                                                                                      children: tmp
                                                                                    })
                                                                              ],
                                                                              className: "sm:col-span-4 md:col-span-3"
                                                                            }),
                                                                        JsxRuntime.jsxs("div", {
                                                                              children: [
                                                                                JsxRuntime.jsx(Form.Select.make, {
                                                                                      label: t`activity`,
                                                                                      name: "activity",
                                                                                      id: "activity",
                                                                                      options: query.activities.map(function (activity) {
                                                                                            return [
                                                                                                    Core.i18n._(Core__Option.getOr(activity.name, "---")),
                                                                                                    activity.id
                                                                                                  ];
                                                                                          }),
                                                                                      register: register("activity", undefined)
                                                                                    }),
                                                                                JsxRuntime.jsx("p", {
                                                                                      children: tmp$1
                                                                                    })
                                                                              ],
                                                                              className: "sm:col-span-2 md:col-span-3 lg:col-span-2 lg:max-w-lg"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsx(Form.Input.make, {
                                                                                    label: t`date and start time`,
                                                                                    name: "startDate",
                                                                                    id: "startDate",
                                                                                    type_: "datetime-local",
                                                                                    register: register("startDate", undefined)
                                                                                  }),
                                                                              className: "sm:col-span-2"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsx(Form.Input.make, {
                                                                                    label: t`end time`,
                                                                                    name: "endTime",
                                                                                    id: "endTime",
                                                                                    type_: "time",
                                                                                    register: register("endTime", undefined)
                                                                                  }),
                                                                              className: "sm:col-span-2"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsx(Form.Input.make, {
                                                                                    label: t`max participants`,
                                                                                    name: "maxRsvps",
                                                                                    id: "maxRsvps",
                                                                                    type_: "number",
                                                                                    register: register("maxRsvps", {
                                                                                          setValueAs: (function (v) {
                                                                                              if (v === "") {
                                                                                                return ;
                                                                                              } else {
                                                                                                return Caml_option.some(Core__Int.fromString(v, undefined));
                                                                                              }
                                                                                            })
                                                                                        })
                                                                                  }),
                                                                              className: "sm:col-span-2"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsx(Form.TextArea.make, {
                                                                                    label: t`location details`,
                                                                                    name: "location_details",
                                                                                    id: "location_details",
                                                                                    hint: Caml_option.some(JsxRuntime.jsx(ReactRouterDom.Link, {
                                                                                              to: "/locations/edit/",
                                                                                              children: t`edit the location to edit the details for this location.`
                                                                                            })),
                                                                                    value: Core__Option.getOr($$location.details, ""),
                                                                                    disabled: true
                                                                                  }),
                                                                              className: "col-span-full"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsx(Form.TextArea.make, {
                                                                                    label: t`event details`,
                                                                                    name: "details",
                                                                                    id: "details",
                                                                                    hint: Caml_option.some(t`any details from the location will already be included. Mention any additional event-specific instructions, rules, or details.`),
                                                                                    register: register("details", undefined)
                                                                                  }),
                                                                              className: "col-span-full"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsxs(React$1.Switch.Group, {
                                                                                    as: "div",
                                                                                    className: "flex items-center",
                                                                                    children: [
                                                                                      JsxRuntime.jsx(React$1.Switch, {
                                                                                            className: Core$1.cx(listed ? "bg-indigo-600" : "bg-gray-200", "relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2"),
                                                                                            children: JsxRuntime.jsx("span", {
                                                                                                  "aria-hidden": true,
                                                                                                  className: Core$1.cx(listed ? "translate-x-5" : "translate-x-0", "pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out")
                                                                                                }),
                                                                                            checked: listed,
                                                                                            onChange: (function (param) {
                                                                                                setValue("listed", !listed, undefined);
                                                                                              })
                                                                                          }),
                                                                                      JsxRuntime.jsxs(React$1.Switch.Label, {
                                                                                            as: "span",
                                                                                            className: "ml-3 text-sm",
                                                                                            children: [
                                                                                              JsxRuntime.jsx("span", {
                                                                                                    children: t`list publicly`,
                                                                                                    className: "font-medium text-gray-900"
                                                                                                  }),
                                                                                              " ",
                                                                                              JsxRuntime.jsx("span", {
                                                                                                    children: t`show your event publicly on our home page. Otherwise, only people with a link to your event will be able to find it.`,
                                                                                                    className: "text-gray-500"
                                                                                                  })
                                                                                            ]
                                                                                          })
                                                                                    ]
                                                                                  }),
                                                                              className: "col-span-full"
                                                                            })
                                                                      ],
                                                                      className: "mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6"
                                                                    })
                                                              }),
                                                          JsxRuntime.jsx(Form.Footer.make, {})
                                                        ],
                                                        onSubmit: handleSubmit(onSubmit)
                                                      })
                                                }))
                                      });
                          })
                      }))
            });
}

t({
      id: "Badminton"
    });

t({
      id: "Table Tennis"
    });

t({
      id: "Pickleball"
    });

t({
      id: "Futsal"
    });

t({
      id: "Basketball"
    });

t({
      id: "Volleyball"
    });

var make = CreateLocationEventForm;

export {
  make ,
}
/*  Not a pure module */

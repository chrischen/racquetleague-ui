// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Button from "../catalyst/Button.re.mjs";
import * as Layout from "../shared/Layout.re.mjs";
import * as Rating from "../../lib/Rating.re.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Session from "../../lib/Session.re.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as CompMatch from "./CompMatch.re.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as MatchesView from "./MatchesView.re.mjs";
import * as SelectMatch from "./SelectMatch.re.mjs";
import * as SubmitMatch from "./SubmitMatch.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as Core__Promise from "@rescript/core/src/Core__Promise.re.mjs";
import * as RelayRuntime from "relay-runtime";
import * as SessionAddPlayer from "./SessionAddPlayer.re.mjs";
import * as React$1 from "@headlessui/react";
import * as JsxRuntime from "react/jsx-runtime";
import * as ReactHelmetAsync from "react-helmet-async";
import * as SessionEvenPlayMode from "./SessionEvenPlayMode.re.mjs";
import * as AppContext from "../layouts/appContext";
import * as AiTetsu_event_graphql from "../../__generated__/AiTetsu_event_graphql.re.mjs";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as Outline from "@heroicons/react/24/outline";
import * as AiTetsuRsvpsRefetchQuery_graphql from "../../__generated__/AiTetsuRsvpsRefetchQuery_graphql.re.mjs";
import * as AiTetsuSubmitMatchMutation_graphql from "../../__generated__/AiTetsuSubmitMatchMutation_graphql.re.mjs";
import * as AiTetsuCreateRatingMutation_graphql from "../../__generated__/AiTetsuCreateRatingMutation_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var convertVariables = AiTetsuCreateRatingMutation_graphql.Internal.convertVariables;

var convertResponse = AiTetsuCreateRatingMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = AiTetsuCreateRatingMutation_graphql.Internal.convertWrapRawResponse;

RescriptRelay_Mutation.commitMutation(convertVariables, AiTetsuCreateRatingMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, AiTetsuCreateRatingMutation_graphql.node, convertResponse, convertWrapRawResponse);

var convertVariables$1 = AiTetsuSubmitMatchMutation_graphql.Internal.convertVariables;

var convertResponse$1 = AiTetsuSubmitMatchMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = AiTetsuSubmitMatchMutation_graphql.Internal.convertWrapRawResponse;

RescriptRelay_Mutation.commitMutation(convertVariables$1, AiTetsuSubmitMatchMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables$1, AiTetsuSubmitMatchMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var getConnectionNodes = AiTetsu_event_graphql.Utils.getConnectionNodes;

var convertFragment = AiTetsu_event_graphql.Internal.convertFragment;

function use$2(fRef) {
  return RescriptRelay_Fragment.useFragment(AiTetsu_event_graphql.node, convertFragment, fRef);
}

var makeRefetchVariables = AiTetsuRsvpsRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = AiTetsuRsvpsRefetchQuery_graphql.Internal.convertVariables;

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(AiTetsu_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function AiTetsu$TeamListItem(props) {
  var onDelete = props.onDelete;
  var id = props.id;
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(UiAction.make, {
                              onClick: (function (param) {
                                  onDelete(id);
                                }),
                              children: JsxRuntime.jsx(Outline.XMarkIcon, {
                                    className: "h-8 w-8 inline"
                                  })
                            }),
                        t`Team ${id.toString()}`
                      ],
                      className: "text-xl"
                    }),
                props.team.map(function (player) {
                      return JsxRuntime.jsx(CompMatch.PlayerMini.make, {
                                  player: player
                                });
                    })
              ]
            });
}

function AiTetsu$TeamsList(props) {
  var onDelete = props.onDelete;
  return JsxRuntime.jsx("ul", {
              children: Util.NonEmptyArray.toArray(Util.NonEmptyArray.mapWithIndex(props.teams, (function (team, i) {
                          return JsxRuntime.jsx("li", {
                                      children: JsxRuntime.jsx(AiTetsu$TeamListItem, {
                                            id: i + 1 | 0,
                                            team: team,
                                            onDelete: (function (param) {
                                                onDelete(i);
                                              })
                                          })
                                    }, i.toString());
                        })))
            });
}

function AiTetsu$TeamSelector(props) {
  var onTeamCreate = props.onTeamCreate;
  var players = props.players;
  var match = React.useState(function () {
        return "Desc";
      });
  var sortDir = match[0];
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (next.rating.mu > acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (next.rating.mu < acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var players$1 = players.toSorted(function (a, b) {
        var userA = a.rating.mu;
        var userB = b.rating.mu;
        if (userA < userB) {
          if (sortDir === "Desc") {
            return 1;
          } else {
            return -1;
          }
        } else if (sortDir === "Desc") {
          return -1;
        } else {
          return 1;
        }
      });
  var match$1 = React.useState(function () {
        return [];
      });
  var setMembers = match$1[1];
  var members = match$1[0];
  var onSelectPlayer = function (player) {
    setMembers(function (param) {
          var removed = members.filter(function (p) {
                return p.id !== player.id;
              });
          if (removed.length < members.length) {
            return removed;
          } else {
            return members.concat([player]);
          }
        });
  };
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsx(SelectMatch.SortAction.make, {
                      sortDir: sortDir,
                      setSortDir: match[1]
                    }),
                JsxRuntime.jsx(SelectMatch.SelectEventPlayersList.make, {
                      players: players$1,
                      selected: members,
                      disabled: props.teamPlayers,
                      onSelectPlayer: onSelectPlayer,
                      minRating: minRating,
                      maxRating: maxRating
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(UiAction.make, {
                            onClick: (function (param) {
                                var match = members.length;
                                if (!(match === 0 || match === 1)) {
                                  onTeamCreate(members);
                                  return setMembers(function (param) {
                                              return [];
                                            });
                                }
                                
                              }),
                            className: "rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",
                            children: t`Create Team`
                          }),
                      className: "mt-6 flex items-center justify-end gap-x-6"
                    })
              ]
            });
}

function AiTetsu$Leaderboard(props) {
  var players = props.players;
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (next.rating.mu > acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (next.rating.mu < acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var match = React.useState(function () {
        return [];
      });
  var setMembers = match[1];
  var members = match[0];
  var onSelectPlayer = function (player) {
    setMembers(function (param) {
          var removed = members.filter(function (p) {
                return p.id !== player.id;
              });
          if (removed.length < members.length) {
            return removed;
          } else {
            return members.concat([player]);
          }
        });
  };
  var players$1 = players.toSorted(function (a, b) {
        var userA = Rating.Rating.ordinal(a.rating);
        var userB = Rating.Rating.ordinal(b.rating);
        if (userA < userB) {
          return 1;
        } else {
          return -1;
        }
      });
  var players1 = players$1.slice(0, players$1.length / 3 | 0);
  var players2 = players$1.slice(players$1.length / 3 | 0, (players$1.length << 1) / 3 | 0);
  var players3 = players$1.slice((players$1.length << 1) / 3 | 0, players$1.length);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx(SelectMatch.SelectEventPlayersList.make, {
                      players: players1,
                      selected: members,
                      onSelectPlayer: onSelectPlayer,
                      minRating: minRating,
                      maxRating: maxRating
                    }),
                JsxRuntime.jsx(SelectMatch.SelectEventPlayersList.make, {
                      players: players2,
                      selected: members,
                      onSelectPlayer: onSelectPlayer,
                      minRating: minRating,
                      maxRating: maxRating,
                      playerNumberOffset: players$1.length / 3 | 0
                    }),
                JsxRuntime.jsx(SelectMatch.SelectEventPlayersList.make, {
                      players: players3,
                      selected: members,
                      onSelectPlayer: onSelectPlayer,
                      minRating: minRating,
                      maxRating: maxRating,
                      playerNumberOffset: (players$1.length << 1) / 3 | 0
                    })
              ],
              className: "grid lg:grid-cols-3 gap-4 mt-2"
            });
}

function AiTetsu$Checkin(props) {
  var onToggleCheckin = props.onToggleCheckin;
  var disabled = props.disabled;
  var players = props.players;
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (next.rating.mu > acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (next.rating.mu < acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  return JsxRuntime.jsx("div", {
              children: players.map(function (player) {
                    var match = disabled.has(player.id);
                    var status = match ? "Available" : "Queued";
                    return JsxRuntime.jsx(UiAction.make, {
                                onClick: (function (param) {
                                    onToggleCheckin(player, disabled.has(player.id));
                                  }),
                                children: JsxRuntime.jsx(MatchesView.PlayerView.make, {
                                      player: player,
                                      minRating: minRating,
                                      maxRating: maxRating,
                                      status: status
                                    }, player.id)
                              }, player.id);
                  }),
              className: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3"
            });
}

function getDeprioritizedPlayers(history, players, session, $$break) {
  var lastPlayed = Rating.CompletedMatches.getLastPlayedPlayers(history, $$break, players.length);
  var maxCount = Core__Array.reduce(players, 0, (function (acc, next) {
          var count = Session.get(session, next.id).count;
          if (count > acc) {
            return count;
          } else {
            return acc;
          }
        }));
  var minCount = Core__Array.reduce(players, maxCount, (function (acc, next) {
          var count = Session.get(session, next.id).count;
          if (count < acc) {
            return count;
          } else {
            return acc;
          }
        }));
  var breakPlayers = Rating.Players.sortByPlayCountDesc(players.filter(function (p) {
              var count = Session.get(session, p.id).count;
              if (count === maxCount) {
                return count !== minCount;
              } else {
                return false;
              }
            }), session).slice(0, $$break);
  var deprioritized;
  if (breakPlayers.length < $$break) {
    var breakAndLastPlayed = Rating.Players.addBreakPlayersFrom(breakPlayers, lastPlayed, $$break);
    deprioritized = breakAndLastPlayed.length < $$break ? new Set(Rating.Players.addBreakPlayersFrom(breakAndLastPlayed, players, $$break).map(function (p) {
                return p.id;
              })) : new Set(breakAndLastPlayed.map(function (p) {
                return p.id;
              }));
  } else {
    deprioritized = new Set(breakPlayers.map(function (p) {
              return p.id;
            }));
  }
  if (history.length === 0) {
    return new Set();
  } else {
    return deprioritized;
  }
}

function getPriorityPlayers(history, players, session, $$break) {
  var lastPlayed = Rating.CompletedMatches.getLastPlayedPlayers(history, $$break, players.length);
  var maxCount = Core__Array.reduce(players, 0, (function (acc, next) {
          var count = Session.get(session, next.id).count;
          if (count > acc) {
            return count;
          } else {
            return acc;
          }
        }));
  var minCount = Core__Array.reduce(players, maxCount, (function (acc, next) {
          var count = Session.get(session, next.id).count;
          if (count < acc) {
            return count;
          } else {
            return acc;
          }
        }));
  var breakPlayers = Rating.Players.sortByPlayCountDesc(players.filter(function (p) {
                var count = Session.get(session, p.id).count;
                if (count === maxCount) {
                  return count !== minCount;
                } else {
                  return false;
                }
              }), session).slice(0, $$break).map(function (p) {
        return p.id;
      });
  var deprioritized = breakPlayers.length < $$break ? new Set(Rating.Players.filterOut(lastPlayed, new Set(breakPlayers)).slice(0, $$break - breakPlayers.length | 0).map(function (p) {
                return p.id;
              }).concat(breakPlayers)) : new Set(breakPlayers);
  return {
          prioritized: Core__Array.reduce(players, [], (function (acc, next) {
                  var count = Session.get(session, next.id).count;
                  if (minCount !== maxCount && count === minCount) {
                    return acc.concat([next]);
                  } else {
                    return acc;
                  }
                })),
          deprioritized: deprioritized
        };
}

function rsvpToPlayer(rsvp) {
  var match = Core__Option.map(rsvp.user, (function (u) {
          return u.id;
        }));
  var match$1 = rsvp.rating;
  if (match === undefined) {
    return ;
  }
  var rating;
  if (match$1 !== undefined) {
    var mu = match$1.mu;
    rating = mu !== undefined && match$1.sigma !== undefined ? Rating.Rating.make(mu, 8.333) : Rating.Rating.makeDefault();
  } else {
    rating = Rating.Rating.makeDefault();
  }
  return {
          data: rsvp,
          id: match,
          name: Core__Option.getOr(Core__Option.flatMap(rsvp.user, (function (u) {
                      return u.lineUsername;
                    })), ""),
          rating: rating,
          ratingOrdinal: Rating.Rating.ordinal(rating),
          paid: false
        };
}

function addGuestPlayer(sessionPlayers, player) {
  var existingPlayer = sessionPlayers.find(function (p) {
        return p.id === player.id;
      });
  if (existingPlayer !== undefined) {
    return sessionPlayers;
  } else {
    return sessionPlayers.concat([player]);
  }
}

function AiTetsu(props) {
  var $$event = props.event;
  var match = use$2($$event);
  var eventId = match.id;
  var activity = match.activity;
  var match$1 = use();
  var commitMutationCreateRating = match$1[0];
  var match$2 = use$1();
  var commitMutationCreateLeagueMatch = match$2[0];
  var match$3 = React.useState(function () {
        return [];
      });
  var setMatches = match$3[1];
  var matches = match$3[0];
  var match$4 = React.useState(function () {
        return false;
      });
  var setManualTeamOpen = match$4[1];
  var match$5 = React.useState(function () {
        return "Advanced";
      });
  var setScreen = match$5[1];
  var match$6 = React.useState(function () {
        return Util.NonEmptyArray.empty;
      });
  var setTeams = match$6[1];
  var teams = match$6[0];
  var match$7 = React.useState(function () {
        
      });
  var setSettingsPane = match$7[1];
  var settingsPane = match$7[0];
  var match$8 = React.useState(function () {
        return [];
      });
  var setQueue = match$8[1];
  var match$9 = React.useState(function () {
        return new Set();
      });
  var setDisabled = match$9[1];
  var disabled = match$9[0];
  var match$10 = React.useState(function () {
        return Session.make();
      });
  var setSessionState = match$10[1];
  var sessionState = match$10[0];
  var match$11 = React.useState(function () {
        return [];
      });
  var setSessionPlayers = match$11[1];
  var sessionPlayers = match$11[0];
  var match$12 = React.useState(function () {
        return false;
      });
  var setSessionMode = match$12[1];
  var sessionMode = match$12[0];
  var match$13 = React.useState(function () {
        return 0;
      });
  var setCourts = match$13[1];
  var courts = match$13[0];
  var match$14 = React.useState(function () {
        return "CompetitivePlus";
      });
  var match$15 = React.useState(function () {
        return [];
      });
  var setMatchHistory = match$15[1];
  var matchHistory = match$15[0];
  var match$16 = React.useState(function () {
        return {};
      });
  var setLocallyCompletedMatches = match$16[1];
  var locallyCompletedMatches = match$16[0];
  var match$17 = React.useState(function () {
        
      });
  var togglePlayer = Rating.OrderedQueue.toggle;
  var toggleQueuePlayer = function (player) {
    setQueue(function (queue) {
          return togglePlayer(queue, player.id);
        });
  };
  var match$18 = usePagination($$event);
  var refetch = match$18.refetch;
  var data = match$18.data;
  var allPlayers = sessionMode || sessionPlayers.length >= getConnectionNodes(data.rsvps).length ? sessionPlayers : Core__Array.filterMap(getConnectionNodes(data.rsvps), rsvpToPlayer).concat(sessionPlayers);
  var players = allPlayers.filter(function (p) {
        return !disabled.has(p.id);
      });
  var playersCache = Rating.PlayersCache.fromPlayers(allPlayers);
  var breakCount = courts === 0 ? 0 : players.length - (courts << 2) | 0;
  var seenTeams = new Set(matchHistory.flatMap(function (param) {
              var match = param[0];
              return [
                      match[0],
                      match[1]
                    ];
            }).map(function (t) {
            return Rating.Team.toStableId(t);
          }));
  var seenMatches = new Set(matchHistory.map(function (m) {
            return Rating.CompletedMatch.toStableId(m);
          }));
  var lastRoundSeenTeams = new Set(Rating.CompletedMatches.getLastRoundMatches(matchHistory, breakCount, players.length, 4).flatMap(function (param) {
              var match = param[0];
              return [
                      match[0],
                      match[1]
                    ];
            }).map(function (t) {
            return Rating.Team.toStableId(t);
          }));
  var lastRoundSeenMatches = new Set(Rating.CompletedMatches.getLastRoundMatches(matchHistory, breakCount, players.length, 4).map(function (m) {
            return Rating.CompletedMatch.toStableId(m);
          }));
  var initializeRatings = function () {
    return allPlayers.map(function (p) {
                commitMutationCreateRating({
                      userId: p.id
                    }, undefined, undefined, undefined, undefined, undefined, undefined);
              });
  };
  var clearSession = function () {
    Session.saveState(Session.make(), eventId);
    Rating.Players.savePlayers([], eventId);
    Rating.CompletedMatches.saveMatches([], eventId);
  };
  React.useEffect((function () {
          console.log("Initializing player ratings");
          initializeRatings();
          console.log("Loading state");
          var state = Session.loadState(eventId);
          var players = Rating.Players.loadPlayers(allPlayers, eventId);
          var history = Rating.CompletedMatches.loadMatches(eventId, allPlayers);
          setSessionState(function (param) {
                return state;
              });
          setSessionPlayers(function (param) {
                return players;
              });
          setMatchHistory(function (param) {
                return history;
              });
          console.log("Disabling players by default");
          setDisabled(function (param) {
                return new Set(allPlayers.map(function (p) {
                                return p.id;
                              }));
              });
        }), []);
  React.useEffect((function () {
          var history = Rating.CompletedMatches.loadMatches(eventId, allPlayers);
          setMatchHistory(function (param) {
                return history;
              });
        }), [sessionPlayers]);
  var consumedPlayers = new Set(matches.flatMap(function (match) {
            return match[0].concat(match[1]).map(function (p) {
                        return p.id;
                      });
          }));
  var availablePlayers = players.filter(function (p) {
        return !consumedPlayers.has(p.id);
      });
  var deprioritized = getDeprioritizedPlayers(matchHistory, players, sessionState, breakCount);
  var queue = Rating.OrderedQueue.filter(match$8[0], disabled);
  var breakPlayersCount = queue.length;
  var queuedPlayers = Core__Array.filterMap(queue.map(function (id) {
            return Rating.PlayersCache.get(playersCache, id);
          }), (function (x) {
          return x;
        }));
  var match$19 = getPriorityPlayers(matchHistory, queuedPlayers, sessionState, breakCount);
  var availablePlayers$1 = availablePlayers.filter(function (p) {
        return !deprioritized.has(p.id);
      });
  var avoidAllPlayers = [];
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (next.rating.mu > acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (next.rating.mu < acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var queueMatch = function (match, dequeueOpt) {
    var dequeue = dequeueOpt !== undefined ? dequeueOpt : true;
    var match$1 = Js_math.random_int(0, 2);
    var match$2 = match$1 !== 0 ? [
        match[1],
        match[0]
      ] : [
        match[0],
        match[1]
      ];
    var matches$1 = matches.concat([match$2]);
    if (dequeue) {
      Rating.Match.players(match$2).map(function (p) {
            setQueue(function (queue) {
                  return Rating.OrderedQueue.removeFromQueue(queue, p.id);
                });
          });
    }
    setMatches(function (param) {
          return matches$1;
        });
  };
  var dequeueMatch = function (index) {
    var matches$1 = matches.filter(function (param, i) {
          return i.toString() !== index;
        });
    setMatches(function (param) {
          return matches$1;
        });
    setLocallyCompletedMatches(function (local) {
          return Js_dict.fromArray(Js_dict.entries(local).filter(function (param) {
                          return param[0] !== index;
                        }));
        });
  };
  var dequeueMatches = function (indexes) {
    var matches$1 = matches.filter(function (param, i) {
          return indexes.indexOf(i.toString()) === -1;
        });
    setMatches(function (param) {
          return matches$1;
        });
  };
  var updatePlayCounts = function (match) {
    setSessionState(function (prevState) {
          var nextState = Core__Array.reduce([
                  match[0],
                  match[1]
                ].flatMap(function (x) {
                    return x;
                  }), prevState, (function (state, p) {
                  return Session.update(state, p.id, (function (prev) {
                                return {
                                        count: prev.count + 1 | 0,
                                        paid: prev.paid
                                      };
                              }));
                }));
          Session.saveState(nextState, eventId);
          return nextState;
        });
  };
  var initializeSessionMode = function () {
    if (sessionPlayers.length >= getConnectionNodes(data.rsvps).length) {
      return ;
    }
    var players = Core__Array.filterMap(getConnectionNodes(data.rsvps), rsvpToPlayer).concat(sessionPlayers);
    setSessionPlayers(function (param) {
          return players;
        });
  };
  var uninitializeSessionMode = function () {
    setSessionPlayers(function (param) {
          return players.filter(function (p) {
                      return Core__Option.isNone(p.data);
                    });
        });
  };
  var updateSessionPlayerRatings = function (updatedPlayers) {
    setSessionPlayers(function (players) {
          var newState = players.map(function (p) {
                var player = updatedPlayers.find(function (p$p) {
                      return p.id === p$p.id;
                    });
                if (player !== undefined) {
                  return player;
                } else {
                  return p;
                }
              });
          Rating.Players.savePlayers(newState, eventId);
          return newState;
        });
  };
  var submitMatch = function (match, score, activitySlug) {
    var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("root", "MatchListFragment_matches", {
          activitySlug: activitySlug,
          after: undefined,
          before: undefined,
          eventId: undefined,
          first: undefined,
          namespace: "doubles:rec"
        });
    return new Promise((function (resolve, reject) {
                  commitMutationCreateLeagueMatch({
                        connections: [connectionId],
                        matchInput: {
                          activitySlug: activitySlug,
                          doublesMatch: {
                            createdAt: Util.Datetime.fromDate(new Date()),
                            losers: match[1].map(function (p) {
                                  return p.id;
                                }),
                            score: [
                              score[0],
                              score[1]
                            ],
                            winners: match[0].map(function (p) {
                                  return p.id;
                                })
                          },
                          namespace: "doubles:rec"
                        }
                      }, undefined, undefined, undefined, (function (param, errs) {
                          if (errs !== undefined) {
                            console.log(errs);
                            return ;
                          } else {
                            return resolve();
                          }
                        }), (function (e) {
                          reject(e);
                        }), undefined);
                }));
  };
  var handleMatchUpdated = function (completedMatch, matchId) {
    setLocallyCompletedMatches(function (local) {
          local[matchId] = completedMatch;
          return local;
        });
  };
  var handleMatchesComplete = function (matches) {
    if (matches.length === 0) {
      return Promise.resolve();
    } else {
      setMatchHistory(function (history) {
            var updatedHistory = history.concat(matches.map(function (param) {
                      return param[1];
                    }));
            Rating.CompletedMatches.saveMatches(updatedHistory, eventId);
            return updatedHistory;
          });
      return Core__Promise.$$catch(sessionMode ? (dequeueMatches(matches.map(function (param) {
                              var match = param[1][0];
                              var rated_match = Rating.Match.rate(match);
                              updateSessionPlayerRatings(rated_match.flatMap(function (x) {
                                        return x;
                                      }));
                              updatePlayCounts(match);
                              return param[0];
                            })), Promise.resolve()) : Core__Option.getOr(Core__Option.flatMap(activity, (function (activity) {
                              return Core__Option.map(activity.slug, (function (slug) {
                                            var submissionPromises = matches.map(function (param) {
                                                  return Rating.CompletedMatch.submit(param[1], slug, submitMatch).then(function () {
                                                              dequeueMatches(matches.map(function (param) {
                                                                        var match = param[1][0];
                                                                        var rated_match = Rating.Match.rate(match);
                                                                        updateSessionPlayerRatings(rated_match.flatMap(function (x) {
                                                                                  return x;
                                                                                }));
                                                                        updatePlayCounts(match);
                                                                        return param[0];
                                                                      }));
                                                            });
                                                });
                                            return Promise.all(submissionPromises).then(function (param) {
                                                        return Promise.resolve();
                                                      });
                                          }));
                            })), Promise.resolve()), (function (err) {
                    console.log("Error submitting one or more completed matches:", err);
                    return Promise.reject(err);
                  }));
    }
  };
  var breakPlayersDesc = plural(breakPlayersCount, {
        one: "player",
        other: "players"
      });
  var createTeam = function (team) {
    setTeams(function (teams) {
          return Util.NonEmptyArray.concat(teams, Util.NonEmptyArray.pure(team));
        });
  };
  var onDeleteTeam = function (i) {
    setTeams(function (teams) {
          return Util.NonEmptyArray.filterWithIndex(teams, (function (param, i$p) {
                        return i$p !== i;
                      }));
        });
  };
  var roundsCount = Rating.CompletedMatches.getNumberOfRounds(matchHistory, breakCount, players.length, 4);
  var selectAllPlayers = function () {
    if (queue.length >= availablePlayers$1.length) {
      return setQueue(function (param) {
                  return [];
                });
    } else {
      return setQueue(function (param) {
                  var optimizedPlayer = Caml_int32.mod_(roundsCount, availablePlayers$1.length);
                  return Core__Option.getOr(Core__Option.map(availablePlayers$1[optimizedPlayer], (function (p) {
                                    return Belt_Array.concatMany([
                                                [p.id],
                                                availablePlayers$1.filter(function (p2) {
                                                        return p.id !== p2.id;
                                                      }).map(function (p) {
                                                      return p.id;
                                                    })
                                              ]);
                                  })), availablePlayers$1.map(function (p) {
                                  return p.id;
                                }));
                });
    }
  };
  var enableAllPlayers = function () {
    if (disabled.size === 0) {
      return setDisabled(function (param) {
                  return new Set(allPlayers.map(function (p) {
                                  return p.id;
                                }));
                });
    } else {
      return setDisabled(function (param) {
                  return new Set();
                });
    }
  };
  if (match$5[0] !== "Advanced") {
    return JsxRuntime.jsx(MatchesView.make, {
                players: players,
                availablePlayers: availablePlayers$1,
                playersCache: playersCache,
                checkin: JsxRuntime.jsx(AiTetsu$Checkin, {
                      players: allPlayers,
                      disabled: disabled,
                      onToggleCheckin: (function (player, status) {
                          if (status) {
                            return setDisabled(function (disabled) {
                                        return Rating.UnorderedQueue.removeFromQueue(disabled, player.id);
                                      });
                          } else {
                            return setDisabled(function (disabled) {
                                        return Rating.UnorderedQueue.addToQueue(disabled, player.id);
                                      });
                          }
                        })
                    }),
                queue: new Set(queue),
                breakPlayers: deprioritized,
                consumedPlayers: consumedPlayers,
                togglePlayer: toggleQueuePlayer,
                setQueue: (function (players) {
                    setQueue(function (param) {
                          return players;
                        });
                  }),
                setRequiredPlayers: match$17[1],
                matches: matches,
                setMatches: setMatches,
                minRating: minRating,
                maxRating: maxRating,
                handleMatchCanceled: dequeueMatch,
                handleMatchUpdated: handleMatchUpdated,
                handleMatchesComplete: (function () {
                    return handleMatchesComplete(Js_dict.entries(locallyCompletedMatches).filter(function (param) {
                                      var score = param[1][1];
                                      if (score !== undefined) {
                                        return score[0] !== score[1];
                                      } else {
                                        return true;
                                      }
                                    })).then(function () {
                                setLocallyCompletedMatches(function (param) {
                                      return {};
                                    });
                              });
                  }),
                onClose: (function (param) {
                    setScreen(function (param) {
                          return "Advanced";
                        });
                  }),
                selectAll: selectAllPlayers,
                breakCount: courts,
                onChangeBreakCount: (function (numberOnBreak) {
                    setCourts(function (param) {
                          return Math.max(0, numberOnBreak);
                        });
                    setSettingsPane(function (param) {
                          
                        });
                  }),
                matchSelector: JsxRuntime.jsx(CompMatch.make, {
                      players: queuedPlayers,
                      session: sessionState,
                      teams: teams,
                      consumedPlayers: new Set(),
                      seenTeams: seenTeams,
                      seenMatches: seenMatches,
                      lastRoundSeenTeams: lastRoundSeenTeams,
                      lastRoundSeenMatches: lastRoundSeenMatches,
                      defaultStrategy: match$14[0],
                      setDefaultStrategy: match$14[1],
                      priorityPlayers: match$19.prioritized,
                      avoidAllPlayers: avoidAllPlayers,
                      onSelectMatch: (function (match, dequeue) {
                          queueMatch(match, dequeue);
                        }),
                      requiredPlayers: match$17[0]
                    })
              });
  }
  var tmp;
  if (settingsPane !== undefined) {
    switch (settingsPane) {
      case "TeamBuilder" :
          tmp = JsxRuntime.jsxs(JsxRuntime.Fragment, {
                children: [
                  JsxRuntime.jsx("p", {
                        children: t`Players in teams will always be placed in a match together on the same side.`,
                        className: "mt-2 text-base leading-7 text-gray-600"
                      }),
                  JsxRuntime.jsx(AiTetsu$TeamsList, {
                        teams: teams,
                        onDelete: onDeleteTeam
                      }),
                  JsxRuntime.jsx(AiTetsu$TeamSelector, {
                        players: players,
                        onTeamCreate: createTeam,
                        teamPlayers: Util.NonEmptyArray.toArray(teams).flatMap(function (x) {
                              return x;
                            })
                      })
                ]
              });
          break;
      case "AddPlayer" :
          tmp = JsxRuntime.jsx(SessionAddPlayer.make, {
                eventId: eventId,
                onPlayerAdd: (function (player) {
                    setSessionPlayers(function (guests) {
                          var newState = addGuestPlayer(guests, Rating.Player.makeDefaultRatingPlayer(player.name));
                          Rating.Players.savePlayers(newState, eventId);
                          return newState;
                        });
                    setSettingsPane(function (param) {
                          
                        });
                  })
              });
          break;
      case "Settings" :
          tmp = JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx(SessionEvenPlayMode.make, {
                        breakCount: courts,
                        breakPlayersCount: breakPlayersCount,
                        onChangeBreakCount: (function (numberOnBreak) {
                            setCourts(function (param) {
                                  return Math.max(0, numberOnBreak);
                                });
                            setSettingsPane(function (param) {
                                  
                                });
                          })
                      }),
                  JsxRuntime.jsx(UiAction.make, {
                        onClick: (function (param) {
                            initializeRatings();
                          }),
                        children: t`Initialize Ratings`
                      }),
                  JsxRuntime.jsx(UiAction.make, {
                        onClick: (function (param) {
                            clearSession();
                          }),
                        children: t`Clear Session (Ratings, Match Counts, and Guest Players)`
                      })
                ],
                className: "grid grid-cols-1"
              });
          break;
      
    }
  } else {
    tmp = null;
  }
  return JsxRuntime.jsxs(Layout.Container.make, {
              children: [
                JsxRuntime.jsx(ReactHelmetAsync.Helmet, {
                      children: JsxRuntime.jsx("meta", {
                            content: "width=device-width",
                            name: "viewport"
                          })
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx(UiAction.make, {
                                              onClick: (function (param) {
                                                  setScreen(function (param) {
                                                        return "Matches";
                                                      });
                                                }),
                                              className: "rounded-md bg-indigo-600 px-3.5 py-2.5 font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 text-2xl",
                                              children: t`Start Session`
                                            }),
                                        JsxRuntime.jsxs(React$1.Field, {
                                              className: "flex items-center ml-2",
                                              children: [
                                                JsxRuntime.jsxs(React$1.Switch, {
                                                      className: "group relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-gray-200 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2 data-[checked]:bg-indigo-600",
                                                      children: [
                                                        JsxRuntime.jsx("span", {
                                                              children: t`Offline Mode`,
                                                              className: "sr-only"
                                                            }),
                                                        JsxRuntime.jsx("span", {
                                                              "aria-hidden": true,
                                                              className: "pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out group-data-[checked]:translate-x-5"
                                                            })
                                                      ],
                                                      checked: sessionMode,
                                                      onChange: (function (v) {
                                                          setSessionMode(function (param) {
                                                                return v;
                                                              });
                                                          if (v === true) {
                                                            return initializeSessionMode();
                                                          } else {
                                                            return uninitializeSessionMode();
                                                          }
                                                        })
                                                    }),
                                                JsxRuntime.jsx(React$1.Switch.Label, {
                                                      className: "ml-3 text-sm",
                                                      children: t`Offline Mode`
                                                    })
                                              ]
                                            })
                                      ],
                                      className: "md:col-span-2 flex"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsxs("h2", {
                                              children: [
                                                t`Leaderboard`,
                                                JsxRuntime.jsx(UiAction.make, {
                                                      onClick: (function (param) {
                                                          React.startTransition(function () {
                                                                refetch(makeRefetchVariables(undefined, undefined, undefined, eventId), "network-only", (function (param) {
                                                                        setSessionMode(function (param) {
                                                                              return false;
                                                                            });
                                                                        uninitializeSessionMode();
                                                                      }));
                                                              });
                                                        }),
                                                      className: "ml-2",
                                                      children: JsxRuntime.jsx(Solid.ArrowPathIcon, {
                                                            className: "h-8 w-8"
                                                          })
                                                    })
                                              ],
                                              className: "text-2xl font-semibold text-gray-900 flex"
                                            }),
                                        JsxRuntime.jsx(React.Suspense, {
                                              children: Caml_option.some(JsxRuntime.jsx(AiTetsu$Leaderboard, {
                                                        players: allPlayers
                                                      })),
                                              fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                                        children: t`Loading...`
                                                      }))
                                            })
                                      ],
                                      className: "md:col-span-2"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("h2", {
                                              children: t`Advanced Options`,
                                              className: "text-2xl font-semibold text-gray-900"
                                            }),
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsxs("div", {
                                                      children: [
                                                        JsxRuntime.jsx(Button.Button.make, {
                                                              children: t`Queue All Players`,
                                                              onClick: (function (param) {
                                                                  selectAllPlayers();
                                                                })
                                                            }),
                                                        JsxRuntime.jsx(Button.Button.make, {
                                                              className: "ml-2",
                                                              children: t`Checkin All Players`,
                                                              onClick: (function (param) {
                                                                  enableAllPlayers();
                                                                })
                                                            })
                                                      ],
                                                      className: "flex"
                                                    }),
                                                JsxRuntime.jsx(UiAction.make, {
                                                      onClick: (function (param) {
                                                          setSettingsPane(function (prev) {
                                                                if (Caml_obj.equal(prev, "TeamBuilder")) {
                                                                  return ;
                                                                } else {
                                                                  return "TeamBuilder";
                                                                }
                                                              });
                                                        }),
                                                      className: "ml-auto",
                                                      children: Caml_obj.equal(settingsPane, "TeamBuilder") ? JsxRuntime.jsx(Solid.UsersIcon, {
                                                              className: "h-8 w-8"
                                                            }) : JsxRuntime.jsx(Outline.UsersIcon, {
                                                              className: "h-8 w-8"
                                                            })
                                                    }),
                                                JsxRuntime.jsx(UiAction.make, {
                                                      onClick: (function (param) {
                                                          setSettingsPane(function (prev) {
                                                                if (Caml_obj.equal(prev, "AddPlayer")) {
                                                                  return ;
                                                                } else {
                                                                  return "AddPlayer";
                                                                }
                                                              });
                                                        }),
                                                      className: "ml-2",
                                                      children: Caml_obj.equal(settingsPane, "AddPlayer") ? JsxRuntime.jsx(Solid.UserPlusIcon, {
                                                              className: "h-8 w-8"
                                                            }) : JsxRuntime.jsx(Outline.UserPlusIcon, {
                                                              className: "h-8 w-8"
                                                            })
                                                    }),
                                                JsxRuntime.jsx(UiAction.make, {
                                                      onClick: (function (param) {
                                                          setSettingsPane(function (prev) {
                                                                if (Caml_obj.equal(prev, "Settings")) {
                                                                  return ;
                                                                } else {
                                                                  return "Settings";
                                                                }
                                                              });
                                                        }),
                                                      className: "ml-2",
                                                      children: Caml_obj.equal(settingsPane, "Settings") ? JsxRuntime.jsx(Solid.Cog6ToothIcon, {
                                                              className: "h-8 w-8"
                                                            }) : JsxRuntime.jsx(Outline.Cog6ToothIcon, {
                                                              className: "h-8 w-8"
                                                            })
                                                    })
                                              ],
                                              className: "flex text-right"
                                            }),
                                        JsxRuntime.jsx("div", {
                                              children: tmp,
                                              className: "flex mt-2"
                                            }),
                                        JsxRuntime.jsx("div", {
                                              children: t`${breakPlayersCount.toString()} ${breakPlayersDesc} are not playing`
                                            })
                                      ],
                                      className: ""
                                    })
                              ],
                              className: "grid grid-cols-1 items-start gap-4 md:grid-cols-2 md:gap-8"
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(UiAction.make, {
                                    onClick: (function (param) {
                                        setManualTeamOpen(function (prev) {
                                              return !prev;
                                            });
                                      }),
                                    children: t`manual team`
                                  }),
                              className: "col-span-1"
                            }),
                        match$4[0] ? JsxRuntime.jsx(SelectMatch.make, {
                                players: queuedPlayers,
                                onMatchQueued: (function (match) {
                                    queueMatch(match, undefined);
                                  }),
                                children: (function (match) {
                                    return JsxRuntime.jsx(React.Suspense, {
                                                children: Caml_option.some(JsxRuntime.jsx(SubmitMatch.make, {
                                                          match: match,
                                                          minRating: minRating,
                                                          maxRating: maxRating,
                                                          onComplete: (function (__x) {
                                                              handleMatchUpdated(__x, "-1");
                                                            })
                                                        })),
                                                fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                                          children: t`Loading`
                                                        }))
                                              });
                                  })
                              }) : null,
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: t`Submitted Matches`,
                                      className: "text-2xl font-semibold text-gray-900"
                                    }),
                                props.children
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: t`Match History`,
                                      className: "text-2xl font-semibold text-gray-900"
                                    }),
                                Core__Option.getOr(Core__Option.map(activity, (function (activity) {
                                            return matchHistory.map(function (param, i) {
                                                        return JsxRuntime.jsx(SubmitMatch.make, {
                                                                    match: param[0],
                                                                    score: param[1],
                                                                    minRating: minRating,
                                                                    maxRating: maxRating,
                                                                    onDelete: (function () {
                                                                        setMatchHistory(function (mh) {
                                                                              var mh$1 = mh.filter(function (param, i$p) {
                                                                                    return i !== i$p;
                                                                                  });
                                                                              Rating.CompletedMatches.saveMatches(mh$1, eventId);
                                                                              return mh$1;
                                                                            });
                                                                      }),
                                                                    onComplete: (function (param) {
                                                                        var score = param[1];
                                                                        var match = param[0];
                                                                        Core__Option.getOr(Core__Option.map(activity.slug, (function (slug) {
                                                                                    return Rating.CompletedMatch.submit([
                                                                                                match,
                                                                                                score
                                                                                              ], slug, submitMatch);
                                                                                  })), Promise.resolve());
                                                                      })
                                                                  }, i.toString());
                                                      });
                                          })), null)
                              ]
                            })
                      ],
                      className: "grid grid-cols-1 items-start gap-4 md:grid-cols-1 md:gap-8"
                    })
              ],
              className: "mt-4"
            });
}

var make = AiTetsu;

export {
  make ,
}
/*  Not a pure module */

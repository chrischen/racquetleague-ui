// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Rating from "../../lib/Rating.re.mjs";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ModalDrawer from "../ui/ModalDrawer.re.mjs";
import * as SubmitMatch from "./SubmitMatch.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as ShakeAnimate from "../../lib/ShakeAnimate.re.mjs";
import * as Core from "@dnd-kit/core";
import * as Core$1 from "@linaria/core";
import * as Core__Promise from "@rescript/core/src/Core__Promise.re.mjs";
import * as MatchRsvpUser from "../molecules/MatchRsvpUser.re.mjs";
import * as FramerMotion from "framer-motion";
import * as UseLongPress from "use-long-press";
import * as JsxRuntime from "react/jsx-runtime";
import * as EventMatchRsvpUser from "./EventMatchRsvpUser.re.mjs";
import * as MultipleContainers from "../dndkit/MultipleContainers.re.mjs";
import * as SortableSubmitMatch from "./SortableSubmitMatch.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as Outline from "@heroicons/react/24/outline";

import { t, plural } from '@lingui/macro'
;

function MatchesView$PlayerView(props) {
  var status = props.status;
  var maxRating = props.maxRating;
  var minRating = props.minRating;
  var player = props.player;
  var data = player.data;
  if (data !== undefined) {
    return Core__Option.getOr(Core__Option.map(data.user, (function (user) {
                      return JsxRuntime.jsx(EventMatchRsvpUser.make, {
                                  user: user.fragmentRefs,
                                  highlight: status,
                                  ratingPercent: (player.rating.mu - minRating) / (maxRating - minRating) * 100
                                }, user.id);
                    })), null);
  } else {
    return JsxRuntime.jsx(MatchRsvpUser.make, {
                user: Rating.makeGuest(player.name),
                highlight: status,
                ratingPercent: (player.rating.mu - minRating) / (maxRating - minRating) * 100
              }, player.id);
  }
}

var PlayerView = {
  make: MatchesView$PlayerView
};

function MatchesView$Queue(props) {
  var selectedPlayers = props.selectedPlayers;
  var onToggleSelectedPlayer = props.onToggleSelectedPlayer;
  var togglePlayer = props.togglePlayer;
  var queue = props.queue;
  var consumedPlayers = props.consumedPlayers;
  var breakPlayers = props.breakPlayers;
  var handleLongPress = React.useCallback((function ($$event, context) {
          Core__Option.flatMap(context, (function (ctx) {
                  return Core__Option.map(ctx.context, (function (ctx) {
                                onToggleSelectedPlayer(ctx);
                              }));
                }));
        }), [selectedPlayers.size]);
  var bind = UseLongPress.useLongPress(handleLongPress, {
        threshold: 300,
        captureEvent: true,
        cancelOnMovement: true
      });
  return JsxRuntime.jsx("div", {
              children: props.players.map(function (player) {
                    var h = bind(player);
                    var match = queue.has(player.id);
                    var match$1 = breakPlayers.has(player.id);
                    var match$2 = consumedPlayers.has(player.id);
                    var status = match ? "Queued" : (
                        match$2 ? "Playing" : (
                            match$1 ? "Break" : "Available"
                          )
                      );
                    return JsxRuntime.jsx(FramerMotion.motion.div, {
                                style: ShakeAnimate.getRandomTransformOrigin(),
                                animate: selectedPlayers.has(player.id) ? ShakeAnimate.variants.start : ShakeAnimate.variants.reset,
                                onMouseDown: h.onMouseDown,
                                onMouseUp: h.onMouseUp,
                                onPointerUp: h.onPointerUp,
                                onPointerDown: h.onPointerDown,
                                onPointerMove: h.onPointerMove,
                                onPointerLeave: h.onPointerLeave,
                                onTouchStart: h.onTouchStart,
                                onTouchEnd: h.onTouchEnd,
                                onTouchMove: h.onTouchMove,
                                variants: Caml_option.some(ShakeAnimate.variants),
                                children: Caml_option.some(JsxRuntime.jsx(UiAction.make, {
                                          onClick: (function (e) {
                                              togglePlayer(player);
                                            }),
                                          children: JsxRuntime.jsx(MatchesView$PlayerView, {
                                                player: player,
                                                minRating: 0.0,
                                                maxRating: 1.0,
                                                status: status
                                              }, player.id)
                                        }))
                              }, player.id);
                  }),
              className: Core$1.cx("grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3")
            });
}

var Queue = {
  make: MatchesView$Queue
};

function MatchesView$ActionBar(props) {
  var onClearSelectedPlayers = props.onClearSelectedPlayers;
  var selectedPlayersCount = props.selectedPlayersCount;
  var onChangeBreakCount = props.onChangeBreakCount;
  var breakCount = props.breakCount;
  var selectedAll = props.selectedAll;
  var selectAll = props.selectAll;
  var selectedPlayersText = plural(selectedPlayersCount, {
        one: t`${selectedPlayersCount.toString()} player selected`,
        other: t`${selectedPlayersCount.toString()} players selected`
      });
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(UiAction.make, {
                              onClick: (function (param) {
                                  onChangeBreakCount(breakCount - 1 | 0);
                                }),
                              className: "rounded-md bg-white px-2.5 py-1.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50",
                              children: "-"
                            }),
                        " " + breakCount.toString() + " ",
                        JsxRuntime.jsx(UiAction.make, {
                              onClick: (function (param) {
                                  onChangeBreakCount(breakCount + 1 | 0);
                                }),
                              className: "rounded-md bg-white px-2.5 py-1.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50",
                              children: "+"
                            }),
                        " ",
                        t`# of courts`
                      ],
                      className: Core$1.cx(selectedPlayersCount > 0 ? "hidden sm:block" : "")
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        selectedPlayersCount > 0 ? JsxRuntime.jsx(UiAction.make, {
                                onClick: (function (param) {
                                    onClearSelectedPlayers();
                                  }),
                                className: "mr-2 p-1 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500",
                                children: JsxRuntime.jsx(Outline.XMarkIcon, {
                                      className: "h-5 w-5 text-gray-600"
                                    })
                              }) : null,
                        selectedPlayersCount > 0 ? JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx(UiAction.make, {
                                      onClick: props.onSelectedPlayersAction,
                                      children: selectedPlayersText
                                    }),
                                className: "mr-2 text-sm font-semibold text-gray-700"
                              }) : null,
                        JsxRuntime.jsxs(UiAction.make, {
                              onClick: (function (param) {
                                  selectAll();
                                }),
                              className: Core$1.cx("inline-flex rounded-md px-2.5 py-1.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300", selectedAll ? "bg-green-300" : ""),
                              children: [
                                JsxRuntime.jsx(Solid.UsersIcon, {
                                      className: "-ml-0.5 h-5 w-5 mr-0.5",
                                      "aria-hidden": "true"
                                    }),
                                selectedAll ? t`Unqueue All` : t`Queue All`
                              ]
                            }),
                        JsxRuntime.jsx(UiAction.make, {
                              onClick: props.onMainAction,
                              className: "inline-block h-100vh align-top py-5 -mr-3 ml-3 bg-indigo-600 px-3.5 text-lg font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",
                              children: props.mainActionText
                            })
                      ],
                      className: "-my-3 py-3 align-middle items-center inline-flex"
                    })
              ],
              className: "fixed bottom-0 bg-white w-full flex h-[64px] -ml-3 p-3 justify-between items-center"
            });
}

var ActionBar = {
  make: MatchesView$ActionBar
};

function MatchesView(props) {
  var onChangeBreakCount = props.onChangeBreakCount;
  var breakCount = props.breakCount;
  var selectAll = props.selectAll;
  var handleMatchesComplete = props.handleMatchesComplete;
  var handleMatchUpdated = props.handleMatchUpdated;
  var handleMatchCanceled = props.handleMatchCanceled;
  var maxRating = props.maxRating;
  var minRating = props.minRating;
  var setMatches = props.setMatches;
  var matches = props.matches;
  var setRequiredPlayers = props.setRequiredPlayers;
  var setQueue = props.setQueue;
  var togglePlayer = props.togglePlayer;
  var consumedPlayers = props.consumedPlayers;
  var queue = props.queue;
  var playersCache = props.playersCache;
  var availablePlayers = props.availablePlayers;
  var players = props.players;
  var match = React.useState(function () {
        return "Matches";
      });
  var setView = match[1];
  var view = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setShowMatchSelector = match$1[1];
  var match$2 = React.useState(function () {
        return false;
      });
  var setShowSelectedActions = match$2[1];
  var match$3 = React.useState(function () {
        return new Set();
      });
  var setSelectedPlayers = match$3[1];
  var selectedPlayers = match$3[0];
  var tmp;
  switch (view) {
    case "Checkin" :
        tmp = props.checkin;
        break;
    case "Matches" :
        tmp = JsxRuntime.jsx(Core.DndContext, {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx(MultipleContainers.make, {
                          items: Rating.Matches.toDndItems(matches),
                          minimal: true,
                          setItems: (function (updateFn) {
                              setMatches(function (matches) {
                                    var items = Rating.Matches.toDndItems(matches);
                                    return Rating.Matches.fromDndItems(updateFn(items), playersCache);
                                  });
                            }),
                          deleteContainer: (function (i) {
                              handleMatchCanceled(i);
                            }),
                          renderContainer: (function (children, matchId) {
                              var match = matches[matchId];
                              return Core__Option.getOr(Core__Option.map(match, (function (match) {
                                                return JsxRuntime.jsx(SortableSubmitMatch.make, {
                                                            children: children,
                                                            match: match,
                                                            minRating: minRating,
                                                            maxRating: maxRating,
                                                            onDelete: (function () {
                                                                handleMatchCanceled(matchId.toString());
                                                              }),
                                                            onUpdated: (function (match) {
                                                                handleMatchUpdated(match, matchId.toString());
                                                              })
                                                          }, Rating.Match.toStableId(match));
                                              })), null);
                            }),
                          renderValue: (function (value) {
                              var match = value.split(":");
                              var value$1;
                              if (match.length !== 2) {
                                value$1 = undefined;
                              } else {
                                var ids = match[0];
                                var id = match[1];
                                var match$1 = ids.split(".");
                                if (match$1.length !== 2) {
                                  value$1 = undefined;
                                } else {
                                  var matchId = match$1[0];
                                  value$1 = [
                                    matchId,
                                    id
                                  ];
                                }
                              }
                              var player = Core__Option.flatMap(value$1, (function (param) {
                                      var matchId = param[0];
                                      return Core__Option.flatMap(Rating.PlayersCache.get(playersCache, param[1]), (function (player) {
                                                    return Core__Option.map(Core__Int.fromString(matchId, undefined), (function (matchId) {
                                                                  return [
                                                                          matchId,
                                                                          player
                                                                        ];
                                                                }));
                                                  }));
                                    }));
                              return Core__Option.getOr(Core__Option.map(player, (function (param) {
                                                var player = param[1];
                                                var matchId = param[0];
                                                return JsxRuntime.jsx(UiAction.make, {
                                                            onClick: (function (param) {
                                                                var match = matches[matchId];
                                                                Core__Option.map(match, (function (match) {
                                                                        var matchPlayers = Rating.Match.players(match).map(function (player) {
                                                                                return player.id;
                                                                              }).filter(function (p) {
                                                                              return p !== player.id;
                                                                            });
                                                                        var replacements = new Set(players.map(function (player) {
                                                                                    return player.id;
                                                                                  })).difference(consumedPlayers);
                                                                        var newQueue = matchPlayers.concat(Array.from(replacements.values()));
                                                                        setRequiredPlayers(function (param) {
                                                                              return Caml_option.some(new Set(matchPlayers));
                                                                            });
                                                                        setQueue(newQueue);
                                                                      }));
                                                                setShowMatchSelector(function (param) {
                                                                      return true;
                                                                    });
                                                              }),
                                                            children: JsxRuntime.jsx(SubmitMatch.PlayerView.make, {
                                                                  player: player,
                                                                  minRating: minRating,
                                                                  maxRating: maxRating
                                                                })
                                                          });
                                              })), null);
                            })
                        }),
                    className: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3"
                  }),
              onDragEnd: (function (param) {
                  
                })
            });
        break;
    case "Queue" :
        tmp = JsxRuntime.jsx(MatchesView$Queue, {
              players: players,
              breakPlayers: props.breakPlayers,
              consumedPlayers: consumedPlayers,
              queue: queue,
              togglePlayer: (function (player) {
                  if (consumedPlayers.has(player.id)) {
                    return setView(function (param) {
                                return "Matches";
                              });
                  } else {
                    return togglePlayer(player);
                  }
                }),
              onToggleSelectedPlayer: (function (player) {
                  setSelectedPlayers(function (selectedPlayers) {
                        var newSet = new Set(Array.from(selectedPlayers.values()));
                        if (selectedPlayers.has(player.id)) {
                          newSet.delete(player.id);
                        } else {
                          newSet.add(player.id);
                        }
                        return newSet;
                      });
                }),
              selectedPlayers: selectedPlayers
            });
        break;
    
  }
  var tmp$1;
  var exit = 0;
  switch (view) {
    case "Matches" :
        tmp$1 = JsxRuntime.jsx(MatchesView$ActionBar, {
              selectAll: (function () {
                  setView(function (param) {
                        return "Queue";
                      });
                  selectAll();
                }),
              selectedAll: queue.size === availablePlayers.length,
              breakCount: breakCount,
              mainActionText: t`SUBMIT RESULTS`,
              onChangeBreakCount: onChangeBreakCount,
              onMainAction: (function (param) {
                  Core__Promise.$$catch(handleMatchesComplete().then(function (param) {
                            return Promise.resolve();
                          }), (function (err) {
                          console.log("Error submitting matches:", err);
                          return Promise.resolve();
                        }));
                }),
              onSelectedPlayersAction: (function (param) {
                  setShowSelectedActions(function (s) {
                        return !s;
                      });
                }),
              selectedPlayersCount: selectedPlayers.size,
              onClearSelectedPlayers: (function () {
                  setSelectedPlayers(function (param) {
                        return new Set();
                      });
                })
            });
        break;
    case "Checkin" :
    case "Queue" :
        exit = 1;
        break;
    
  }
  if (exit === 1) {
    tmp$1 = JsxRuntime.jsx(MatchesView$ActionBar, {
          selectAll: (function () {
              setView(function (param) {
                    return "Queue";
                  });
              selectAll();
            }),
          selectedAll: queue.size === availablePlayers.length,
          breakCount: breakCount,
          mainActionText: t`CHOOSE MATCH`,
          onChangeBreakCount: onChangeBreakCount,
          onMainAction: (function (param) {
              setShowMatchSelector(function (s) {
                    return !s;
                  });
            }),
          onSelectedPlayersAction: (function (param) {
              setShowSelectedActions(function (s) {
                    return !s;
                  });
            }),
          selectedPlayersCount: selectedPlayers.size,
          onClearSelectedPlayers: (function () {
              setSelectedPlayers(function (param) {
                    return new Set();
                  });
            })
        });
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(UiAction.make, {
                              onClick: props.onClose,
                              className: "inline-flex items-center gap-x-2 rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",
                              children: JsxRuntime.jsx(Solid.Cog6ToothIcon, {
                                    className: "-ml-0.5 h-5 w-5"
                                  })
                            }),
                        JsxRuntime.jsxs(UiAction.make, {
                              onClick: (function (param) {
                                  setView(function (param) {
                                        return "Checkin";
                                      });
                                }),
                              className: Core$1.cx("ml-3 inline-flex items-center gap-x-2 rounded-md px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600", view === "Checkin" ? "bg-indigo-600 border-solid border-white border-2" : "bg-black border-solid border-indigo-600 border-2"),
                              children: [
                                JsxRuntime.jsx(Solid.UsersIcon, {
                                      className: "-ml-0.5 h-5 w-5",
                                      "aria-hidden": "true"
                                    }),
                                t`Checkin`
                              ]
                            }),
                        JsxRuntime.jsxs(UiAction.make, {
                              onClick: (function (param) {
                                  setView(function (param) {
                                        return "Queue";
                                      });
                                }),
                              className: Core$1.cx("ml-3 inline-flex flex-grow items-center gap-x-2 rounded-md px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600", view === "Queue" ? "bg-indigo-600 border-solid border-white border-2" : "bg-black border-solid border-indigo-600 border-2"),
                              children: [
                                JsxRuntime.jsx(Solid.UsersIcon, {
                                      className: "-ml-0.5 h-5 w-5",
                                      "aria-hidden": "true"
                                    }),
                                t`Queue`
                              ]
                            }),
                        JsxRuntime.jsxs(UiAction.make, {
                              onClick: (function (param) {
                                  setView(function (param) {
                                        return "Matches";
                                      });
                                }),
                              className: Core$1.cx("ml-3 inline-flex flex-grow items-center gap-x-2 rounded-md px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600", view === "Matches" ? "bg-indigo-600 border-solid border-white border-2" : "bg-black border-solid border-indigo-600 border-2"),
                              children: [
                                JsxRuntime.jsx(Solid.TableCellsIcon, {
                                      className: "-ml-0.5 h-5 w-5",
                                      "aria-hidden": "true"
                                    }),
                                t`Matches`
                              ]
                            }),
                        JsxRuntime.jsx("input", {
                              className: "w-10",
                              readOnly: true,
                              value: matches.map(function (param, i) {
                                      var team1 = param[0].map(function (p) {
                                              return p.name;
                                            }).join(" " + t`and` + " ");
                                      var team2 = param[1].map(function (p) {
                                              return p.name;
                                            }).join(" " + t`and` + " ");
                                      return t`Court ${(i + 1 | 0).toString()}: ${team1} versus ${team2}`;
                                    }).join(", "),
                              onClick: (function (e) {
                                  e.target.select();
                                })
                            })
                      ],
                      className: "flex h-[34px] justify-between items-center"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("main", {
                            children: tmp,
                            className: "w-full h-full",
                            role: "main"
                          }),
                      className: "w-full h-[calc(100vh-(56px+152px))] sm:h-[calc(100vh-(56px+92px))] fixed top-[56px] left-0 overflow-scroll px-3"
                    }),
                tmp$1,
                JsxRuntime.jsx(ModalDrawer.make, {
                      title: t`Choose Match`,
                      children: props.matchSelector,
                      open_: match$1[0],
                      setOpen: (function (v) {
                          setView(function (param) {
                                return "Matches";
                              });
                          setRequiredPlayers(function (param) {
                                
                              });
                          setShowMatchSelector(v);
                        })
                    }),
                JsxRuntime.jsx(ModalDrawer.make, {
                      title: t`Actions`,
                      children: props.selectedPlayersActions(players.filter(function (p) {
                                return selectedPlayers.has(p.id);
                              })),
                      open_: match$2[0],
                      setOpen: (function (v) {
                          setShowSelectedActions(v);
                        })
                    })
              ],
              className: "w-full h-full fixed top-0 left-0 bg-black p-3",
              id: "FairPlay"
            });
}

var make = MatchesView;

export {
  PlayerView ,
  Queue ,
  ActionBar ,
  make ,
}
/*  Not a pure module */

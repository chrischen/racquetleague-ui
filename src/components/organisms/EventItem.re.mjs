// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as Button from "../catalyst/Button.re.mjs";
import * as Layout from "../shared/Layout.re.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as SwipeAction from "../molecules/SwipeAction.re.mjs";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as LucideReact from "lucide-react";
import * as Core$1 from "@linaria/core";
import * as RelayRuntime from "relay-runtime";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as EventItem_user_graphql from "../../__generated__/EventItem_user_graphql.re.mjs";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as EventItem_event_graphql from "../../__generated__/EventItem_event_graphql.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as DifferenceInMinutes from "date-fns/differenceInMinutes";
import * as EventItemJoinEventMutation_graphql from "../../__generated__/EventItemJoinEventMutation_graphql.re.mjs";
import * as EventItemLeaveEventMutation_graphql from "../../__generated__/EventItemLeaveEventMutation_graphql.re.mjs";

import { t, plural } from '@lingui/macro'
;

var convertFragment = EventItem_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventItem_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventItem_event_graphql.node, convertFragment);
}

var ItemFragment_getConnectionNodes = EventItem_event_graphql.Utils.getConnectionNodes;

var ItemFragment = {
  getConnectionNodes: ItemFragment_getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

var convertVariables = EventItemJoinEventMutation_graphql.Internal.convertVariables;

var convertResponse = EventItemJoinEventMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = EventItemJoinEventMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, EventItemJoinEventMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables, EventItemJoinEventMutation_graphql.node, convertResponse, convertWrapRawResponse);

var JoinEventMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use$1
};

var convertFragment$1 = EventItem_user_graphql.Internal.convertFragment;

function use$2(fRef) {
  return RescriptRelay_Fragment.useFragment(EventItem_user_graphql.node, convertFragment$1, fRef);
}

function useOpt$1(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventItem_user_graphql.node, convertFragment$1);
}

var UserFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment$1,
  use: use$2,
  useOpt: useOpt$1
};

var convertVariables$1 = EventItemLeaveEventMutation_graphql.Internal.convertVariables;

var convertResponse$1 = EventItemLeaveEventMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = EventItemLeaveEventMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$1 = RescriptRelay_Mutation.commitMutation(convertVariables$1, EventItemLeaveEventMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$3 = RescriptRelay_Mutation.useMutation(convertVariables$1, EventItemLeaveEventMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var LeaveEventMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  commitMutation: commitMutation$1,
  use: use$3
};

function td(prim) {
  return Core.i18n._(prim);
}

function ts(prim0, prim1) {
  return Caml_splice_call.spliceApply(t, [
              prim0,
              prim1
            ]);
}

function EventItem(props) {
  var __highlightedLocation = props.highlightedLocation;
  var highlightedLocation = __highlightedLocation !== undefined ? __highlightedLocation : false;
  var match = use(props.event);
  var timezone = match.timezone;
  var startDate = match.startDate;
  var shadow = match.shadow;
  var rsvps = match.rsvps;
  var maxRsvps = match.maxRsvps;
  var listed = match.listed;
  var endDate = match.endDate;
  var __id = match.__id;
  var secret = Core__Option.getOr(shadow, false);
  var isUnlisted = listed !== undefined && !listed ? true : false;
  var isCompetitive = Core__Option.getOr(match.tags, []).includes("comp");
  var playersCount = Core__Option.getOr(Core__Option.flatMap(rsvps, (function (rsvps) {
              return Core__Option.map(rsvps.edges, (function (edges) {
                            return edges.filter(function (edge) {
                                        return Core__Option.getOr(Core__Option.flatMap(edge, (function (edge) {
                                                          return Core__Option.map(edge.node, (function (node) {
                                                                        if (Caml_obj.equal(node.listType, 0)) {
                                                                          return true;
                                                                        } else {
                                                                          return node.listType === undefined;
                                                                        }
                                                                      }));
                                                        })), true);
                                      }).length;
                          }));
            })), 0);
  var viewer = Core__Option.map(props.user, (function (user) {
          return use$2(user);
        }));
  var viewerRsvpStatus = Core__Option.flatMap(viewer, (function (viewer) {
          var viewerId = viewer.id;
          var edges = Core__Option.getOr(Core__Option.flatMap(rsvps, (function (r) {
                      return r.edges;
                    })), []);
          var viewerEdge = edges.find(function (edge) {
                return Core__Option.getOr(Core__Option.flatMap(edge, (function (e) {
                                  return Core__Option.flatMap(e.node, (function (node) {
                                                return Core__Option.map(node.user, (function (u) {
                                                              return u.id === viewerId;
                                                            }));
                                              }));
                                })), false);
              });
          return Core__Option.flatMap(viewerEdge, (function (edge) {
                        return Core__Option.flatMap(edge, (function (e) {
                                      return Core__Option.flatMap(e.node, (function (node) {
                                                    var lt = node.listType;
                                                    if (lt !== undefined && lt !== 0) {
                                                      return "Pending";
                                                    }
                                                    var mainList = Belt_Array.keepMap(edges, (function (edge) {
                                                            return Core__Option.flatMap(edge, (function (e) {
                                                                          return Core__Option.flatMap(e.node, (function (node) {
                                                                                        var match = node.listType;
                                                                                        if (match !== undefined && match !== 0) {
                                                                                          return ;
                                                                                        } else {
                                                                                          return node;
                                                                                        }
                                                                                      }));
                                                                        }));
                                                          }));
                                                    var viewerIndexOpt = Core__Array.findIndexOpt(mainList, (function (n) {
                                                            return Core__Option.getOr(Core__Option.map(n.user, (function (u) {
                                                                              return u.id === viewerId;
                                                                            })), false);
                                                          }));
                                                    return Core__Option.map(viewerIndexOpt, (function (idx) {
                                                                  return Core__Option.getOr(Core__Option.map(maxRsvps, (function (max) {
                                                                                    if (idx < max) {
                                                                                      return "Confirmed";
                                                                                    } else {
                                                                                      return "Waitlist";
                                                                                    }
                                                                                  })), "Confirmed");
                                                                }));
                                                  }));
                                    }));
                      }));
        }));
  var duration = Core__Option.flatMap(startDate, (function (startDate) {
          return Core__Option.map(endDate, (function (endDate) {
                        return DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(endDate), Util.Datetime.toDate(startDate));
                      }));
        }));
  var duration$1 = Core__Option.map(duration, (function (duration) {
          var hours = Math.floor(duration / 60);
          var minutes = (duration | 0) % 60;
          if (minutes === 0) {
            return plural(hours | 0, {
                        one: t`${hours.toString()} hour`,
                        other: t`${hours.toString()} hours`
                      });
          } else {
            return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                        children: [
                          plural(hours | 0, {
                                one: t`${hours.toString()} hour`,
                                other: t`${hours.toString()} hours`
                              }),
                          " ",
                          plural(minutes, {
                                one: t`${minutes.toString()} minute`,
                                other: t`${minutes.toString()} minutes`
                              })
                        ]
                      });
          }
        }));
  var eventPath = "/events/" + match.id;
  var navigate = LangProvider.Router.useNavigate();
  var match$1 = use$1();
  var commitJoin = match$1[0];
  var match$2 = use$3();
  var commitLeave = match$2[0];
  var onJoin = function (param) {
    var eventPageConnectionId = RelayRuntime.ConnectionHandler.getConnectionID(__id, "EventRsvps_event_rsvps", undefined);
    commitJoin({
          connections: [eventPageConnectionId],
          id: __id
        }, undefined, undefined, undefined, undefined, undefined, undefined);
  };
  var onLeave = function (param) {
    var eventPageConnectionId = RelayRuntime.ConnectionHandler.getConnectionID(__id, "EventRsvps_event_rsvps", undefined);
    commitLeave({
          connections: [eventPageConnectionId],
          id: __id
        }, undefined, undefined, undefined, undefined, undefined, undefined);
  };
  var tmp;
  if (viewerRsvpStatus !== undefined) {
    switch (viewerRsvpStatus) {
      case "Confirmed" :
          tmp = JsxRuntime.jsx("div", {
                children: t`joined`,
                className: Core$1.cx("text-green-600 bg-green-400/10 ring-green-400/30", "rounded-full flex-none py-1 px-2 text-xs font-medium ring-1 ring-inset")
              });
          break;
      case "Waitlist" :
          tmp = JsxRuntime.jsx("div", {
                children: t`waitlist`,
                className: Core$1.cx("text-yellow-600 bg-yellow-400/10 ring-yellow-400/30", "rounded-full flex-none py-1 px-2 text-xs font-medium ring-1 ring-inset")
              });
          break;
      case "Pending" :
          tmp = JsxRuntime.jsx("div", {
                children: t`pending`,
                className: Core$1.cx("text-yellow-600 bg-yellow-400/10 ring-yellow-400/30", "rounded-full flex-none py-1 px-2 text-xs font-medium ring-1 ring-inset")
              });
          break;
      
    }
  } else {
    tmp = null;
  }
  var tmp$1;
  var exit = 0;
  if (shadow !== undefined && shadow) {
    tmp$1 = JsxRuntime.jsx(Solid.LockClosedIcon, {
          className: "-ml-0.5 h-3 w-3"
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp$1 = Core__Option.getOr(Core__Option.map(maxRsvps, (function (maxRsvps) {
                return playersCount.toString() + "/" + maxRsvps.toString() + " " + t`players`;
              })), JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                playersCount.toString() + " ",
                plural(playersCount, {
                      one: "player",
                      other: "players"
                    })
              ]
            }));
  }
  return JsxRuntime.jsx(SwipeAction.make, {
              rightActions: Caml_option.some(secret ? null : (
                      viewerRsvpStatus !== undefined ? JsxRuntime.jsx(Button.Button.make, {
                              color: "dark",
                              children: t`leave event`,
                              onClick: (function (ev) {
                                  onLeave(ev);
                                })
                            }) : JsxRuntime.jsx(Button.Button.make, {
                              color: "red",
                              children: t`join event`,
                              onClick: (function (ev) {
                                  onJoin(ev);
                                })
                            })
                    )),
              onFullSwipeLeft: (function () {
                  if (viewerRsvpStatus !== undefined) {
                    return onLeave();
                  } else {
                    return onJoin();
                  }
                }),
              partialThreshold: 120,
              fullThreshold: 260,
              className: "cursor-pointer",
              onTapped: (function () {
                  navigate(eventPath, undefined);
                }),
              hoverPartialSide: "right",
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsxs(Layout.Container.make, {
                          children: [
                            JsxRuntime.jsxs("div", {
                                  children: [
                                    JsxRuntime.jsxs("div", {
                                          children: [
                                            isCompetitive ? JsxRuntime.jsx("div", {
                                                    children: JsxRuntime.jsx(LucideReact.Trophy, {
                                                          className: "h-5 w-5"
                                                        }),
                                                    className: "flex-none text-yellow-500"
                                                  }) : JsxRuntime.jsx("div", {
                                                    children: JsxRuntime.jsx("div", {
                                                          className: "h-2 w-2 rounded-full bg-current"
                                                        }),
                                                    className: Core$1.cx("text-green-400 bg-green-400/10", "flex-none rounded-full p-1")
                                                  }),
                                            JsxRuntime.jsx("h2", {
                                                  children: JsxRuntime.jsxs("div", {
                                                        children: [
                                                          isUnlisted ? JsxRuntime.jsx(Solid.LockClosedIcon, {
                                                                  className: "h-4 w-4 text-gray-500"
                                                                }) : null,
                                                          JsxRuntime.jsxs("span", {
                                                                children: [
                                                                  Core__Option.getOr(Core__Option.flatMap(match.activity, (function (a) {
                                                                              return Core__Option.map(a.name, (function (name) {
                                                                                            return Core.i18n._(name);
                                                                                          }));
                                                                            })), null),
                                                                  " / ",
                                                                  Core__Option.getOr(match.title, t`[missing title]`)
                                                                ],
                                                                className: Core$1.cx("truncate", Core__Option.isSome(match.deleted) ? "line-through" : "")
                                                              })
                                                        ],
                                                        className: "flex gap-x-2"
                                                      }),
                                                  className: "min-w-0 text-sm font-semibold leading-6 text-black w-full"
                                                })
                                          ],
                                          className: "flex items-center gap-x-3"
                                        }),
                                    JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsxs("p", {
                                                children: [
                                                  Core__Option.getOr(Core__Option.map(startDate, (function (startDate) {
                                                              return Core__Option.getOr(Core__Option.map(timezone, (function (timezone) {
                                                                                return JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                            value: Util.Datetime.toDate(startDate),
                                                                                            timeZone: timezone
                                                                                          });
                                                                              })), JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                              value: Util.Datetime.toDate(startDate)
                                                                            }));
                                                            })), null),
                                                  " -> ",
                                                  Core__Option.getOr(Core__Option.map(endDate, (function (endDate) {
                                                              return Core__Option.getOr(Core__Option.map(timezone, (function (timezone) {
                                                                                return JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                            value: Util.Datetime.toDate(endDate),
                                                                                            timeZone: timezone
                                                                                          });
                                                                              })), JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                              value: Util.Datetime.toDate(endDate)
                                                                            }));
                                                            })), null),
                                                  Core__Option.getOr(Core__Option.map(duration$1, (function (duration) {
                                                              return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                          children: [
                                                                            " (",
                                                                            duration,
                                                                            ") "
                                                                          ]
                                                                        });
                                                            })), null)
                                                ],
                                                className: "whitespace-nowrap"
                                              }),
                                          className: "mt-3 flex items-center gap-x-2.5 text-xs leading-5 text-gray-600"
                                        }),
                                    JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsxs("span", {
                                                children: [
                                                  JsxRuntime.jsx("p", {
                                                        children: secret ? null : Core__Option.getOr(Core__Option.flatMap(match.location, (function (l) {
                                                                      return Core__Option.map(l.name, (function (name) {
                                                                                    return name;
                                                                                  }));
                                                                    })), t`[location missing]`),
                                                        className: Core$1.cx("truncate", highlightedLocation ? "font-bold" : "")
                                                      }),
                                                  Core__Option.getOr(Core__Option.flatMap(match.club, (function (c) {
                                                              return Core__Option.map(c.name, (function (name) {
                                                                            return JsxRuntime.jsx("p", {
                                                                                        children: name,
                                                                                        className: "text-xs text-gray-500 truncate"
                                                                                      });
                                                                          }));
                                                            })), null)
                                                ],
                                                className: "whitespace-nowrap"
                                              }),
                                          className: "mt-3 flex items-center gap-x-2.5 text-xs leading-5 text-gray-600"
                                        })
                                  ],
                                  className: "min-w-0 flex-auto"
                                }),
                            tmp,
                            JsxRuntime.jsx("div", {
                                  children: tmp$1,
                                  className: Core$1.cx(maxRsvps !== undefined && playersCount >= maxRsvps ? "text-yellow-600 bg-yellow-400/10 ring-yellow-400/30" : "text-indigo-400 bg-indigo-400/10 ring-indigo-400/30", "rounded-full flex-none py-1 px-2 text-xs font-medium ring-1 ring-inset")
                                })
                          ],
                          className: Core$1.cx("relative flex items-center space-x-4 py-4 select-none")
                        }),
                    role: "link",
                    tabIndex: 0,
                    onKeyDown: (function (ev) {
                        if (ev.key === "Enter") {
                          return navigate(eventPath, undefined);
                        }
                        
                      })
                  })
            });
}

var make = EventItem;

export {
  ItemFragment ,
  JoinEventMutation ,
  UserFragment ,
  LeaveEventMutation ,
  td ,
  ts ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Rating from "../../lib/Rating.re.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as GoingRsvps from "./GoingRsvps.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as PendingRsvps from "./PendingRsvps.re.mjs";
import * as RsvpWaitlist from "./RsvpWaitlist.re.mjs";
import * as WarningAlert from "../molecules/WarningAlert.re.mjs";
import * as LucideReact from "lucide-react";
import * as MiniEventRsvp from "./MiniEventRsvp.re.mjs";
import * as RelayRuntime from "relay-runtime";
import * as EventSignupButton from "../atoms/EventSignupButton.re.mjs";
import * as ReactExperimental from "rescript-relay/src/ReactExperimental.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as RSVPSection_user_graphql from "../../__generated__/RSVPSection_user_graphql.re.mjs";
import * as RSVPSection_event_graphql from "../../__generated__/RSVPSection_event_graphql.re.mjs";
import * as EventMessages_query_graphql from "../../__generated__/EventMessages_query_graphql.re.mjs";
import * as RSVPSectionJoinMutation_graphql from "../../__generated__/RSVPSectionJoinMutation_graphql.re.mjs";
import * as RSVPSectionRefetchQuery_graphql from "../../__generated__/RSVPSectionRefetchQuery_graphql.re.mjs";
import * as RSVPSectionLeaveMutation_graphql from "../../__generated__/RSVPSectionLeaveMutation_graphql.re.mjs";
import * as RSVPSectionCreateRatingMutation_graphql from "../../__generated__/RSVPSectionCreateRatingMutation_graphql.re.mjs";
import * as RSVPSectionUpdateMessageMutation_graphql from "../../__generated__/RSVPSectionUpdateMessageMutation_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = RSVPSection_event_graphql.Utils.getConnectionNodes;

var convertFragment = RSVPSection_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(RSVPSection_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, RSVPSection_event_graphql.node, convertFragment);
}

var makeRefetchVariables = RSVPSectionRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = RSVPSectionRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(RSVPSection_event_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(RSVPSection_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(RSVPSection_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var convertFragment$1 = RSVPSection_user_graphql.Internal.convertFragment;

function use$1(fRef) {
  return RescriptRelay_Fragment.useFragment(RSVPSection_user_graphql.node, convertFragment$1, fRef);
}

function useOpt$1(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, RSVPSection_user_graphql.node, convertFragment$1);
}

var UserFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment$1,
  use: use$1,
  useOpt: useOpt$1
};

var convertVariables = RSVPSectionJoinMutation_graphql.Internal.convertVariables;

var convertResponse = RSVPSectionJoinMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = RSVPSectionJoinMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, RSVPSectionJoinMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use$2 = RescriptRelay_Mutation.useMutation(convertVariables, RSVPSectionJoinMutation_graphql.node, convertResponse, convertWrapRawResponse);

var RSVPSectionJoinMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use$2
};

var convertVariables$1 = RSVPSectionCreateRatingMutation_graphql.Internal.convertVariables;

var convertResponse$1 = RSVPSectionCreateRatingMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = RSVPSectionCreateRatingMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$1 = RescriptRelay_Mutation.commitMutation(convertVariables$1, RSVPSectionCreateRatingMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$3 = RescriptRelay_Mutation.useMutation(convertVariables$1, RSVPSectionCreateRatingMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var RSVPSectionCreateRatingMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  commitMutation: commitMutation$1,
  use: use$3
};

var convertVariables$2 = RSVPSectionLeaveMutation_graphql.Internal.convertVariables;

var convertResponse$2 = RSVPSectionLeaveMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$2 = RSVPSectionLeaveMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$2 = RescriptRelay_Mutation.commitMutation(convertVariables$2, RSVPSectionLeaveMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var use$4 = RescriptRelay_Mutation.useMutation(convertVariables$2, RSVPSectionLeaveMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var RSVPSectionLeaveMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$2,
  convertResponse: convertResponse$2,
  convertWrapRawResponse: convertWrapRawResponse$2,
  commitMutation: commitMutation$2,
  use: use$4
};

var convertVariables$3 = RSVPSectionUpdateMessageMutation_graphql.Internal.convertVariables;

var convertResponse$3 = RSVPSectionUpdateMessageMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$3 = RSVPSectionUpdateMessageMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$3 = RescriptRelay_Mutation.commitMutation(convertVariables$3, RSVPSectionUpdateMessageMutation_graphql.node, convertResponse$3, convertWrapRawResponse$3);

var use$5 = RescriptRelay_Mutation.useMutation(convertVariables$3, RSVPSectionUpdateMessageMutation_graphql.node, convertResponse$3, convertWrapRawResponse$3);

var RSVPSectionUpdateMessageMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$3,
  convertResponse: convertResponse$3,
  convertWrapRawResponse: convertWrapRawResponse$3,
  commitMutation: commitMutation$3,
  use: use$5
};

var sessionContext = AppContext.SessionContext;

function isRestrictedRsvp(listType) {
  if (Caml_obj.notequal(listType, 0)) {
    return listType !== undefined;
  } else {
    return false;
  }
}

function RSVPSection$ViewerStatusMessage(props) {
  var message = props.message;
  var eventId = props.eventId;
  var match = React.useState(function () {
        return false;
      });
  var setIsEditing = match[1];
  var match$1 = React.useState(function () {
        return Core__Option.getOr(message, "");
      });
  var setEditedMessage = match$1[1];
  var editedMessage = match$1[0];
  var match$2 = use$5();
  var commitMutationUpdateMessage = match$2[0];
  var handleSave = function () {
    var trimmedMessage = editedMessage.trim();
    if (trimmedMessage !== "") {
      var connectionId = EventMessages_query_graphql.makeConnectionId("client:root", eventId + ".updated");
      commitMutationUpdateMessage({
            connections: [connectionId],
            input: {
              eventId: eventId,
              message: trimmedMessage
            }
          }, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    setIsEditing(function (param) {
          return false;
        });
  };
  var onSubmit = function (e) {
    e.preventDefault();
    handleSave();
  };
  var content = message !== undefined ? (
      message === "" ? t`Type a status message for people to see... such as 'I will arrive at 19:00.'` : message
    ) : t`Type a status message for people to see... such as 'I will arrive at 19:00.'`;
  if (match[0]) {
    return JsxRuntime.jsxs("form", {
                children: [
                  JsxRuntime.jsx("div", {
                        children: JsxRuntime.jsx("input", {
                              className: "block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6",
                              value: editedMessage,
                              onChange: (function (e) {
                                  setEditedMessage(e.target.value);
                                })
                            }),
                        className: "flex-grow"
                      }),
                  JsxRuntime.jsx("button", {
                        children: t`Save`,
                        className: "rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",
                        type: "submit"
                      })
                ],
                className: "flex items-center gap-x-2 mt-2",
                onSubmit: onSubmit
              });
  } else {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsxs("p", {
                      children: [
                        content,
                        JsxRuntime.jsx(LucideReact.Pencil, {
                              className: "inline h-4 w-4 ml-2 text-gray-400 invisible group-hover:visible"
                            })
                      ],
                      className: "flex-auto"
                    }),
                className: "flex items-center text-sm text-gray-500 mt-4 group cursor-pointer",
                onClick: (function (param) {
                    setIsEditing(function (param) {
                          return true;
                        });
                  })
              });
  }
}

var ViewerStatusMessage = {
  make: RSVPSection$ViewerStatusMessage
};

function RSVPSection(props) {
  var $$event = props.event;
  var match = ReactExperimental.useTransition();
  var startTransition = match[1];
  var match$1 = usePagination($$event);
  var isLoadingNext = match$1.isLoadingNext;
  var loadNext = match$1.loadNext;
  var data = match$1.data;
  var match$2 = use($$event);
  var minRating = match$2.minRating;
  var maxRsvps = match$2.maxRsvps;
  var activity = match$2.activity;
  var __id = match$2.__id;
  var viewer = Core__Option.map(props.user, (function (user) {
          return use$1(user);
        }));
  var rsvps = getConnectionNodes(data.rsvps);
  var match$3 = use$2();
  var commitMutationJoin = match$3[0];
  var match$4 = use$4();
  var commitMutationLeave = match$4[0];
  var match$5 = use$3();
  var commitMutationCreateRating = match$5[0];
  var isWaitlist = function (count) {
    return Core__Option.isSome(Core__Option.flatMap(maxRsvps, (function (max) {
                      if (count >= max) {
                        return Caml_option.some(undefined);
                      }
                      
                    })));
  };
  var mainList = rsvps.filter(function (edge) {
        if (edge.listType === undefined) {
          return true;
        } else {
          return Caml_obj.equal(edge.listType, 0);
        }
      });
  var confirmedRsvps = mainList.filter(function (param, i) {
          return !isWaitlist(i);
        }).toSorted(function (a, b) {
        var userA = Core__Option.getOr(Core__Option.flatMap(a.rating, (function (rating) {
                    return rating.mu;
                  })), 0);
        var userB = Core__Option.getOr(Core__Option.flatMap(b.rating, (function (rating) {
                    return rating.mu;
                  })), 0);
        if (userB > userA) {
          return 1;
        } else if (userB < userA) {
          return -1;
        } else {
          return 0;
        }
      });
  var viewerRsvp = Core__Option.flatMap(viewer, (function (viewer) {
          return rsvps.find(function (edge) {
                      return Core__Option.getOr(Core__Option.map(edge.user, (function (user) {
                                        return viewer.id === user.id;
                                      })), false);
                    });
        }));
  var viewerHasRsvp = Core__Option.isSome(viewerRsvp);
  var match$6 = Core__Option.getOr(Core__Option.map(viewerRsvp, (function (rsvp) {
              if (isRestrictedRsvp(rsvp.listType)) {
                return [
                        false,
                        true
                      ];
              }
              var viewerIndex = mainList.findIndex(function (edge) {
                    return edge.id === rsvp.id;
                  });
              if (viewerIndex >= 0) {
                return [
                        isWaitlist(viewerIndex),
                        false
                      ];
              } else {
                return [
                        false,
                        false
                      ];
              }
            })), [
        false,
        false
      ]);
  var eventIsFull = Core__Option.getOr(Core__Option.map(maxRsvps, (function (max) {
              return confirmedRsvps.length >= max;
            })), false);
  var viewerCanJoin = Core__Option.map(minRating, (function (minRating) {
          var rating = Core__Option.getOr(Core__Option.flatMap(viewer, (function (viewer) {
                      return Core__Option.flatMap(viewer.eventRating, (function (r) {
                                    return r.ordinal;
                                  }));
                    })), Rating.Rating.ordinal(Rating.Rating.makeDefault()));
          return rating >= minRating;
        }));
  var viewerLowerRating = Core__Option.getOr(Core__Option.flatMap(viewer, (function (viewer) {
              return Core__Option.flatMap(viewer.eventRating, (function (r) {
                            return r.ordinal;
                          }));
            })), Rating.Rating.ordinal(Rating.Rating.makeDefault()));
  var viewerUpperRating = Core__Option.getOr(Core__Option.flatMap(viewer, (function (viewer) {
              return Core__Option.flatMap(viewer.eventRating, (function (r) {
                            return r.mu;
                          }));
            })), Rating.Rating.ordinal(Rating.Rating.makeDefault()));
  var viewerStatusMessage = Core__Option.flatMap(viewer, (function (viewer) {
          return Core__Option.flatMap(rsvps.find(function (edge) {
                          return Core__Option.getOr(Core__Option.map(edge.user, (function (user) {
                                            return viewer.id === user.id;
                                          })), false);
                        }), (function (edge) {
                        return edge.message;
                      }));
        }));
  var ratingWarning = viewer !== undefined && viewerCanJoin !== undefined && !viewerCanJoin ? JsxRuntime.jsx("div", {
          children: JsxRuntime.jsxs(WarningAlert.make, {
                children: [
                  t`Required rating: ${Core__Option.getOr(minRating, 0).toFixed(2)} (DUPR ${Rating.guessDupr(Core__Option.getOr(minRating, 0)).toFixed(2)})`,
                  JsxRuntime.jsx("br", {}),
                  t`Your rating ${viewerLowerRating.toFixed(2)} ~ ${viewerUpperRating.toFixed(2)} (DUPR ${Rating.guessDupr(viewerLowerRating).toFixed(2)} ~ ${Rating.guessDupr(viewerUpperRating).toFixed(2)}) is too low. You will be placed in the pending list until the rating limit is lowered. Please join another JPL rated event to boost your rating.`
                ],
                cta: "",
                ctaClick: (function () {
                    
                  })
              }),
          className: "mb-3"
        }) : null;
  var onRsvp = function (status) {
    if (status === "going") {
      if (viewerHasRsvp) {
        var connectionId = RelayRuntime.ConnectionHandler.getConnectionID(__id, "RSVPSection_event_rsvps", undefined);
        commitMutationLeave({
              connections: [connectionId],
              id: __id
            }, undefined, undefined, undefined, undefined, undefined, undefined);
        return ;
      } else {
        var connectionId$1 = RelayRuntime.ConnectionHandler.getConnectionID(__id, "RSVPSection_event_rsvps", undefined);
        commitMutationCreateRating(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
        commitMutationJoin({
              connections: [connectionId$1],
              id: __id
            }, undefined, undefined, undefined, undefined, undefined, undefined);
        return ;
      }
    }
    
  };
  var maxRating = Core__Array.reduce(rsvps, 0, (function (max, edge) {
          var currentRating = Core__Option.getOr(Core__Option.flatMap(edge.rating, (function (rating) {
                      return rating.mu;
                    })), 0);
          if (currentRating > max) {
            return currentRating;
          } else {
            return max;
          }
        }));
  var match$7 = React.useState(function () {
        return false;
      });
  var setMobileExpanded = match$7[1];
  var mobileExpanded = match$7[0];
  var rsvpButtonStatus = viewer !== undefined ? (
      match$6[1] ? ({
            TAG: "Joined",
            _0: "Pending"
          }) : (
          viewerHasRsvp ? (
              match$6[0] ? ({
                    TAG: "Joined",
                    _0: "Waitlisted"
                  }) : ({
                    TAG: "Joined",
                    _0: "Going"
                  })
            ) : (
              eventIsFull ? ({
                    TAG: "NotJoined",
                    _0: "JoinWaitlist"
                  }) : ({
                    TAG: "NotJoined",
                    _0: "Join"
                  })
            )
        )
    ) : ({
        TAG: "NotJoined",
        _0: "Login"
      });
  var requireConfirmation = false;
  if (eventIsFull && rsvps.filter(function (edge) {
          var i = mainList.findIndex(function (e) {
                return e.id === edge.id;
              });
          return isWaitlist(i);
        }).length > 0) {
    var tmp;
    if (rsvpButtonStatus.TAG === "Joined") {
      switch (rsvpButtonStatus._0) {
        case "Pending" :
            tmp = false;
            break;
        case "Going" :
        case "Waitlisted" :
            tmp = true;
            break;
        
      }
    } else {
      tmp = false;
    }
    requireConfirmation = tmp;
  }
  var toggleMobileExpanded = function () {
    var newMobileExpanded = !mobileExpanded;
    setMobileExpanded(function (param) {
          return newMobileExpanded;
        });
  };
  return JsxRuntime.jsx(JsxRuntime.Fragment, {
              children: Caml_option.some(JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("div", {
                                        children: mobileExpanded ? JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("h2", {
                                                                children: t`RSVP`,
                                                                className: "text-lg font-semibold"
                                                              }),
                                                          JsxRuntime.jsx(LucideReact.ChevronUp, {
                                                                size: 20,
                                                                className: "text-gray-500 transition-transform " + (
                                                                  mobileExpanded ? "rotate-180" : ""
                                                                )
                                                              })
                                                        ],
                                                        className: "flex justify-between items-center cursor-pointer",
                                                        onClick: (function (param) {
                                                            toggleMobileExpanded();
                                                          })
                                                      }),
                                                  JsxRuntime.jsx(EventSignupButton.make, {
                                                        onClick: (function () {
                                                            onRsvp("going");
                                                          }),
                                                        status: rsvpButtonStatus,
                                                        className: "w-full py-2 px-4 rounded-md flex items-center justify-center space-x-1 mt-3"
                                                      })
                                                ]
                                              }) : JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("div", {
                                                        children: JsxRuntime.jsx(EventSignupButton.make, {
                                                              onClick: (function () {
                                                                  onRsvp("going");
                                                                }),
                                                              status: rsvpButtonStatus,
                                                              className: "py-2 px-4 rounded-md flex items-center justify-center space-x-1 text-base",
                                                              requireConfirmation: requireConfirmation
                                                            })
                                                      }),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("h2", {
                                                                children: t`RSVP`,
                                                                className: "text-lg font-semibold"
                                                              }),
                                                          JsxRuntime.jsxs("div", {
                                                                children: [
                                                                  confirmedRsvps.slice(0, 3).map(function (edge) {
                                                                        return JsxRuntime.jsx("div", {
                                                                                    children: JsxRuntime.jsx(MiniEventRsvp.make, {
                                                                                          rsvp: edge.fragmentRefs,
                                                                                          maxRating: maxRating
                                                                                        }),
                                                                                    className: "inline-block"
                                                                                  }, edge.id);
                                                                      }),
                                                                  confirmedRsvps.length > 3 ? JsxRuntime.jsx("div", {
                                                                          children: JsxRuntime.jsx("div", {
                                                                                children: "+" + (confirmedRsvps.length - 3 | 0).toString(),
                                                                                className: "flex items-center"
                                                                              }),
                                                                          className: "inline-flex items-center justify-center w-8 h-8 rounded-full bg-gray-200 text-xs font-medium text-gray-800 cursor-pointer hover:bg-gray-300"
                                                                        }) : null
                                                                ],
                                                                className: "flex -space-x-2"
                                                              }),
                                                          JsxRuntime.jsx(LucideReact.ChevronUp, {
                                                                size: 20,
                                                                className: "text-gray-500 transition-transform " + (
                                                                  mobileExpanded ? "rotate-180" : ""
                                                                )
                                                              })
                                                        ],
                                                        className: "flex items-center space-x-3 cursor-pointer",
                                                        onClick: (function (param) {
                                                            toggleMobileExpanded();
                                                          })
                                                      })
                                                ],
                                                className: "flex justify-between items-center"
                                              }),
                                        className: "p-4"
                                      }),
                                  mobileExpanded ? JsxRuntime.jsxs("div", {
                                          children: [
                                            ratingWarning,
                                            viewerHasRsvp ? JsxRuntime.jsx("div", {
                                                    children: JsxRuntime.jsx(RSVPSection$ViewerStatusMessage, {
                                                          eventId: data.id,
                                                          message: viewerStatusMessage
                                                        }),
                                                    className: "mb-5"
                                                  }) : null,
                                            JsxRuntime.jsxs("div", {
                                                  children: [
                                                    JsxRuntime.jsx(GoingRsvps.make, {
                                                          event: data.fragmentRefs,
                                                          viewer: viewer,
                                                          activitySlug: Core__Option.flatMap(activity, (function (a) {
                                                                  return a.slug;
                                                                })),
                                                          maxRating: maxRating,
                                                          className: "mb-5"
                                                        }),
                                                    JsxRuntime.jsx(RsvpWaitlist.make, {
                                                          event: data.fragmentRefs,
                                                          viewer: viewer,
                                                          activitySlug: Core__Option.flatMap(activity, (function (a) {
                                                                  return a.slug;
                                                                })),
                                                          maxRating: maxRating
                                                        }),
                                                    JsxRuntime.jsx(PendingRsvps.make, {
                                                          event: data.fragmentRefs,
                                                          viewer: viewer,
                                                          activitySlug: Core__Option.flatMap(activity, (function (a) {
                                                                  return a.slug;
                                                                })),
                                                          maxRating: maxRating
                                                        })
                                                  ],
                                                  className: "max-h-[60vh] overflow-y-auto"
                                                }),
                                            JsxRuntime.jsxs("button", {
                                                  children: [
                                                    JsxRuntime.jsx("span", {
                                                          children: t`Collapse`,
                                                          className: "font-medium"
                                                        }),
                                                    JsxRuntime.jsx(LucideReact.ChevronUp, {
                                                          size: 20,
                                                          className: "ml-1"
                                                        })
                                                  ],
                                                  className: "w-full py-3 mt-4 flex items-center justify-center text-blue-600 border-t border-gray-200",
                                                  onClick: (function (param) {
                                                      toggleMobileExpanded();
                                                    })
                                                })
                                          ],
                                          className: "p-4 pt-0"
                                        }) : null
                                ],
                                className: "md:hidden"
                              }),
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("h2", {
                                        children: t`RSVP`,
                                        className: "text-lg font-semibold mb-4"
                                      }),
                                  ratingWarning,
                                  JsxRuntime.jsx("div", {
                                        children: JsxRuntime.jsx(EventSignupButton.make, {
                                              onClick: (function () {
                                                  onRsvp("going");
                                                }),
                                              status: rsvpButtonStatus,
                                              className: "w-full py-2 px-4 rounded-md flex items-center justify-center space-x-1",
                                              requireConfirmation: requireConfirmation
                                            }),
                                        className: "mb-6"
                                      }),
                                  viewerHasRsvp ? JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(RSVPSection$ViewerStatusMessage, {
                                                eventId: data.id,
                                                message: viewerStatusMessage
                                              }),
                                          className: "mb-5"
                                        }) : null,
                                  JsxRuntime.jsx(GoingRsvps.make, {
                                        event: data.fragmentRefs,
                                        viewer: viewer,
                                        activitySlug: Core__Option.flatMap(activity, (function (a) {
                                                return a.slug;
                                              })),
                                        maxRating: maxRating,
                                        className: "mb-5"
                                      }),
                                  JsxRuntime.jsx(RsvpWaitlist.make, {
                                        event: data.fragmentRefs,
                                        viewer: viewer,
                                        activitySlug: Core__Option.flatMap(activity, (function (a) {
                                                return a.slug;
                                              })),
                                        maxRating: maxRating,
                                        className: "mb-5"
                                      }),
                                  JsxRuntime.jsx(PendingRsvps.make, {
                                        event: data.fragmentRefs,
                                        viewer: viewer,
                                        activitySlug: Core__Option.flatMap(activity, (function (a) {
                                                return a.slug;
                                              })),
                                        maxRating: maxRating,
                                        className: "mb-5"
                                      }),
                                  match$1.hasNext || isLoadingNext ? JsxRuntime.jsx("div", {
                                          children: isLoadingNext ? JsxRuntime.jsx("span", {
                                                  children: t`Loading...`,
                                                  className: "text-sm text-gray-500"
                                                }) : JsxRuntime.jsx("button", {
                                                  children: t`Load more`,
                                                  className: "text-sm font-medium text-blue-600 hover:underline",
                                                  onClick: (function (param) {
                                                      startTransition(function () {
                                                            loadNext(80, undefined);
                                                          });
                                                    })
                                                }),
                                          className: "mt-4 text-center"
                                        }) : null
                                ],
                                className: "hidden md:block"
                              })
                        ],
                        className: "fixed bottom-0 left-0 right-0 bg-white shadow-lg border-t md:border-t-0 md:rounded-lg md:shadow-sm md:p-6 md:mt-4 md:sticky md:top-4 z-10"
                      }))
            });
}

var make = RSVPSection;

export {
  Fragment ,
  UserFragment ,
  RSVPSectionJoinMutation ,
  RSVPSectionCreateRatingMutation ,
  RSVPSectionLeaveMutation ,
  RSVPSectionUpdateMessageMutation ,
  sessionContext ,
  isRestrictedRsvp ,
  ViewerStatusMessage ,
  make ,
}
/*  Not a pure module */

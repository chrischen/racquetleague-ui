// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as EventTag from "../atoms/EventTag.re.mjs";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as LucideReact from "lucide-react";
import * as Core$1 from "@linaria/core";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as EventHeader_event_graphql from "../../__generated__/EventHeader_event_graphql.re.mjs";
import * as DifferenceInMinutes from "date-fns/differenceInMinutes";

import { t } from '@lingui/macro'
;

var convertFragment = EventHeader_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventHeader_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventHeader_event_graphql.node, convertFragment);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function EventHeader(props) {
  var data = use(props.event);
  var until = Core__Option.map(data.startDate, (function (startDate) {
          return DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(startDate), new Date());
        }));
  var duration = Core__Option.flatMap(data.startDate, (function (startDate) {
          return Core__Option.map(data.endDate, (function (endDate) {
                        return DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(endDate), Util.Datetime.toDate(startDate));
                      }));
        }));
  var durationText = Core__Option.map(duration, (function (duration) {
          var hours = Math.floor(duration / 60);
          var minutes = (duration | 0) % 60;
          if (minutes === 0) {
            return t`${hours.toString()} hours`;
          } else {
            return t`${hours.toString()} hours and ${minutes.toString()} minutes`;
          }
        }));
  var activityComponent = Core__Option.getOr(Core__Option.flatMap(data.activity, (function (activity) {
              return Core__Option.map(activity.name, (function (name) {
                            return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                        to: "/?activity=" + Core__Option.getOr(activity.slug, ""),
                                        children: Core.i18n._(name)
                                      });
                          }));
            })), "---");
  var title = Core__Option.getOr(data.title, "Event");
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  return JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("h1", {
                                              children: JsxRuntime.jsxs("div", {
                                                    children: [
                                                      Core__Option.getOr(Core__Option.map(data.deleted, (function (param) {
                                                                  return JsxRuntime.jsx("span", {
                                                                              children: t`CANCELED`,
                                                                              className: "mr-2"
                                                                            });
                                                                })), null),
                                                      Core__Option.getOr(data.tags, []).includes("comp") ? JsxRuntime.jsx("div", {
                                                              children: JsxRuntime.jsx(LucideReact.Trophy, {
                                                                    className: "h-6 w-6"
                                                                  }),
                                                              className: "flex-none text-yellow-500"
                                                            }) : null,
                                                      JsxRuntime.jsxs("span", {
                                                            children: [
                                                              activityComponent,
                                                              " / ",
                                                              title
                                                            ],
                                                            className: Core$1.cx(Core__Option.isSome(data.deleted) ? "line-through" : "")
                                                          })
                                                    ],
                                                    className: "flex items-center gap-x-3"
                                                  }),
                                              className: "text-2xl md:text-3xl font-bold text-gray-900"
                                            }),
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsxs("div", {
                                                      children: [
                                                        JsxRuntime.jsx(LucideReact.Users, {
                                                              className: "mr-1"
                                                            }),
                                                        JsxRuntime.jsx("span", {
                                                              children: Core__Option.getOr(Core__Option.flatMap(data.club, (function (club) {
                                                                          return Core__Option.map(club.name, (function (name) {
                                                                                        return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                                                    to: "/clubs/" + Core__Option.getOr(club.slug, ""),
                                                                                                    children: name
                                                                                                  });
                                                                                      }));
                                                                        })), t`Unknown club`)
                                                            })
                                                      ],
                                                      className: "flex items-center"
                                                    }),
                                                Core__Option.getOr(Core__Option.map(Core__Option.filter(Core__Option.map(data.tags, (function (tags) {
                                                                    var levelTags = [
                                                                      "all level",
                                                                      "3.0+",
                                                                      "3.5+",
                                                                      "4.0+",
                                                                      "4.5+",
                                                                      "5.0+"
                                                                    ];
                                                                    var hasLevelTags = tags.some(function (tag) {
                                                                          return levelTags.includes(tag);
                                                                        });
                                                                    var displayTags = hasLevelTags ? tags : tags.concat(["all level"]);
                                                                    var match = data.listed;
                                                                    if (match !== undefined && !match) {
                                                                      return displayTags.concat(["unlisted"]);
                                                                    } else {
                                                                      return displayTags;
                                                                    }
                                                                  })), (function (tags) {
                                                                return tags.length > 0;
                                                              })), (function (tags) {
                                                            return JsxRuntime.jsx(EventTag.TagList.make, {
                                                                        tags: tags,
                                                                        className: "mt-2 sm:mt-0 sm:ml-3"
                                                                      });
                                                          })), null)
                                              ],
                                              className: "flex flex-col sm:flex-row sm:items-center mt-1 text-gray-600"
                                            })
                                      ],
                                      className: "p-4 md:p-6 border-b"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsxs("div", {
                                                    children: [
                                                      JsxRuntime.jsx(LucideReact.CalendarClock, {
                                                            className: "text-blue-600 mt-1 mr-3 flex-shrink-0"
                                                          }),
                                                      JsxRuntime.jsxs("div", {
                                                            children: [
                                                              JsxRuntime.jsxs("div", {
                                                                    children: [
                                                                      Core__Option.getOr(Core__Option.map(data.startDate, (function (startDate) {
                                                                                  return JsxRuntime.jsx(ReactIntl.FormattedDate, {
                                                                                              value: Util.Datetime.toDate(startDate),
                                                                                              timeZone: Core__Option.getOr(data.timezone, "Asia/Tokyo"),
                                                                                              weekday: "long",
                                                                                              month: "numeric",
                                                                                              day: "2-digit"
                                                                                            });
                                                                                })), "Date TBD"),
                                                                      " ",
                                                                      Core__Option.getOr(Core__Option.map(until, (function (until) {
                                                                                  return JsxRuntime.jsx(ReactIntl.FormattedRelativeTime, {
                                                                                              value: until,
                                                                                              unit: "minute",
                                                                                              updateIntervalInSeconds: 1
                                                                                            });
                                                                                })), null)
                                                                    ],
                                                                    className: "font-semibold text-gray-900"
                                                                  }),
                                                              JsxRuntime.jsxs("div", {
                                                                    children: [
                                                                      Core__Option.getOr(Core__Option.flatMap(data.startDate, (function (startDate) {
                                                                                  return Core__Option.map(data.endDate, (function (endDate) {
                                                                                                return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                                                            children: [
                                                                                                              JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                    value: Util.Datetime.toDate(startDate),
                                                                                                                    timeZone: Core__Option.getOr(data.timezone, "Asia/Tokyo")
                                                                                                                  }),
                                                                                                              " -> ",
                                                                                                              JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                    value: Util.Datetime.toDate(endDate),
                                                                                                                    timeZone: Core__Option.getOr(data.timezone, "Asia/Tokyo")
                                                                                                                  })
                                                                                                            ]
                                                                                                          });
                                                                                              }));
                                                                                })), "Time TBD"),
                                                                      Core__Option.getOr(Core__Option.map(durationText, (function (duration) {
                                                                                  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                                              children: [
                                                                                                " (",
                                                                                                duration,
                                                                                                ")"
                                                                                              ]
                                                                                            });
                                                                                })), null)
                                                                    ],
                                                                    className: "text-lg font-bold text-blue-700"
                                                                  })
                                                            ]
                                                          })
                                                    ],
                                                    className: "flex items-start mb-3 md:mb-0"
                                                  }),
                                              JsxRuntime.jsxs("div", {
                                                    children: [
                                                      JsxRuntime.jsx(LucideReact.MapPin, {
                                                            className: "text-blue-600 mr-3 flex-shrink-0"
                                                          }),
                                                      JsxRuntime.jsx("div", {
                                                            children: JsxRuntime.jsx("div", {
                                                                  children: Core__Option.getOr(Core__Option.flatMap(data.location, (function ($$location) {
                                                                              return Core__Option.map($$location.name, (function (name) {
                                                                                            return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                                                        to: "/locations/" + $$location.id,
                                                                                                        children: name
                                                                                                      });
                                                                                          }));
                                                                            })), t`Unknown location`),
                                                                  className: "font-semibold text-gray-900"
                                                                })
                                                          })
                                                    ],
                                                    className: "flex items-center"
                                                  })
                                            ],
                                            className: "md:flex md:justify-between"
                                          }),
                                      className: "p-4 md:p-6 bg-blue-50 border-b"
                                    })
                              ],
                              className: "bg-white shadow-md"
                            });
                })
            });
}

var make = EventHeader;

export {
  Fragment ,
  make ,
}
/*  Not a pure module */

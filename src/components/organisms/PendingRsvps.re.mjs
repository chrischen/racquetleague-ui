// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as EventRsvp from "./EventRsvp.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RsvpListTitle from "../molecules/RsvpListTitle.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as PendingRsvps_event_graphql from "../../__generated__/PendingRsvps_event_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var getConnectionNodes = PendingRsvps_event_graphql.Utils.getConnectionNodes;

var convertFragment = PendingRsvps_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(PendingRsvps_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, PendingRsvps_event_graphql.node, convertFragment);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function isRestrictedRsvp(listType) {
  if (Caml_obj.notequal(listType, 0)) {
    return listType !== undefined;
  } else {
    return false;
  }
}

function PendingRsvps(props) {
  var maxRating = props.maxRating;
  var activitySlug = props.activitySlug;
  var viewer = props.viewer;
  var eventData = use(props.event);
  var rsvps = getConnectionNodes(eventData.rsvps);
  var restrictedRsvps = rsvps.filter(function (edge) {
        return isRestrictedRsvp(edge.listType);
      });
  if (restrictedRsvps.length === 0) {
    return null;
  } else {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx(RsvpListTitle.make, {
                        title: t`Pending`,
                        count: restrictedRsvps.length,
                        className: "mb-3"
                      }),
                  JsxRuntime.jsx("div", {
                        children: restrictedRsvps.map(function (edge) {
                              return JsxRuntime.jsx(EventRsvp.make, {
                                          rsvp: edge.fragmentRefs,
                                          viewer: viewer,
                                          activitySlug: activitySlug,
                                          maxRating: maxRating,
                                          eventId: eventData.id,
                                          isAdmin: eventData.viewerIsAdmin
                                        }, edge.id);
                            }),
                        className: "flex flex-wrap gap-3"
                      })
                ],
                className: props.className
              });
  }
}

var make = PendingRsvps;

export {
  Fragment ,
  isRestrictedRsvp ,
  make ,
}
/*  Not a pure module */

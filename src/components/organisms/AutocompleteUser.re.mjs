// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LucideReact from "lucide-react";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as AutocompleteUserQuery_graphql from "../../__generated__/AutocompleteUserQuery_graphql.re.mjs";

var convertVariables = AutocompleteUserQuery_graphql.Internal.convertVariables;

var convertResponse = AutocompleteUserQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = AutocompleteUserQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, AutocompleteUserQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, AutocompleteUserQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(AutocompleteUserQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(AutocompleteUserQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(AutocompleteUserQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(AutocompleteUserQuery_graphql.node, convertVariables);

var Query = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

function AutocompleteUser(props) {
  var onSelected = props.onSelected;
  var match = React.useState(function () {
        return "";
      });
  var setSearchQuery = match[1];
  var searchQuery = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setIsOpen = match$1[1];
  var isOpen = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setSelectedUser = match$2[1];
  var inputRef = React.useRef(null);
  var queryData = use({
        clubId: props.clubId,
        first: 10
      }, undefined, undefined, undefined);
  var users = React.useMemo((function () {
          return Core__Option.getOr(Core__Option.map(queryData.clubMembers.edges, (function (edges) {
                            return Core__Array.filterMap(Core__Array.filterMap(Core__Array.filterMap(edges, (function (edge) {
                                                  return edge;
                                                })), (function (edge) {
                                              return edge.node;
                                            })), (function (membership) {
                                          return Core__Option.map(membership.user, (function (u) {
                                                        return {
                                                                id: u.id,
                                                                fullName: u.fullName,
                                                                lineUsername: u.lineUsername,
                                                                picture: u.picture
                                                              };
                                                      }));
                                        }));
                          })), []);
        }), [queryData]);
  var filteredUsers = React.useMemo((function () {
          if (searchQuery.length === 0) {
            return users;
          }
          var query = searchQuery.toLowerCase();
          return users.filter(function (user) {
                      var fullName = Core__Option.getOr(user.fullName, "").toLowerCase();
                      var lineUsername = Core__Option.getOr(user.lineUsername, "").toLowerCase();
                      if (fullName.includes(query)) {
                        return true;
                      } else {
                        return lineUsername.includes(query);
                      }
                    });
        }), [
        searchQuery,
        users
      ]);
  var handleInputChange = function (evt) {
    var value = evt.target.value;
    setSearchQuery(function (param) {
          return value;
        });
    setIsOpen(function (param) {
          return true;
        });
    setSelectedUser(function (param) {
          
        });
  };
  var handleInputFocus = function (_evt) {
    setIsOpen(function (param) {
          return true;
        });
  };
  var handleInputBlur = function (_evt) {
    setTimeout((function () {
            setIsOpen(function (param) {
                  return false;
                });
          }), 200);
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("input", {
                              ref: Caml_option.some(inputRef),
                              className: "block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6",
                              placeholder: Core__Option.getOr(props.placeholder, "Search users..."),
                              type: "text",
                              value: searchQuery,
                              onFocus: handleInputFocus,
                              onBlur: handleInputBlur,
                              onChange: handleInputChange
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(LucideReact.Search, {
                                    className: "h-5 w-5 text-gray-400",
                                    "aria-hidden": "true"
                                  }),
                              className: "pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3"
                            })
                      ],
                      className: "relative"
                    }),
                isOpen && filteredUsers.length > 0 ? JsxRuntime.jsx("div", {
                        children: filteredUsers.map(function (user) {
                              return JsxRuntime.jsx("button", {
                                          children: JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("img", {
                                                        className: "h-8 w-8 rounded-full flex-shrink-0",
                                                        alt: Core__Option.getOr(user.fullName, "User"),
                                                        src: Core__Option.getOr(user.picture, "/default-avatar.png")
                                                      }),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("p", {
                                                                children: Core__Option.getOr(user.fullName, "Unknown User"),
                                                                className: "text-sm font-medium truncate"
                                                              }),
                                                          Core__Option.getOr(Core__Option.map(user.lineUsername, (function (username) {
                                                                      return JsxRuntime.jsx("p", {
                                                                                  children: "@" + username,
                                                                                  className: "text-sm opacity-75 truncate"
                                                                                });
                                                                    })), null)
                                                        ],
                                                        className: "flex-1 min-w-0"
                                                      })
                                                ],
                                                className: "flex items-center space-x-3"
                                              }),
                                          className: "relative cursor-pointer select-none py-2 pl-3 pr-9 text-gray-900 hover:bg-indigo-600 hover:text-white w-full text-left",
                                          type: "button",
                                          onClick: (function (param) {
                                              setSelectedUser(function (param) {
                                                    return user;
                                                  });
                                              setSearchQuery(function (param) {
                                                    return Core__Option.getOr(user.fullName, Core__Option.getOr(user.lineUsername, "Unknown"));
                                                  });
                                              setIsOpen(function (param) {
                                                    return false;
                                                  });
                                              onSelected(user);
                                            })
                                        }, user.id);
                            }),
                        className: "absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"
                      }) : null,
                isOpen && searchQuery.length > 0 && filteredUsers.length === 0 ? JsxRuntime.jsx("div", {
                        children: "No users found",
                        className: "absolute z-10 mt-1 w-full rounded-md bg-white py-3 text-center text-sm text-gray-500 shadow-lg ring-1 ring-black ring-opacity-5"
                      }) : null
              ],
              className: Core__Option.getOr(props.className, "relative")
            });
}

var make = AutocompleteUser;

export {
  Query ,
  make ,
}
/* use Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as Core from "@linaria/core";
import * as FramerMotion from "framer-motion";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as EventRsvpUser_user_graphql from "../../__generated__/EventRsvpUser_user_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var convertFragment = EventRsvpUser_user_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventRsvpUser_user_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventRsvpUser_user_graphql.node, convertFragment);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function fromRegisteredUser(user) {
  var user$1 = use(user);
  return {
          name: Core__Option.getOr(user$1.lineUsername, "[Line username missing]"),
          picture: user$1.picture,
          data: {
            TAG: "Registered",
            _0: user$1
          }
        };
}

function makeGuest(name) {
  return {
          name: name,
          picture: undefined,
          data: "Guest"
        };
}

function EventRsvpUser(props) {
  var link = props.link;
  var __highlight = props.highlight;
  var user = props.user;
  var highlight = __highlight !== undefined ? __highlight : false;
  return JsxRuntime.jsxs("div", {
              children: [
                Core__Option.getOr(Core__Option.map(user.picture, (function (picture) {
                            return JsxRuntime.jsx("img", {
                                        className: Core.cx(highlight ? "h-14 w-14" : "h-12 w-12", "flex-none rounded-full bg-gray-50", highlight ? "drop-shadow-lg" : ""),
                                        alt: "",
                                        src: picture
                                      });
                          })), JsxRuntime.jsx("div", {
                          className: "h-12 w-12 flex-none rounded-full bg-gray-50"
                        })),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("p", {
                              children: link !== undefined ? JsxRuntime.jsxs(LangProvider.Router.Link.make, {
                                      to: link,
                                      children: [
                                        JsxRuntime.jsx("span", {
                                              className: "absolute inset-x-0 -top-px bottom-0"
                                            }),
                                        highlight ? JsxRuntime.jsx("strong", {
                                                children: user.name,
                                                className: "text-lg"
                                              }) : user.name
                                      ]
                                    }) : JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                      children: [
                                        JsxRuntime.jsx("span", {
                                              className: "absolute inset-x-0 -top-px bottom-0"
                                            }),
                                        highlight ? JsxRuntime.jsx("strong", {
                                                children: user.name,
                                                className: "text-lg"
                                              }) : user.name
                                      ]
                                    }),
                              className: "text-sm font-semibold leading-6 text-gray-900"
                            }),
                        JsxRuntime.jsx("p", {
                              children: JsxRuntime.jsx("span", {
                                    className: "relative truncate hover:underline"
                                  }),
                              className: "mt-1 flex text-xs leading-5 text-gray-500"
                            }),
                        Core__Option.getOr(Core__Option.map(props.ratingPercent, (function (ratingPercent) {
                                    return JsxRuntime.jsx("div", {
                                                children: JsxRuntime.jsx(FramerMotion.motion.div, {
                                                      className: "h-2 rounded-full bg-red-400",
                                                      animate: {
                                                        width: ratingPercent.toFixed(3) + "%"
                                                      },
                                                      initial: {
                                                        width: "0%"
                                                      }
                                                    }),
                                                className: "overflow-hidden rounded-full bg-gray-200 mt-1"
                                              });
                                  })), null)
                      ],
                      className: "min-w-0 flex-auto"
                    })
              ],
              className: Core.cx("relative flex min-w-0 gap-x-4", highlight ? "py-2 mx-0" : "mx-2")
            });
}

var make = EventRsvpUser;

var $$default = EventRsvpUser;

export {
  Fragment ,
  fromRegisteredUser ,
  makeGuest ,
  make ,
  $$default as default,
}
/*  Not a pure module */

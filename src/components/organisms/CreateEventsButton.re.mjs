// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as CreateEventsButtonMutation_graphql from "../../__generated__/CreateEventsButtonMutation_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = CreateEventsButtonMutation_graphql.Internal.convertVariables;

var convertResponse = CreateEventsButtonMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = CreateEventsButtonMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, CreateEventsButtonMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, CreateEventsButtonMutation_graphql.node, convertResponse, convertWrapRawResponse);

var Mutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use
};

function CreateEventsButton(props) {
  var onEventsCreated = props.onEventsCreated;
  var clubId = props.clubId;
  var activitySlug = props.activitySlug;
  var events = props.events;
  var match = use();
  var commitMutation = match[0];
  var navigate = ReactRouterDom.useNavigate();
  var eventCount = events.length;
  var buttonText = eventCount === 1 ? t`Create This Event` : t`Create All Events`;
  var formatEventsForBulkCreate = function (events) {
    return events.map(function ($$event) {
                  var startDateObj = new Date($$event.date);
                  var endDateObj = new Date($$event.time);
                  var month = startDateObj.getMonth() + 1.0 | 0;
                  var day = startDateObj.getDate() | 0;
                  var startHours = startDateObj.getHours() | 0;
                  var startMinutes = startDateObj.getMinutes() | 0;
                  var endHours = endDateObj.getHours() | 0;
                  var endMinutes = endDateObj.getMinutes() | 0;
                  var formatTime = function (hours, minutes) {
                    var period = hours >= 12 ? "pm" : "am";
                    var displayHours = hours > 12 ? hours - 12 | 0 : (
                        hours === 0 ? 12 : hours
                      );
                    if (minutes === 0) {
                      return displayHours.toString() + period;
                    }
                    var padZero = function (num) {
                      if (num < 10) {
                        return "0" + num.toString();
                      } else {
                        return num.toString();
                      }
                    };
                    return displayHours.toString() + ":" + padZero(minutes) + period;
                  };
                  var startTime = formatTime(startHours, startMinutes);
                  var endTime = formatTime(endHours, endMinutes);
                  var dateLine = month.toString() + "/" + day.toString() + " " + startTime + "-" + endTime;
                  var lines = [dateLine];
                  Core__Option.forEach($$event.location, (function (loc) {
                          lines.push(loc);
                        }));
                  lines.push($$event.title);
                  Core__Option.forEach($$event.description, (function (desc) {
                          lines.push(desc);
                        }));
                  Core__Option.forEach($$event.maxRsvps, (function (max) {
                          lines.push("Max " + max.toString() + " people.");
                        }));
                  return lines.join("\n");
                }).join("\n\n");
  };
  return JsxRuntime.jsx("button", {
              children: buttonText,
              className: "w-full px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white rounded-2xl font-medium transition-all shadow-lg shadow-purple-500/25",
              onClick: (function (param) {
                  var formattedText = formatEventsForBulkCreate(events);
                  console.log("Formatted events for bulk create:", formattedText);
                  var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("client:root", "EventsListFragment_events", undefined);
                  commitMutation({
                        connections: [connectionId],
                        input: {
                          activitySlug: activitySlug,
                          clubId: clubId,
                          input: formattedText,
                          listed: true
                        }
                      }, undefined, undefined, undefined, (function (mutationResponse, _errors) {
                          var createdEvents = Core__Option.getOr(mutationResponse.createEvents.events, []);
                          var count = createdEvents.length;
                          Core__Option.forEach(onEventsCreated, (function (callback) {
                                  callback();
                                }));
                          if (count === 1) {
                            return Core__Option.forEach(createdEvents[0], (function ($$event) {
                                          navigate("/events/" + $$event.id, undefined);
                                        }));
                          } else {
                            alert(t`${count.toString()} events created!`);
                            return ;
                          }
                        }), (function (_error) {
                          alert(t`Error creating events. Please try again.`);
                        }), undefined);
                })
            });
}

var make = CreateEventsButton;

export {
  Mutation ,
  make ,
}
/*  Not a pure module */

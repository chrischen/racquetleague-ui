// Generated by ReScript, PLEASE EDIT WITH CARE

import * as EventRsvp from "./EventRsvp.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as RsvpListTitle from "../molecules/RsvpListTitle.re.mjs";
import * as OrderedRsvpList from "../molecules/OrderedRsvpList.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RsvpWaitlist_event_graphql from "../../__generated__/RsvpWaitlist_event_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var getConnectionNodes = RsvpWaitlist_event_graphql.Utils.getConnectionNodes;

var convertFragment = RsvpWaitlist_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(RsvpWaitlist_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, RsvpWaitlist_event_graphql.node, convertFragment);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function RsvpWaitlist(props) {
  var activitySlug = props.activitySlug;
  var viewer = props.viewer;
  var eventData = use(props.event);
  var rsvps = getConnectionNodes(eventData.rsvps);
  var waitlistRsvps = rsvps.filter(function (param, i) {
        return Core__Option.getOr(Core__Option.map(eventData.maxRsvps, (function (max) {
                          return i >= max;
                        })), false);
      });
  if (waitlistRsvps.length === 0) {
    return null;
  } else {
    return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx(RsvpListTitle.make, {
                        title: t`Waitlist`,
                        count: waitlistRsvps.length,
                        className: "mb-3"
                      }),
                  JsxRuntime.jsx(OrderedRsvpList.make, {
                        items: waitlistRsvps,
                        children: (function (_index, rsvp) {
                            return JsxRuntime.jsx(EventRsvp.make, {
                                        rsvp: rsvp.fragmentRefs,
                                        viewer: viewer,
                                        activitySlug: activitySlug,
                                        maxRating: 0.0,
                                        eventId: eventData.id,
                                        isAdmin: eventData.viewerIsAdmin
                                      });
                          })
                      })
                ],
                className: props.className
              });
  }
}

var make = RsvpWaitlist;

export {
  Fragment ,
  make ,
}
/*  Not a pure module */

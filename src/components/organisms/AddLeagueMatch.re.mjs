// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Rating from "../../lib/Rating.re.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as CompMatch from "./CompMatch.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as SelectMatch from "./SelectMatch.re.mjs";
import * as SubmitMatch from "./SubmitMatch.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as Core from "@linaria/core";
import * as EventRsvpUser from "./EventRsvpUser.re.mjs";
import * as FramerMotion from "framer-motion";
import * as JsxRuntime from "react/jsx-runtime";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as AddLeagueMatch_event_graphql from "../../__generated__/AddLeagueMatch_event_graphql.re.mjs";
import * as AddLeagueMatchRsvpsRefetchQuery_graphql from "../../__generated__/AddLeagueMatchRsvpsRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = AddLeagueMatch_event_graphql.Utils.getConnectionNodes;

var convertFragment = AddLeagueMatch_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(AddLeagueMatch_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, AddLeagueMatch_event_graphql.node, convertFragment);
}

var makeRefetchVariables = AddLeagueMatchRsvpsRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = AddLeagueMatchRsvpsRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(AddLeagueMatch_event_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var sessionContext = AppContext.SessionContext;

function rsvpToPlayer(rsvp) {
  var match = Core__Option.map(rsvp.user, (function (u) {
          return u.id;
        }));
  var match$1 = rsvp.rating;
  if (match === undefined) {
    return ;
  }
  var rating;
  if (match$1 !== undefined) {
    var mu = match$1.mu;
    if (mu !== undefined) {
      var sigma = match$1.sigma;
      rating = sigma !== undefined ? Rating.Rating.make(mu, sigma) : Rating.Rating.makeDefault();
    } else {
      rating = Rating.Rating.makeDefault();
    }
  } else {
    rating = Rating.Rating.makeDefault();
  }
  return {
          data: rsvp,
          id: match,
          name: Core__Option.getOr(Core__Option.flatMap(rsvp.user, (function (u) {
                      return u.lineUsername;
                    })), ""),
          rating: rating,
          ratingOrdinal: Rating.Rating.ordinal(rating)
        };
}

function make() {
  return {
          count: 0
        };
}

var PlayerState = {
  make: make
};

function make$1() {
  return {};
}

function get(session, id) {
  return Core__Option.getOr(Js_dict.get(session, id), {
              count: 0
            });
}

function update(session, id, f) {
  var session$1 = Js_dict.fromArray(Js_dict.entries(session));
  var match = Core__Option.map(Js_dict.get(session$1, id), (function (state) {
          session$1[id] = f(state);
        }));
  if (match !== undefined) {
    
  } else {
    session$1[id] = f({
          count: 0
        });
  }
  return session$1;
}

var Session = {
  make: make$1,
  get: get,
  update: update
};

function AddLeagueMatch$SelectPlayersList(props) {
  var onClick = props.onClick;
  var session = props.session;
  var playing = props.playing;
  var selected = props.selected;
  var match = React.useState(function () {
        return "Rating";
      });
  var setSort = match[1];
  var sort = match[0];
  var players = props.players.toSorted(function (a, b) {
        if (sort === "Rating") {
          if (a.ratingOrdinal < b.ratingOrdinal) {
            return 1;
          } else {
            return -1;
          }
        } else if (get(session, a.id).count < get(session, b.id).count) {
          return -1;
        } else {
          return 1;
        }
      });
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("table", {
                    children: [
                      JsxRuntime.jsxs("colgroup", {
                            children: [
                              JsxRuntime.jsx("col", {
                                    className: "w-full sm:w-4/12"
                                  }),
                              JsxRuntime.jsx("col", {
                                    className: "lg:w-4/12"
                                  }),
                              JsxRuntime.jsx("col", {
                                    className: "lg:w-2/12"
                                  }),
                              JsxRuntime.jsx("col", {
                                    className: "lg:w-1/12"
                                  }),
                              JsxRuntime.jsx("col", {
                                    className: "lg:w-1/12"
                                  })
                            ]
                          }),
                      JsxRuntime.jsx("thead", {
                            children: JsxRuntime.jsxs("tr", {
                                  children: [
                                    JsxRuntime.jsx("th", {
                                          children: JsxRuntime.jsxs(UiAction.make, {
                                                onClick: (function () {
                                                    setSort(function (param) {
                                                          return "Rating";
                                                        });
                                                  }),
                                                className: "group inline-flex",
                                                children: [
                                                  t`Player`,
                                                  sort === "Rating" ? JsxRuntime.jsx("span", {
                                                          children: JsxRuntime.jsx(Solid.ChevronDownIcon, {
                                                                className: "w-5 h-5"
                                                              }),
                                                          className: "ml-2 flex-none rounded bg-gray-100 text-gray-900 group-hover:bg-gray-200"
                                                        }) : null
                                                ]
                                              }),
                                          className: "py-2 pl-4 pr-8 font-semibold sm:pl-6 lg:pl-8",
                                          scope: "col"
                                        }),
                                    JsxRuntime.jsx("th", {
                                          children: JsxRuntime.jsxs(UiAction.make, {
                                                onClick: (function () {
                                                    setSort(function (param) {
                                                          return "MatchCount";
                                                        });
                                                  }),
                                                className: "group inline-flex",
                                                children: [
                                                  t`Match Count`,
                                                  sort === "MatchCount" ? JsxRuntime.jsx("span", {
                                                          children: JsxRuntime.jsx(Solid.ChevronUpIcon, {
                                                                className: "w-5 h-5"
                                                              }),
                                                          className: "ml-2 flex-none rounded bg-gray-100 text-gray-900 group-hover:bg-gray-200"
                                                        }) : null
                                                ]
                                              }),
                                          className: "py-2 pl-0 pr-4 text-right font-semibold table-cell sm:pr-6 lg:pr-8",
                                          scope: "col"
                                        })
                                  ]
                                }),
                            className: "border-b border-black/10 text-sm leading-6 text-black"
                          }),
                      JsxRuntime.jsx("tbody", {
                            children: players.length !== 0 ? players.map(function (player) {
                                    return Core__Option.getOr(Core__Option.map(player.data.user, (function (user) {
                                                      return JsxRuntime.jsxs(FramerMotion.motion.tr, {
                                                                  style: {
                                                                    originX: 0.05,
                                                                    originY: 0.05
                                                                  },
                                                                  animate: {
                                                                    opacity: 1,
                                                                    scale: 1
                                                                  },
                                                                  initial: {
                                                                    opacity: 0,
                                                                    scale: 1.15
                                                                  },
                                                                  exit: {
                                                                    opacity: 0,
                                                                    scale: 1.15
                                                                  },
                                                                  layout: true,
                                                                  children: [
                                                                    JsxRuntime.jsx("td", {
                                                                          children: JsxRuntime.jsx("div", {
                                                                                children: JsxRuntime.jsx("div", {
                                                                                      children: JsxRuntime.jsx(UiAction.make, {
                                                                                            onClick: (function () {
                                                                                                onClick(player);
                                                                                              }),
                                                                                            children: JsxRuntime.jsx(EventRsvpUser.make, {
                                                                                                  user: user.fragmentRefs
                                                                                                })
                                                                                          }),
                                                                                      className: Core.cx("text-sm w-full font-medium leading-6 text-gray-900", selected.indexOf(player.id) === -1 ? "opacity-50" : "")
                                                                                    }),
                                                                                className: "flex items-center gap-x-4"
                                                                              }),
                                                                          className: "py-2 pl-0 pr-8"
                                                                        }),
                                                                    JsxRuntime.jsx("td", {
                                                                          children: JsxRuntime.jsxs("div", {
                                                                                children: [
                                                                                  JsxRuntime.jsx("div", {
                                                                                        children: JsxRuntime.jsx("div", {
                                                                                              className: "h-1.5 w-1.5 rounded-full bg-current"
                                                                                            }),
                                                                                        className: Core.cx(playing.has(player.id) ? "text-green-400 bg-green-400/10" : "hidden", "flex-none rounded-full p-1")
                                                                                      }),
                                                                                  get(session, player.id).count.toString(undefined)
                                                                                ],
                                                                                className: "flex items-center justify-end gap-x-2"
                                                                              }),
                                                                          className: "py-2 pl-0 pr-4 text-right text-sm leading-6 text-gray-400 table-cell sm:pr-6 lg:pr-8"
                                                                        })
                                                                  ]
                                                                }, user.id);
                                                    })), null);
                                  }) : t`no players yet`,
                            className: "divide-y divide-black/5"
                          })
                    ],
                    className: "mt-6 w-full whitespace-nowrap text-left"
                  }),
              className: "bg-gray-100"
            });
}

var SelectPlayersList = {
  make: AddLeagueMatch$SelectPlayersList
};

function AddLeagueMatch(props) {
  var $$event = props.event;
  var match = use($$event);
  var activity = match.activity;
  var match$1 = React.useState(function () {
        
      });
  var setSelectedMatch = match$1[1];
  var selectedMatch = match$1[0];
  var match$2 = React.useState(function () {
        return [];
      });
  var setMatches = match$2[1];
  var matches = match$2[0];
  var match$3 = React.useState(function () {
        return false;
      });
  var setManualTeamOpen = match$3[1];
  var match$4 = React.useState(function () {
        return new Set();
      });
  var setActivePlayers2 = match$4[1];
  var activePlayers2 = match$4[0];
  var match$5 = React.useState(function () {
        return {};
      });
  var setSessionState = match$5[1];
  var sessionState = match$5[0];
  var match$6 = usePagination($$event);
  var players = Core__Array.filterMap(getConnectionNodes(match$6.data.rsvps), rsvpToPlayer);
  var activePlayers = players.filter(function (p) {
        return activePlayers2.has(p.id);
      });
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (next.rating.mu > acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (next.rating.mu < acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var maxCount = Core__Array.reduce(players, 0, (function (acc, next) {
          var count = get(sessionState, next.id).count;
          if (count > acc) {
            return count;
          } else {
            return acc;
          }
        }));
  var minCount = Core__Array.reduce(players, 0, (function (acc, next) {
          var count = get(sessionState, next.id).count;
          if (count < acc) {
            return count;
          } else {
            return acc;
          }
        }));
  var priorityPlayers = Core__Array.reduce(activePlayers, [], (function (acc, next) {
          var count = get(sessionState, next.id).count;
          if (minCount !== maxCount && count === minCount) {
            return acc.concat([next]);
          } else {
            return acc;
          }
        }));
  var dequeueMatch = function (index) {
    var matches$1 = matches.filter(function (param, i) {
          return i !== index;
        });
    setMatches(function (param) {
          return matches$1;
        });
  };
  var consumedPlayers = new Set(matches.flatMap(function (match) {
            return match[0].concat(match[1]).map(function (p) {
                        return p.id;
                      });
          }));
  var updatePlayCounts = function (match) {
    setSessionState(function (prevState) {
          return Core__Array.reduce([
                        match[0],
                        match[1]
                      ].flatMap(function (x) {
                          return x;
                        }), prevState, (function (state, p) {
                        return update(state, p.id, (function (prev) {
                                      return {
                                              count: prev.count + 1 | 0
                                            };
                                    }));
                      }));
        });
  };
  return JsxRuntime.jsx(JsxRuntime.Fragment, {
              children: Caml_option.some(JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("h2", {
                                                children: t`Players`,
                                                className: "text-2xl font-semibold text-gray-900"
                                              }),
                                          JsxRuntime.jsx(UiAction.make, {
                                                onClick: (function () {
                                                    setActivePlayers2(function (param) {
                                                          return new Set(players.map(function (p) {
                                                                          return p.id;
                                                                        }));
                                                        });
                                                  }),
                                                children: t`select all`
                                              }),
                                          JsxRuntime.jsx(AddLeagueMatch$SelectPlayersList, {
                                                players: players,
                                                selected: activePlayers.map(function (p) {
                                                      return p.id;
                                                    }),
                                                playing: consumedPlayers,
                                                session: sessionState,
                                                onClick: (function (player) {
                                                    setActivePlayers2(function (ps) {
                                                          var newSet = new Set();
                                                          ps.forEach(function (id) {
                                                                newSet.add(id);
                                                              });
                                                          if (ps.has(player.id)) {
                                                            newSet.delete(player.id);
                                                          } else {
                                                            newSet.add(player.id);
                                                          }
                                                          return newSet;
                                                        });
                                                  })
                                              })
                                        ],
                                        className: ""
                                      }),
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("h2", {
                                                children: t`Matchmaking`,
                                                className: "text-2xl font-semibold text-gray-900"
                                              }),
                                          JsxRuntime.jsx(CompMatch.make, {
                                                players: activePlayers,
                                                priorityPlayers: priorityPlayers,
                                                consumedPlayers: consumedPlayers,
                                                onSelectMatch: (function (match) {
                                                    var matches$1 = matches.concat([match]);
                                                    setMatches(function (param) {
                                                          return matches$1;
                                                        });
                                                  })
                                              })
                                        ],
                                        className: ""
                                      })
                                ],
                                className: "grid grid-cols-1 items-start gap-4 md:grid-cols-2 md:gap-8"
                              }),
                          JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx(UiAction.make, {
                                      onClick: (function () {
                                          setManualTeamOpen(function (prev) {
                                                return !prev;
                                              });
                                        }),
                                      children: t`manual team`
                                    }),
                                className: "col-span-1"
                              }),
                          match$3[0] ? JsxRuntime.jsx(SelectMatch.make, {
                                  players: activePlayers,
                                  onMatchSelected: (function (match) {
                                      setSelectedMatch(function (param) {
                                            return match;
                                          });
                                    })
                                }) : null,
                          JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx(React.Suspense, {
                                      children: Caml_option.some(Core__Option.getOr(Core__Option.flatMap(activity, (function (activity) {
                                                      return Core__Option.map(selectedMatch, (function (match) {
                                                                    return JsxRuntime.jsx(SubmitMatch.make, {
                                                                                match: match,
                                                                                activity: activity,
                                                                                minRating: minRating,
                                                                                maxRating: maxRating,
                                                                                onComplete: (function () {
                                                                                    updatePlayCounts(match);
                                                                                    setSelectedMatch(function (param) {
                                                                                          
                                                                                        });
                                                                                  }),
                                                                                onSubmitted: (function () {
                                                                                    updatePlayCounts(match);
                                                                                    setSelectedMatch(function (param) {
                                                                                          
                                                                                        });
                                                                                  })
                                                                              });
                                                                  }));
                                                    })), null)),
                                      fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                                children: t`Loading`
                                              }))
                                    }),
                                className: "grid grid-cols-1 gap-4"
                              }),
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("h2", {
                                        children: t`Match History`,
                                        className: "text-2xl font-semibold text-gray-900"
                                      }),
                                  props.children
                                ]
                              }),
                          JsxRuntime.jsxs("div", {
                                children: [
                                  t`queued matches`,
                                  JsxRuntime.jsx("div", {
                                        children: Core__Option.getOr(Core__Option.map(activity, (function (activity) {
                                                    return matches.map(function (match, i) {
                                                                return JsxRuntime.jsx(React.Suspense, {
                                                                            children: Caml_option.some(JsxRuntime.jsx(SubmitMatch.make, {
                                                                                      match: match,
                                                                                      activity: activity,
                                                                                      minRating: minRating,
                                                                                      maxRating: maxRating,
                                                                                      onDelete: (function () {
                                                                                          dequeueMatch(i);
                                                                                        }),
                                                                                      onComplete: (function () {
                                                                                          updatePlayCounts(match);
                                                                                          dequeueMatch(i);
                                                                                        }),
                                                                                      onSubmitted: (function () {
                                                                                          updatePlayCounts(match);
                                                                                          dequeueMatch(i);
                                                                                        })
                                                                                    })),
                                                                            fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                                                                      children: t`Loading`
                                                                                    }))
                                                                          });
                                                              });
                                                  })), null),
                                        className: "grid grid-cols-1 gap-4"
                                      })
                                ],
                                className: "grid grid-cols-1 gap-4"
                              })
                        ],
                        className: "grid grid-cols-1 items-start gap-4 md:grid-cols-1 md:gap-8"
                      }))
            });
}

var make$2 = AddLeagueMatch;

var $$default = AddLeagueMatch;

export {
  Fragment ,
  sessionContext ,
  rsvpToPlayer ,
  PlayerState ,
  Session ,
  SelectPlayersList ,
  make$2 as make,
  $$default as default,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Rating from "../../lib/Rating.re.mjs";
import * as Session from "../../lib/Session.re.mjs";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as CompMatch from "./CompMatch.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as SelectMatch from "./SelectMatch.re.mjs";
import * as SubmitMatch from "./SubmitMatch.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as SessionAddPlayer from "./SessionAddPlayer.re.mjs";
import * as React$1 from "@headlessui/react";
import * as SelectPlayersList from "./SelectPlayersList.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as SessionEvenPlayMode from "./SessionEvenPlayMode.re.mjs";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as Outline from "@heroicons/react/24/outline";
import * as AddLeagueMatch_event_graphql from "../../__generated__/AddLeagueMatch_event_graphql.re.mjs";
import * as AddLeagueMatchRsvpsRefetchQuery_graphql from "../../__generated__/AddLeagueMatchRsvpsRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = AddLeagueMatch_event_graphql.Utils.getConnectionNodes;

var convertFragment = AddLeagueMatch_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(AddLeagueMatch_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, AddLeagueMatch_event_graphql.node, convertFragment);
}

var makeRefetchVariables = AddLeagueMatchRsvpsRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = AddLeagueMatchRsvpsRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(AddLeagueMatch_event_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var sessionContext = AppContext.SessionContext;

function getPriorityPlayers(players, session, $$break) {
  var maxCount = Core__Array.reduce(players, 0, (function (acc, next) {
          var count = Session.get(session, next.id).count;
          if (count > acc) {
            return count;
          } else {
            return acc;
          }
        }));
  var minCount = Core__Array.reduce(players, maxCount, (function (acc, next) {
          var count = Session.get(session, next.id).count;
          if (count < acc) {
            return count;
          } else {
            return acc;
          }
        }));
  return {
          prioritized: Core__Array.reduce(players, [], (function (acc, next) {
                  var count = Session.get(session, next.id).count;
                  if (minCount !== maxCount && count === minCount) {
                    return acc.concat([next]);
                  } else {
                    return acc;
                  }
                })),
          deprioritized: new Set(Rating.Players.sortByPlayCountDesc(players, session).slice(0, $$break).map(function (p) {
                    return p.id;
                  }))
        };
}

function rsvpToPlayer(rsvp) {
  var match = Core__Option.map(rsvp.user, (function (u) {
          return u.id;
        }));
  var match$1 = rsvp.rating;
  if (match === undefined) {
    return ;
  }
  var rating;
  if (match$1 !== undefined) {
    var mu = match$1.mu;
    if (mu !== undefined) {
      var sigma = match$1.sigma;
      rating = sigma !== undefined ? Rating.Rating.make(mu, sigma) : Rating.Rating.makeDefault();
    } else {
      rating = Rating.Rating.makeDefault();
    }
  } else {
    rating = Rating.Rating.makeDefault();
  }
  return {
          data: rsvp,
          id: match,
          name: Core__Option.getOr(Core__Option.flatMap(rsvp.user, (function (u) {
                      return u.lineUsername;
                    })), ""),
          rating: rating,
          ratingOrdinal: Rating.Rating.ordinal(rating)
        };
}

function rsvpToPlayerDefault(rsvp) {
  var match = Core__Option.map(rsvp.user, (function (u) {
          return u.id;
        }));
  if (match === undefined) {
    return ;
  }
  var rating = Rating.Rating.makeDefault();
  return {
          data: rsvp,
          id: match,
          name: Core__Option.getOr(Core__Option.flatMap(rsvp.user, (function (u) {
                      return u.lineUsername;
                    })), ""),
          rating: rating,
          ratingOrdinal: Rating.Rating.ordinal(rating)
        };
}

function addGuestPlayer(sessionPlayers, player) {
  return sessionPlayers.concat([player]);
}

function removeGuestPlayer(sessionPlayers, player) {
  return sessionPlayers.filter(function (p) {
              return p.id !== player.id;
            });
}

function AddLeagueMatch(props) {
  var $$event = props.event;
  var match = use($$event);
  var activity = match.activity;
  var match$1 = React.useState(function () {
        return [];
      });
  var setMatches = match$1[1];
  var matches = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setManualTeamOpen = match$2[1];
  var match$3 = React.useState(function () {
        return false;
      });
  var setAddPlayerOpen = match$3[1];
  var addPlayerOpen = match$3[0];
  var match$4 = React.useState(function () {
        return false;
      });
  var setSettingsOpen = match$4[1];
  var settingsOpen = match$4[0];
  var match$5 = React.useState(function () {
        return new Set();
      });
  var setActivePlayers2 = match$5[1];
  var activePlayers2 = match$5[0];
  var match$6 = React.useState(function () {
        return Session.make();
      });
  var setSessionState = match$6[1];
  var sessionState = match$6[0];
  var match$7 = React.useState(function () {
        return [];
      });
  var setSessionPlayers = match$7[1];
  var sessionPlayers = match$7[0];
  var match$8 = React.useState(function () {
        return false;
      });
  var setSessionMode = match$8[1];
  var sessionMode = match$8[0];
  var match$9 = React.useState(function () {
        return 0;
      });
  var setBreakCount = match$9[1];
  var breakCount = match$9[0];
  var match$10 = usePagination($$event);
  var data = match$10.data;
  var players = sessionMode ? sessionPlayers : Core__Array.filterMap(getConnectionNodes(data.rsvps), rsvpToPlayer).concat(sessionPlayers);
  var activePlayers = players.filter(function (p) {
        return activePlayers2.has(p.id);
      });
  var consumedPlayers = new Set(matches.flatMap(function (match) {
            return match[0].concat(match[1]).map(function (p) {
                        return p.id;
                      });
          }));
  var availablePlayers = activePlayers.filter(function (p) {
        return !consumedPlayers.has(p.id);
      });
  var match$11 = getPriorityPlayers(availablePlayers, sessionState, breakCount);
  var deprioritized = match$11.deprioritized;
  var breakPlayersCount = availablePlayers.length;
  var availablePlayers$1 = availablePlayers.filter(function (p) {
        return !deprioritized.has(p.id);
      });
  var incompatiblePlayers = new Set([
        "User_7e5631a2-53a9-11ef-b5a9-2b281b5a76b0",
        "User_55448d42-0843-11ef-8202-7b71b4052443"
      ]);
  var avoidAllPlayers = availablePlayers$1.filter(function (p) {
        return incompatiblePlayers.has(p.id);
      });
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (next.rating.mu > acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (next.rating.mu < acc) {
            return next.rating.mu;
          } else {
            return acc;
          }
        }));
  var queueMatch = function (match) {
    var matches$1 = matches.concat([match]);
    setMatches(function (param) {
          return matches$1;
        });
  };
  var dequeueMatch = function (index) {
    var matches$1 = matches.filter(function (param, i) {
          return i !== index;
        });
    setMatches(function (param) {
          return matches$1;
        });
  };
  var updatePlayCounts = function (match) {
    setSessionState(function (prevState) {
          return Core__Array.reduce([
                        match[0],
                        match[1]
                      ].flatMap(function (x) {
                          return x;
                        }), prevState, (function (state, p) {
                        return Session.update(state, p.id, (function (prev) {
                                      return {
                                              count: prev.count + 1 | 0
                                            };
                                    }));
                      }));
        });
  };
  var initializeSessionMode = function () {
    var players = Core__Array.filterMap(getConnectionNodes(data.rsvps), rsvpToPlayerDefault).concat(sessionPlayers);
    setSessionPlayers(function (param) {
          return players;
        });
  };
  var uninitializeSessionMode = function () {
    setSessionPlayers(function (param) {
          return players.filter(function (p) {
                      return Core__Option.isNone(p.data);
                    });
        });
  };
  var updateSessionPlayerRatings = function (updatedPlayers) {
    setSessionPlayers(function (players) {
          return players.map(function (p) {
                      var player = updatedPlayers.find(function (p$p) {
                            return p.id === p$p.id;
                          });
                      if (player !== undefined) {
                        return player;
                      } else {
                        return p;
                      }
                    });
        });
  };
  return JsxRuntime.jsx(JsxRuntime.Fragment, {
              children: Caml_option.some(JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("div", {
                                        children: JsxRuntime.jsxs(React$1.Field, {
                                              className: "flex items-center",
                                              children: [
                                                JsxRuntime.jsxs(React$1.Switch, {
                                                      className: "group relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent bg-gray-200 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-offset-2 data-[checked]:bg-indigo-600",
                                                      children: [
                                                        JsxRuntime.jsx("span", {
                                                              children: t`Tournament Mode`,
                                                              className: "sr-only"
                                                            }),
                                                        JsxRuntime.jsx("span", {
                                                              "aria-hidden": true,
                                                              className: "pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out group-data-[checked]:translate-x-5"
                                                            })
                                                      ],
                                                      checked: sessionMode,
                                                      onChange: (function (v) {
                                                          setSessionMode(function (param) {
                                                                return v;
                                                              });
                                                          if (v === true) {
                                                            return initializeSessionMode();
                                                          } else {
                                                            return uninitializeSessionMode();
                                                          }
                                                        })
                                                    }),
                                                JsxRuntime.jsx(React$1.Switch.Label, {
                                                      className: "ml-3 text-sm",
                                                      children: t`Tournament Mode`
                                                    })
                                              ]
                                            }),
                                        className: "md:col-span-2"
                                      }),
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("h2", {
                                                children: t`Players`,
                                                className: "text-2xl font-semibold text-gray-900"
                                              }),
                                          JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx(UiAction.make, {
                                                        onClick: (function () {
                                                            setActivePlayers2(function (param) {
                                                                  return new Set(players.map(function (p) {
                                                                                  return p.id;
                                                                                }));
                                                                });
                                                          }),
                                                        children: t`select all`
                                                      }),
                                                  JsxRuntime.jsx(UiAction.make, {
                                                        onClick: (function () {
                                                            setAddPlayerOpen(function (prev) {
                                                                  return !prev;
                                                                });
                                                          }),
                                                        className: "ml-auto",
                                                        children: addPlayerOpen ? JsxRuntime.jsx(Solid.UserPlusIcon, {
                                                                className: "h-8 w-8"
                                                              }) : JsxRuntime.jsx(Outline.UserPlusIcon, {
                                                                className: "h-8 w-8"
                                                              })
                                                      }),
                                                  JsxRuntime.jsx(UiAction.make, {
                                                        onClick: (function () {
                                                            setSettingsOpen(function (prev) {
                                                                  return !prev;
                                                                });
                                                          }),
                                                        className: "mr-2",
                                                        children: settingsOpen ? JsxRuntime.jsx(Solid.Cog6ToothIcon, {
                                                                className: "h-8 w-8"
                                                              }) : JsxRuntime.jsx(Outline.Cog6ToothIcon, {
                                                                className: "h-8 w-8"
                                                              })
                                                      })
                                                ],
                                                className: "flex text-right"
                                              }),
                                          addPlayerOpen ? JsxRuntime.jsx(SessionAddPlayer.make, {
                                                  eventId: match.id,
                                                  onPlayerAdd: (function (player) {
                                                      setSessionPlayers(function (guests) {
                                                            var player$1 = SessionAddPlayer.toRatingPlayer(player);
                                                            return guests.concat([player$1]);
                                                          });
                                                      setAddPlayerOpen(function (param) {
                                                            return false;
                                                          });
                                                    })
                                                }) : null,
                                          settingsOpen ? JsxRuntime.jsx(SessionEvenPlayMode.make, {
                                                  breakCount: breakCount,
                                                  breakPlayersCount: breakPlayersCount,
                                                  onChangeBreakCount: (function (numberOnBreak) {
                                                      setBreakCount(function (param) {
                                                            return numberOnBreak;
                                                          });
                                                      setSettingsOpen(function (param) {
                                                            return false;
                                                          });
                                                    })
                                                }) : null,
                                          JsxRuntime.jsx(SelectPlayersList.make, {
                                                players: players,
                                                selected: activePlayers.map(function (p) {
                                                      return p.id;
                                                    }),
                                                playing: consumedPlayers,
                                                session: sessionState,
                                                onClick: (function (player) {
                                                    setActivePlayers2(function (ps) {
                                                          var newSet = new Set();
                                                          ps.forEach(function (id) {
                                                                newSet.add(id);
                                                              });
                                                          if (ps.has(player.id)) {
                                                            newSet.delete(player.id);
                                                          } else {
                                                            newSet.add(player.id);
                                                          }
                                                          return newSet;
                                                        });
                                                  }),
                                                onRemove: (function (player) {
                                                    setSessionPlayers(function (guests) {
                                                          return removeGuestPlayer(guests, player);
                                                        });
                                                  })
                                              })
                                        ],
                                        className: ""
                                      }),
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("h2", {
                                                children: t`Matchmaking`,
                                                className: "text-2xl font-semibold text-gray-900"
                                              }),
                                          JsxRuntime.jsx(CompMatch.make, {
                                                players: activePlayers,
                                                consumedPlayers: new Set(Array.from(consumedPlayers.values()).concat(Array.from(deprioritized.values()))),
                                                priorityPlayers: match$11.prioritized,
                                                avoidAllPlayers: avoidAllPlayers,
                                                onSelectMatch: (function (match) {
                                                    queueMatch(match);
                                                  })
                                              })
                                        ],
                                        className: ""
                                      })
                                ],
                                className: "grid grid-cols-1 items-start gap-4 md:grid-cols-2 md:gap-8"
                              }),
                          JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx(UiAction.make, {
                                      onClick: (function () {
                                          setManualTeamOpen(function (prev) {
                                                return !prev;
                                              });
                                        }),
                                      children: t`manual team`
                                    }),
                                className: "col-span-1"
                              }),
                          match$2[0] ? JsxRuntime.jsx(SelectMatch.make, {
                                  players: activePlayers,
                                  activity: activity,
                                  onMatchQueued: (function (match) {
                                      queueMatch(match);
                                    }),
                                  onMatchCompleted: (function (match) {
                                      updatePlayCounts(match);
                                      var match$1 = Rating.Match.rate(match);
                                      updateSessionPlayerRatings(match$1.flatMap(function (x) {
                                                return x;
                                              }));
                                    })
                                }) : null,
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("h2", {
                                        children: t`Match History`,
                                        className: "text-2xl font-semibold text-gray-900"
                                      }),
                                  props.children
                                ]
                              }),
                          JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("h2", {
                                        children: t`Queued Matches`,
                                        className: "text-2xl font-semibold text-gray-900"
                                      }),
                                  JsxRuntime.jsx("div", {
                                        children: Core__Option.getOr(Core__Option.map(activity, (function (activity) {
                                                    return matches.map(function (match, i) {
                                                                return JsxRuntime.jsx(SubmitMatch.make, {
                                                                            match: match,
                                                                            activity: activity,
                                                                            minRating: minRating,
                                                                            maxRating: maxRating,
                                                                            onDelete: (function () {
                                                                                dequeueMatch(i);
                                                                              }),
                                                                            onComplete: (function (match) {
                                                                                updatePlayCounts(match);
                                                                                dequeueMatch(i);
                                                                                var match$1 = Rating.Match.rate(match);
                                                                                updateSessionPlayerRatings(match$1.flatMap(function (x) {
                                                                                          return x;
                                                                                        }));
                                                                              })
                                                                          }, i.toString());
                                                              });
                                                  })), null),
                                        className: "grid grid-cols-1 gap-4"
                                      })
                                ],
                                className: "grid grid-cols-1 gap-4"
                              })
                        ],
                        className: "grid grid-cols-1 items-start gap-4 md:grid-cols-1 md:gap-8"
                      }))
            });
}

var make = AddLeagueMatch;

var $$default = AddLeagueMatch;

export {
  Fragment ,
  sessionContext ,
  getPriorityPlayers ,
  rsvpToPlayer ,
  rsvpToPlayerDefault ,
  addGuestPlayer ,
  removeGuestPlayer ,
  make ,
  $$default as default,
}
/*  Not a pure module */

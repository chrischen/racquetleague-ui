// Generated by ReScript, PLEASE EDIT WITH CARE

import Zod from "zod";
import * as Form from "../molecules/forms/Form.re.mjs";
import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Layout from "../shared/Layout.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.re.mjs";
import * as GlobalQuery from "../shared/GlobalQuery.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as EventRsvpUser from "./EventRsvpUser.re.mjs";
import * as FramerMotion from "framer-motion";
import * as RelayRuntime from "relay-runtime";
import * as ReactHookForm from "react-hook-form";
import * as ReactExperimental from "rescript-relay/src/ReactExperimental.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as Zod$1 from "@hookform/resolvers/zod";
import * as AddLeagueMatch_event_graphql from "../../__generated__/AddLeagueMatch_event_graphql.re.mjs";
import * as AddLeagueMatchMutation_graphql from "../../__generated__/AddLeagueMatchMutation_graphql.re.mjs";
import * as LeagueEventRsvpsRefetchQuery_graphql from "../../__generated__/LeagueEventRsvpsRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = AddLeagueMatch_event_graphql.Utils.getConnectionNodes;

var convertFragment = AddLeagueMatch_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(AddLeagueMatch_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, AddLeagueMatch_event_graphql.node, convertFragment);
}

var makeRefetchVariables = LeagueEventRsvpsRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = LeagueEventRsvpsRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(AddLeagueMatch_event_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var convertVariables = AddLeagueMatchMutation_graphql.Internal.convertVariables;

var convertResponse = AddLeagueMatchMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = AddLeagueMatchMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, AddLeagueMatchMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables, AddLeagueMatchMutation_graphql.node, convertResponse, convertWrapRawResponse);

var CreateLeagueMatchMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use$1
};

function AddLeagueMatch$SelectEventPlayersList(props) {
  var onSelectPlayer = props.onSelectPlayer;
  var selected = props.selected;
  var match = ReactExperimental.useTransition();
  var startTransition = match[1];
  var match$1 = usePagination(props.event);
  var loadNext = match$1.loadNext;
  var players = getConnectionNodes(match$1.data.rsvps);
  var onLoadMore = function (param) {
    startTransition(function () {
          loadNext(1, undefined);
        });
  };
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (Core__Option.getOr(next.rating, 0) > acc) {
            return Core__Option.getOr(next.rating, 0);
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (Core__Option.getOr(next.rating, maxRating) < acc) {
            return Core__Option.getOr(next.rating, maxRating);
          } else {
            return acc;
          }
        }));
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsxs(JsxRuntime.Fragment, {
                          children: [
                            JsxRuntime.jsx("ul", {
                                  children: JsxRuntime.jsx(FramerMotion.AnimatePresence, {
                                        children: players.length !== 0 ? players.toSorted(function (a, b) {
                                                  var userA = Core__Option.getOr(Core__Option.map(a.rating, (function (r) {
                                                              return r;
                                                            })), 0);
                                                  var userB = Core__Option.getOr(Core__Option.map(b.rating, (function (r) {
                                                              return r;
                                                            })), 0);
                                                  if (userA < userB) {
                                                    return 1;
                                                  } else {
                                                    return -1;
                                                  }
                                                }).map(function (edge, i) {
                                                return Core__Option.getOr(Core__Option.map(edge.user, (function (user) {
                                                                  return JsxRuntime.jsxs(FramerMotion.motion.li, {
                                                                              className: "mt-4 flex w-full flex-none gap-x-4 px-6",
                                                                              style: {
                                                                                originX: 0.05,
                                                                                originY: 0.05
                                                                              },
                                                                              animate: {
                                                                                opacity: 1,
                                                                                scale: 1
                                                                              },
                                                                              initial: {
                                                                                opacity: 0,
                                                                                scale: 1.15
                                                                              },
                                                                              exit: {
                                                                                opacity: 0,
                                                                                scale: 1.15
                                                                              },
                                                                              children: [
                                                                                JsxRuntime.jsx("div", {
                                                                                      children: JsxRuntime.jsx("span", {
                                                                                            children: t`Player`,
                                                                                            className: "sr-only"
                                                                                          }),
                                                                                      className: "flex-none"
                                                                                    }),
                                                                                JsxRuntime.jsx("div", {
                                                                                      children: JsxRuntime.jsx("a", {
                                                                                            children: JsxRuntime.jsx(EventRsvpUser.make, {
                                                                                                  user: user.fragmentRefs,
                                                                                                  highlight: selected.findIndex(function (id) {
                                                                                                        return id === user.id;
                                                                                                      }) >= 0,
                                                                                                  link: false,
                                                                                                  ratingPercent: Core__Option.getOr(Core__Option.map(edge.rating, (function (rating) {
                                                                                                              return (rating - minRating) / (maxRating - minRating) * 100;
                                                                                                            })), 0)
                                                                                                }),
                                                                                            href: "#",
                                                                                            onClick: (function (e) {
                                                                                                e.preventDefault();
                                                                                                Core__Option.map(onSelectPlayer, (function (f) {
                                                                                                        f(user.id);
                                                                                                      }));
                                                                                              })
                                                                                          }),
                                                                                      className: "text-sm w-full font-medium leading-6 text-gray-900"
                                                                                    })
                                                                              ]
                                                                            }, user.id);
                                                                })), null);
                                              }) : t`no players yet`
                                      }),
                                  className: "w-full"
                                }),
                            JsxRuntime.jsx("em", {
                                  children: match$1.isLoadingNext ? "..." : (
                                      match$1.hasNext ? JsxRuntime.jsx("a", {
                                              children: t`load More`,
                                              onClick: onLoadMore
                                            }) : null
                                    )
                                })
                          ]
                        }),
                    className: "mt-4 flex w-full flex-none gap-x-4 border-t border-gray-900/5 px-6 py-4"
                  }),
              className: "rounded-lg bg-gray-50 shadow-sm ring-1 ring-gray-900/5"
            });
}

var SelectEventPlayersList = {
  make: AddLeagueMatch$SelectEventPlayersList
};

var sessionContext = AppContext.SessionContext;

var ControllerOfInputsMatch = {};

var schema = Zod.object({
      scoreWinner: Zod.number({}).gte(0),
      scoreLoser: Zod.number({}).gte(0)
    });

function AddLeagueMatch(props) {
  var $$event = props.event;
  var match = use($$event);
  var activity = match.activity;
  var match$1 = ReactHookForm.useForm({
        resolver: Caml_option.some(Zod$1.zodResolver(schema)),
        defaultValues: {}
      });
  var setValue = match$1.setValue;
  var register = match$1.register;
  var match$2 = use$1();
  var commitMutationCreateLeagueMatch = match$2[0];
  var match$3 = React.useState(function () {
        return [];
      });
  var setWinningPlayers = match$3[1];
  var winningPlayers = match$3[0];
  var match$4 = React.useState(function () {
        return [];
      });
  var setLosingPlayers = match$4[1];
  var losingPlayers = match$4[0];
  GlobalQuery.useViewer();
  var onSelectWinningPlayer = function (playerId) {
    setWinningPlayers(function (players) {
          var len = players.length;
          if (len >= 3) {
            return [playerId];
          }
          switch (len) {
            case 0 :
                return [playerId];
            case 1 :
                var p1 = players[0];
                return [
                        p1,
                        playerId
                      ];
            case 2 :
                var p2 = players[1];
                return [
                        p2,
                        playerId
                      ];
            
          }
        });
  };
  var onSelectLosingPlayer = function (playerId) {
    setLosingPlayers(function (players) {
          var len = players.length;
          if (len >= 3) {
            return [playerId];
          }
          switch (len) {
            case 0 :
                return [playerId];
            case 1 :
                var p1 = players[0];
                return [
                        p1,
                        playerId
                      ];
            case 2 :
                var p2 = players[1];
                return [
                        p2,
                        playerId
                      ];
            
          }
        });
  };
  var onSubmit = function (data) {
    console.log(data);
    Core__Option.flatMap(activity, (function (activity) {
            return Core__Option.map(activity.slug, (function (slug) {
                          var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("root", "MatchListFragment_matches", {
                                activitySlug: slug,
                                after: undefined,
                                before: undefined,
                                eventId: undefined,
                                first: undefined,
                                namespace: "doubles:rec"
                              });
                          commitMutationCreateLeagueMatch({
                                connections: [connectionId],
                                matchInput: {
                                  activitySlug: slug,
                                  doublesMatch: {
                                    createdAt: Util.Datetime.fromDate(new Date()),
                                    losers: losingPlayers,
                                    score: [
                                      data.scoreWinner,
                                      data.scoreLoser
                                    ],
                                    winners: winningPlayers
                                  },
                                  namespace: "doubles:rec"
                                }
                              }, undefined, undefined, undefined, undefined, undefined, undefined);
                          setValue("scoreWinner", 0, undefined);
                          setValue("scoreLoser", 0, undefined);
                        }));
          }));
  };
  return JsxRuntime.jsx(Layout.Container.make, {
              children: JsxRuntime.jsx("form", {
                    children: JsxRuntime.jsxs("div", {
                          children: [
                            JsxRuntime.jsxs("div", {
                                  children: [
                                    JsxRuntime.jsxs("section", {
                                          children: [
                                            JsxRuntime.jsx("h2", {
                                                  children: "Winners",
                                                  className: "sr-only",
                                                  id: "section-1-title"
                                                }),
                                            JsxRuntime.jsx("h2", {
                                                  children: t`Select Winners`
                                                }),
                                            JsxRuntime.jsx(AddLeagueMatch$SelectEventPlayersList, {
                                                  event: $$event,
                                                  selected: winningPlayers,
                                                  onSelectPlayer: onSelectWinningPlayer
                                                })
                                          ],
                                          "aria-labelledby": "section-1-title",
                                          className: "col-span-2"
                                        }),
                                    JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(Form.Input.make, {
                                                label: t`Winner Points`,
                                                className: "w-11 sm:w-24 md:w-32  flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 text-2xl sm:text-5xl sm:leading-6",
                                                id: "scoreWinner",
                                                type_: "number",
                                                register: register("scoreWinner", {
                                                      setValueAs: (function (v) {
                                                          console.log("Set value as");
                                                          console.log(v);
                                                          if (v === "") {
                                                            return 0;
                                                          } else {
                                                            return Core__Option.getOr(Core__Float.fromString(v), 1);
                                                          }
                                                        })
                                                    })
                                              }),
                                          className: "mx-auto col-span-2"
                                        })
                                  ],
                                  className: "grid grid-cols-1 gap-4 lg:col-span-2"
                                }),
                            JsxRuntime.jsxs("div", {
                                  children: [
                                    JsxRuntime.jsxs("section", {
                                          children: [
                                            JsxRuntime.jsx("h2", {
                                                  children: "Losers",
                                                  className: "sr-only",
                                                  id: "section-2-title"
                                                }),
                                            JsxRuntime.jsx("h2", {
                                                  children: t`Select Losers`
                                                }),
                                            JsxRuntime.jsx(AddLeagueMatch$SelectEventPlayersList, {
                                                  event: $$event,
                                                  selected: losingPlayers,
                                                  onSelectPlayer: onSelectLosingPlayer
                                                })
                                          ],
                                          "aria-labelledby": "section-2-title",
                                          className: "col-span-2"
                                        }),
                                    JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(Form.Input.make, {
                                                label: t`Loser Points`,
                                                className: "w-11 sm:w-24 md:w-32 block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 text-2xl sm:text-5xl sm:leading-6",
                                                id: "scoreLoser",
                                                type_: "number",
                                                register: register("scoreLoser", {
                                                      setValueAs: (function (v) {
                                                          if (v === "") {
                                                            return 0;
                                                          } else {
                                                            return Core__Option.getOr(Core__Float.fromString(v), 1);
                                                          }
                                                        })
                                                    })
                                              }),
                                          className: "mx-auto col-span-2"
                                        })
                                  ],
                                  className: "grid grid-cols-2 lg:col-span-2 gap-4"
                                }),
                            JsxRuntime.jsx("div", {
                                  children: JsxRuntime.jsx("input", {
                                        className: "mx-auto block text-3xl bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded",
                                        type: "submit",
                                        value: "Submit"
                                      }),
                                  className: "lg:col-span-4 gap-4"
                                })
                          ],
                          className: "grid grid-cols-1 items-start gap-4 lg:grid-cols-4 lg:gap-8"
                        }),
                    onSubmit: match$1.handleSubmit(onSubmit)
                  })
            });
}

var make = AddLeagueMatch;

var $$default = AddLeagueMatch;

export {
  Fragment ,
  CreateLeagueMatchMutation ,
  SelectEventPlayersList ,
  sessionContext ,
  ControllerOfInputsMatch ,
  schema ,
  make ,
  $$default as default,
}
/*  Not a pure module */

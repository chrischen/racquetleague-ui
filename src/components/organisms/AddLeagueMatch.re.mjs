// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Match from "./Match.re.mjs";
import * as React from "react";
import * as Layout from "../shared/Layout.re.mjs";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as SelectMatch from "./SelectMatch.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as ManagedSession from "./ManagedSession.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as AddLeagueMatch_event_graphql from "../../__generated__/AddLeagueMatch_event_graphql.re.mjs";
import * as AddLeagueMatchRsvpsRefetchQuery_graphql from "../../__generated__/AddLeagueMatchRsvpsRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = AddLeagueMatch_event_graphql.Utils.getConnectionNodes;

var convertFragment = AddLeagueMatch_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(AddLeagueMatch_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, AddLeagueMatch_event_graphql.node, convertFragment);
}

var makeRefetchVariables = AddLeagueMatchRsvpsRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = AddLeagueMatchRsvpsRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(AddLeagueMatch_event_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(AddLeagueMatch_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var sessionContext = AppContext.SessionContext;

function rsvpToPlayer(rsvp) {
  var match = Core__Option.map(rsvp.user, (function (u) {
          return u.id;
        }));
  var match$1 = rsvp.rating;
  if (match === undefined) {
    return ;
  }
  var tmp;
  if (match$1 !== undefined) {
    var mu = match$1.mu;
    if (mu !== undefined) {
      var sigma = match$1.sigma;
      tmp = sigma !== undefined ? ManagedSession.Rating.make(mu, sigma) : ManagedSession.Rating.makeDefault();
    } else {
      tmp = ManagedSession.Rating.makeDefault();
    }
  } else {
    tmp = ManagedSession.Rating.makeDefault();
  }
  return {
          data: rsvp,
          id: match,
          name: Core__Option.getOr(Core__Option.flatMap(rsvp.user, (function (u) {
                      return u.lineUsername;
                    })), ""),
          rating: tmp
        };
}

function AddLeagueMatch(props) {
  var $$event = props.event;
  var match = use($$event);
  var activity = match.activity;
  var match$1 = React.useState(function () {
        
      });
  var setSelectedMatch = match$1[1];
  var selectedMatch = match$1[0];
  var match$2 = React.useState(function () {
        return [];
      });
  var setMatches = match$2[1];
  var matches = match$2[0];
  var match$3 = React.useState(function () {
        return false;
      });
  var setManualTeamOpen = match$3[1];
  var match$4 = usePagination($$event);
  var players = getConnectionNodes(match$4.data.rsvps);
  var maxRating = Core__Array.reduce(players, 0, (function (acc, next) {
          if (Core__Option.getOr(Core__Option.flatMap(next.rating, (function (r) {
                        return r.mu;
                      })), 0) > acc) {
            return Core__Option.getOr(Core__Option.flatMap(next.rating, (function (r) {
                              return r.mu;
                            })), 0);
          } else {
            return acc;
          }
        }));
  var minRating = Core__Array.reduce(players, maxRating, (function (acc, next) {
          if (Core__Option.getOr(Core__Option.flatMap(next.rating, (function (r) {
                        return r.mu;
                      })), maxRating) < acc) {
            return Core__Option.getOr(Core__Option.flatMap(next.rating, (function (r) {
                              return r.mu;
                            })), maxRating);
          } else {
            return acc;
          }
        }));
  return JsxRuntime.jsxs(Layout.Container.make, {
              children: [
                JsxRuntime.jsx(ManagedSession.make, {
                      players: Core__Array.filterMap(players, (function (x) {
                              return rsvpToPlayer(x);
                            })),
                      consumedPlayers: new Set(matches.flatMap(function (match) {
                                return Core__Array.filterMap(match[0].concat(match[1]), (function (r) {
                                                return rsvpToPlayer(r);
                                              })).map(function (p) {
                                            return p.id;
                                          });
                              })),
                      onSelectMatch: (function (param) {
                          var match = param[1];
                          var match$1 = param[0];
                          var match$2 = [
                            [
                              match$1[0].data,
                              match$1[1].data
                            ],
                            [
                              match[0].data,
                              match[1].data
                            ]
                          ];
                          var matches$1 = matches.concat([match$2]);
                          setMatches(function (param) {
                                return matches$1;
                              });
                        })
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(UiAction.make, {
                                    onClick: (function () {
                                        setManualTeamOpen(function (prev) {
                                              return !prev;
                                            });
                                      }),
                                    children: t`manual team`
                                  }),
                              className: "col-span-1"
                            }),
                        match$3[0] ? JsxRuntime.jsx(SelectMatch.make, {
                                event: $$event,
                                onMatchSelected: (function (match) {
                                    setSelectedMatch(function (param) {
                                          return match;
                                        });
                                  })
                              }) : null,
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(React.Suspense, {
                                    children: Caml_option.some(Core__Option.getOr(Core__Option.flatMap(activity, (function (activity) {
                                                    return Core__Option.map(selectedMatch, (function (match) {
                                                                  return JsxRuntime.jsx(Match.make, {
                                                                              match: match,
                                                                              activity: activity,
                                                                              minRating: minRating,
                                                                              maxRating: maxRating
                                                                            });
                                                                }));
                                                  })), null)),
                                    fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                              children: t`Loading`
                                            }))
                                  }),
                              className: "grid grid-cols-1 gap-4"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                t`queued matches`,
                                JsxRuntime.jsx("div", {
                                      children: Core__Option.getOr(Core__Option.map(activity, (function (activity) {
                                                  return matches.map(function (match, i) {
                                                              return JsxRuntime.jsx(React.Suspense, {
                                                                          children: Caml_option.some(JsxRuntime.jsx(Match.make, {
                                                                                    match: match,
                                                                                    activity: activity,
                                                                                    minRating: minRating,
                                                                                    maxRating: maxRating,
                                                                                    onDelete: (function () {
                                                                                        var matches$1 = matches.filter(function (param, i$1) {
                                                                                              return i$1 !== i;
                                                                                            });
                                                                                        setMatches(function (param) {
                                                                                              return matches$1;
                                                                                            });
                                                                                      })
                                                                                  })),
                                                                          fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                                                                    children: t`Loading`
                                                                                  }))
                                                                        });
                                                            });
                                                })), null),
                                      className: "grid grid-cols-1 gap-4"
                                    })
                              ],
                              className: "grid grid-cols-1 gap-4"
                            })
                      ],
                      className: "grid grid-cols-1 items-start gap-4 md:grid-cols-1 md:gap-8"
                    })
              ]
            });
}

var make = AddLeagueMatch;

var $$default = AddLeagueMatch;

export {
  Fragment ,
  sessionContext ,
  rsvpToPlayer ,
  make ,
  $$default as default,
}
/*  Not a pure module */

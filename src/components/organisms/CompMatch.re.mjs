// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Rating from "../../lib/Rating.re.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as Core from "@linaria/core";
import * as FramerMotion from "framer-motion";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as JsxRuntime from "react/jsx-runtime";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

function CompMatch$PlayerMini(props) {
  var player = props.player;
  return JsxRuntime.jsxs("span", {
              children: [
                player.name,
                "(",
                player.rating.mu.toFixed(2),
                ")"
              ],
              className: "mr-2"
            });
}

var PlayerMini = {
  make: CompMatch$PlayerMini
};

function CompMatch$MatchMini(props) {
  var match = props.match;
  var onSelect = props.onSelect;
  return JsxRuntime.jsx(UiAction.make, {
              onClick: (function () {
                  Core__Option.getOr(Core__Option.map(onSelect, (function (f) {
                              f(match);
                            })), undefined);
                }),
              className: "p-4",
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("span", {
                            children: match[0].map(function (p) {
                                  return JsxRuntime.jsx(CompMatch$PlayerMini, {
                                              player: p
                                            });
                                })
                          }),
                      " VS ",
                      JsxRuntime.jsx("span", {
                            children: match[1].map(function (p) {
                                  return JsxRuntime.jsx(CompMatch$PlayerMini, {
                                              player: p
                                            });
                                })
                          })
                    ],
                    className: "mb-2"
                  })
            });
}

var MatchMini = {
  make: CompMatch$MatchMini
};

function array_get_4_from(from, arr) {
  if (from >= (arr.length - 3 | 0)) {
    return ;
  }
  var arr$1 = arr.slice(from, from + 4 | 0);
  var match = arr$1[0];
  var match$1 = arr$1[1];
  var match$2 = arr$1[2];
  var match$3 = arr$1[3];
  if (match !== undefined && match$1 !== undefined && match$2 !== undefined && match$3 !== undefined) {
    return [
            Caml_option.valFromOption(match),
            Caml_option.valFromOption(match$1),
            Caml_option.valFromOption(match$2),
            Caml_option.valFromOption(match$3)
          ];
  }
  
}

function array_split_by_4(arr) {
  var _from = 0;
  var _acc = [];
  while(true) {
    var acc = _acc;
    var from = _from;
    var next = array_get_4_from(from, arr);
    if (next === undefined) {
      return acc;
    }
    _acc = acc.concat([next]);
    _from = from + 1 | 0;
    continue ;
  };
}

function match_make_naive(players) {
  return array_split_by_4(players).map(function (param) {
              return [
                      [
                        param[0],
                        param[3]
                      ],
                      [
                        param[1],
                        param[2]
                      ]
                    ];
            });
}

function array_combos(arr) {
  return arr.flatMap(function (v, i) {
              return arr.slice(i + 1 | 0, arr.length).map(function (v2) {
                          return [
                                  v,
                                  v2
                                ];
                        });
            });
}

function combos(arr1, arr2) {
  return arr1.flatMap(function (d) {
              return arr2.map(function (v) {
                          return [
                                  d,
                                  v
                                ];
                        });
            });
}

function tuple2array(param) {
  return [
          param[0],
          param[1]
        ];
}

function match_quality(param) {
  return Rating.Rating.predictDraw([
              param[0].map(function (p) {
                    return p.rating;
                  }),
              param[1].map(function (p) {
                    return p.rating;
                  })
            ]);
}

function shuffle(arr) {
  return arr.map(function (value) {
                  return {
                          value: value,
                          sort: Math.random()
                        };
                }).toSorted(function (a, b) {
                return a.sort - b.sort;
              }).map(function (param) {
              return param.value;
            });
}

function strategy_by_quality(matches) {
  return matches.toSorted(function (a, b) {
              if (Caml_obj.lessthan(a[1], b[1])) {
                return 1;
              } else {
                return -1;
              }
            });
}

function strategy_by_round_robin(matches) {
  return matches;
}

function strategy_by_random(matches) {
  return shuffle(matches);
}

function ts(prim0, prim1) {
  return Caml_splice_call.spliceApply(t, [
              prim0,
              prim1
            ]);
}

var strats = [
  {
    name: t`Quality`,
    strategy: "Quality"
  },
  {
    name: t`Random`,
    strategy: "Random"
  }
];

function CompMatch(props) {
  var onSelectMatch = props.onSelectMatch;
  var consumedPlayers = props.consumedPlayers;
  var priorityPlayers = props.priorityPlayers;
  var match = React.useState(function () {
        return "Quality";
      });
  var setStrategy = match[1];
  var strategy = match[0];
  var activePlayers = props.players.filter(function (p) {
          return !consumedPlayers.has(p.id);
        }).toSorted(function (a, b) {
        var userA = a.rating.mu;
        var userB = b.rating.mu;
        if (userA < userB) {
          return 1;
        } else {
          return -1;
        }
      });
  var teams = array_combos(activePlayers).map(tuple2array);
  var matches = Core__Array.reduce(teams, [], (function (acc, team) {
            var players$p = activePlayers.filter(function (p) {
                  return !Rating.Team.contains_player(team, p);
                });
            var teams$p = array_combos(players$p).map(tuple2array);
            return acc.concat(combos([team], teams$p));
          })).map(function (match) {
        var quality = match_quality(match);
        return [
                match,
                quality
              ];
      });
  var matches$1 = priorityPlayers.length === 0 || priorityPlayers.length === activePlayers.length ? matches : matches.filter(function (param) {
          return Rating.Match.contains_any_players(param[0], priorityPlayers);
        });
  var matches$2;
  switch (strategy) {
    case "Quality" :
        matches$2 = strategy_by_quality(matches$1).slice(0, 15);
        break;
    case "RoundRobin" :
        matches$2 = matches$1.slice(0, 15);
        break;
    case "Random" :
        matches$2 = shuffle(matches$1).slice(0, 15);
        break;
    
  }
  var maxQuality = Core__Array.reduce(matches$2, 0, (function (acc, param) {
          var quality = param[1];
          if (quality > acc) {
            return quality;
          } else {
            return acc;
          }
        }));
  var minQuality = Core__Array.reduce(matches$2, maxQuality, (function (acc, param) {
          var quality = param[1];
          if (quality < acc) {
            return quality;
          } else {
            return acc;
          }
        }));
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("label", {
                              children: t`Select a tab`,
                              className: "sr-only",
                              htmlFor: "tabs"
                            }),
                        JsxRuntime.jsx("select", {
                              children: strats.map(function (tab) {
                                    return JsxRuntime.jsx("option", {
                                                children: tab.name,
                                                value: tab.name
                                              }, tab.name);
                                  }),
                              defaultValue: Core__Option.getOr(Core__Option.map(strats.find(function (tab) {
                                            return tab.strategy === strategy;
                                          }), (function (s) {
                                          return s.name;
                                        })), ""),
                              className: "block w-full rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500",
                              id: "tabs",
                              name: "tabs",
                              onChange: (function (e) {
                                  setStrategy(function (param) {
                                        return Core__Option.getOr(Core__Option.map(strats.find(function (tab) {
                                                            return tab.name === e.currentTarget.value;
                                                          }), (function (s) {
                                                          return s.strategy;
                                                        })), "Quality");
                                      });
                                })
                            })
                      ],
                      className: "sm:hidden"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("nav", {
                            children: strats.map(function (tab) {
                                  return JsxRuntime.jsx(UiAction.make, {
                                              onClick: (function () {
                                                  setStrategy(function (param) {
                                                        return tab.strategy;
                                                      });
                                                }),
                                              className: Core.cx(strategy === tab.strategy ? "bg-indigo-100 text-indigo-700" : "text-gray-500 hover:text-gray-700", "rounded-md px-3 py-2 text-sm font-medium"),
                                              children: tab.name
                                            }, tab.name);
                                }),
                            "aria-label": "Tabs",
                            className: "flex space-x-4"
                          }),
                      className: "hidden sm:block"
                    }),
                matches$2.map(function (param, i) {
                      return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                  children: [
                                    JsxRuntime.jsx(CompMatch$MatchMini, {
                                          match: param[0],
                                          onSelect: onSelectMatch
                                        }, i.toString(undefined)),
                                    JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(FramerMotion.motion.div, {
                                                className: "h-2 rounded-full bg-red-400",
                                                animate: {
                                                  width: ((param[1] - minQuality) / (maxQuality - minQuality) * 100).toFixed(3) + "%"
                                                },
                                                initial: {
                                                  width: "0%"
                                                }
                                              }),
                                          className: "overflow-hidden rounded-full bg-gray-200 mt-1"
                                        })
                                  ]
                                });
                    })
              ]
            });
}

var make = CompMatch;

export {
  PlayerMini ,
  MatchMini ,
  array_get_4_from ,
  array_split_by_4 ,
  match_make_naive ,
  array_combos ,
  combos ,
  tuple2array ,
  match_quality ,
  shuffle ,
  strategy_by_quality ,
  strategy_by_round_robin ,
  strategy_by_random ,
  ts ,
  strats ,
  make ,
}
/*  Not a pure module */

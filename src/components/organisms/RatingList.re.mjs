// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Layout from "../shared/Layout.re.mjs";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GlobalQuery from "../shared/GlobalQuery.re.mjs";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as Core$1 from "@linaria/core";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as ReactRouterDom from "react-router-dom";
import * as ReactExperimental from "rescript-relay/src/ReactExperimental.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RatingList_rating_graphql from "../../__generated__/RatingList_rating_graphql.re.mjs";
import * as RatingListFragment_graphql from "../../__generated__/RatingListFragment_graphql.re.mjs";
import * as RatingListRefetchQuery_graphql from "../../__generated__/RatingListRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = RatingListFragment_graphql.Utils.getConnectionNodes;

var convertFragment = RatingListFragment_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(RatingListFragment_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, RatingListFragment_graphql.node, convertFragment);
}

var makeRefetchVariables = RatingListRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = RatingListRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(RatingListFragment_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(RatingListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(RatingListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var convertFragment$1 = RatingList_rating_graphql.Internal.convertFragment;

function use$1(fRef) {
  return RescriptRelay_Fragment.useFragment(RatingList_rating_graphql.node, convertFragment$1, fRef);
}

function useOpt$1(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, RatingList_rating_graphql.node, convertFragment$1);
}

var ItemFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment$1,
  use: use$1,
  useOpt: useOpt$1
};

function make(key, id) {
  return [
          key,
          id
        ];
}

function toId(param) {
  return param[1];
}

var NodeId = {
  toId: toId,
  make: make
};

function toDomain(t) {
  var match = t.split(":");
  if (match.length !== 2) {
    return {
            TAG: "Error",
            _0: "InvalidNode"
          };
  }
  var key = match[0];
  var id = match[1];
  return {
          TAG: "Ok",
          _0: [
            key,
            id
          ]
        };
}

var NodeIdDto = {
  toDomain: toDomain
};

function td(prim) {
  return Core.i18n._(prim);
}

function ts(prim0, prim1) {
  return Caml_splice_call.spliceApply(t, [
              prim0,
              prim1
            ]);
}

function RatingList$RatingItem(props) {
  var match = use$1(props.rating);
  var user = match.user;
  return JsxRuntime.jsx("li", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          className: "h-2 w-2 rounded-full bg-current"
                                        }),
                                    className: Core$1.cx("text-green-400 bg-green-400/10", "flex-none rounded-full p-1")
                                  }),
                              JsxRuntime.jsx("h2", {
                                    children: JsxRuntime.jsxs(LangProvider.Router.Link.make, {
                                          to: "/players/" + match.id,
                                          children: [
                                            Core__Option.getOr(Core__Option.flatMap(user, (function (user) {
                                                        return Core__Option.map(user.picture, (function (picture) {
                                                                      return JsxRuntime.jsx("img", {
                                                                                  height: "50",
                                                                                  src: picture,
                                                                                  width: "50"
                                                                                });
                                                                    }));
                                                      })), null),
                                            Core__Option.getOr(Core__Option.flatMap(user, (function (user) {
                                                        return Core__Option.map(user.lineUsername, (function (lineUsername) {
                                                                      return JsxRuntime.jsx("span", {
                                                                                  children: lineUsername,
                                                                                  className: "truncate"
                                                                                });
                                                                    }));
                                                      })), null)
                                          ],
                                          className: "flex gap-x-2",
                                          relative: "path"
                                        }),
                                    className: "min-w-0 text-sm font-semibold leading-6 text-white"
                                  })
                            ],
                            className: "flex items-center gap-x-3"
                          }),
                      JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx("p", {
                                  children: Core__Option.getOr(Core__Option.map(match.mu, (function (mu) {
                                              return mu.toString(undefined);
                                            })), "mu missing"),
                                  className: "whitespace-nowrap"
                                }),
                            className: "mt-3 flex items-center gap-x-2.5 text-xs leading-5 text-gray-600"
                          })
                    ],
                    className: "min-w-0 flex-auto"
                  }),
              className: ""
            });
}

var RatingItem = {
  td: td,
  ts: ts,
  make: RatingList$RatingItem
};

function RatingList(props) {
  var ratings = props.ratings;
  ReactExperimental.useTransition();
  use(ratings);
  var match = usePagination(ratings);
  var data = match.data;
  var ratings$1 = getConnectionNodes(data.ratings);
  var pageInfo = data.ratings.pageInfo;
  React.useState(function () {
        return "";
      });
  ReactRouterDom.useNavigate();
  ReactIntl.useIntl();
  GlobalQuery.useViewer();
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                match.isLoadingPrevious ? null : Core__Option.getOr(Core__Option.map(pageInfo.startCursor, (function (startCursor) {
                              return JsxRuntime.jsx(Layout.Container.make, {
                                          children: JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                to: "./?before=" + startCursor,
                                                children: t`...load past ratings`
                                              })
                                        });
                            })), null),
                JsxRuntime.jsxs(Layout.Container.make, {
                      children: [
                        JsxRuntime.jsx("ul", {
                              children: ratings$1.map(function (edge) {
                                    return JsxRuntime.jsx(RatingList$RatingItem, {
                                                rating: edge.fragmentRefs
                                              }, edge.id);
                                  }),
                              className: "divide-y divide-gray-200",
                              role: "list"
                            }),
                        match.hasNext && !match.isLoadingNext ? JsxRuntime.jsx(Layout.Container.make, {
                                children: Core__Option.getOr(Core__Option.map(pageInfo.endCursor, (function (endCursor) {
                                            return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                        to: "./?after=" + endCursor,
                                                        children: t`load more`
                                                      });
                                          })), null)
                              }) : null
                      ]
                    })
              ]
            });
}

var make$1 = RatingList;

var $$default = RatingList;

export {
  Fragment ,
  ItemFragment ,
  NodeId ,
  NodeIdDto ,
  RatingItem ,
  make$1 as make,
  $$default as default,
}
/*  Not a pure module */

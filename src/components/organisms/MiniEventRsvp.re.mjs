// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as FramerMotion from "framer-motion";
import * as JsxRuntime from "react/jsx-runtime";
import * as AvatarWithProgress from "../molecules/AvatarWithProgress.re.mjs";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as MiniEventRsvp_rsvp_graphql from "../../__generated__/MiniEventRsvp_rsvp_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var convertFragment = MiniEventRsvp_rsvp_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(MiniEventRsvp_rsvp_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, MiniEventRsvp_rsvp_graphql.node, convertFragment);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function MiniEventRsvp$ListItem(props) {
  return JsxRuntime.jsxs(FramerMotion.motion.div, {
              className: "",
              style: {
                originX: 0.05,
                originY: 0.05
              },
              animate: {
                opacity: 1,
                scale: 1
              },
              initial: {
                opacity: 0,
                scale: 1.15
              },
              exit: {
                opacity: 0,
                scale: 1.15
              },
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("span", {
                            children: t`Player`,
                            className: "sr-only"
                          }),
                      className: "flex-none"
                    }),
                props.children
              ]
            });
}

var ListItem = {
  make: MiniEventRsvp$ListItem
};

function MiniEventRsvp(props) {
  var maxRating = props.maxRating;
  var rsvp = use(props.rsvp);
  return Core__Option.getOr(Core__Option.map(rsvp.user, (function (user) {
                    var progress = Core__Option.getOr(Core__Option.map(Core__Option.flatMap(rsvp.rating, (function (rating) {
                                    return rating.mu;
                                  })), (function (mu) {
                                return mu / maxRating * 100 | 0;
                              })), 100);
                    return JsxRuntime.jsx(MiniEventRsvp$ListItem, {
                                children: JsxRuntime.jsx(AvatarWithProgress.make, {
                                      src: Core__Option.getOr(user.picture, ""),
                                      alt: Core__Option.getOr(user.lineUsername, "[Line username missing]"),
                                      progress: progress
                                    })
                              }, user.id);
                  })), null);
}

var make = MiniEventRsvp;

export {
  Fragment ,
  ListItem ,
  make ,
}
/*  Not a pure module */

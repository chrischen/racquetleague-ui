// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zod from "zod";
import * as Form from "../molecules/forms/Form.re.mjs";
import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Rating from "../../lib/Rating.re.mjs";
import * as RsvpUser from "./RsvpUser.re.mjs";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Float from "@rescript/core/src/Core__Float.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as Core__Result from "@rescript/core/src/Core__Result.re.mjs";
import * as LucideReact from "lucide-react";
import * as EventRsvpUser from "./EventRsvpUser.re.mjs";
import * as FramerMotion from "framer-motion";
import * as RelayRuntime from "relay-runtime";
import * as ReactHookForm from "react-hook-form";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as Zod$1 from "@hookform/resolvers/zod";
import * as SubmitMatchMutation_graphql from "../../__generated__/SubmitMatchMutation_graphql.re.mjs";
import * as SubmitMatchPredictMatchOutcomeQuery_graphql from "../../__generated__/SubmitMatchPredictMatchOutcomeQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var convertVariables = SubmitMatchPredictMatchOutcomeQuery_graphql.Internal.convertVariables;

var convertResponse = SubmitMatchPredictMatchOutcomeQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = SubmitMatchPredictMatchOutcomeQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, SubmitMatchPredictMatchOutcomeQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, SubmitMatchPredictMatchOutcomeQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(SubmitMatchPredictMatchOutcomeQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(SubmitMatchPredictMatchOutcomeQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(SubmitMatchPredictMatchOutcomeQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(SubmitMatchPredictMatchOutcomeQuery_graphql.node, convertVariables);

var PredictMatchOutcome = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var convertVariables$1 = SubmitMatchMutation_graphql.Internal.convertVariables;

var convertResponse$1 = SubmitMatchMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = SubmitMatchMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables$1, SubmitMatchMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables$1, SubmitMatchMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var CreateLeagueMatchMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  commitMutation: commitMutation,
  use: use$1
};

function SubmitMatch$PredictionBar(props) {
  var odds = props.odds;
  var odds$1 = odds[1] - odds[0];
  var leftOdds = odds$1 < 0 ? Math.abs(odds$1 * 100) : 0;
  var rightOdds = odds$1 < 0 ? 0 : odds$1 * 100;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: odds$1 < 0 ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
                              children: [
                                JsxRuntime.jsx(LucideReact.MoveLeft, {
                                      className: "inline",
                                      color: "red"
                                    }),
                                t`predicted winner`,
                                JsxRuntime.jsx(LucideReact.MoveRight, {
                                      className: "inline",
                                      color: "#929292"
                                    })
                              ]
                            }) : JsxRuntime.jsxs(JsxRuntime.Fragment, {
                              children: [
                                JsxRuntime.jsx(LucideReact.MoveLeft, {
                                      className: "inline",
                                      color: "#929292"
                                    }),
                                t`predicted winner`,
                                JsxRuntime.jsx(LucideReact.MoveRight, {
                                      className: "inline",
                                      color: "red"
                                    })
                              ]
                            }),
                      className: "col-span-2 text-center"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(FramerMotion.motion.div, {
                            className: "h-2 rounded-l-full bg-red-400 float-right",
                            animate: {
                              width: leftOdds.toFixed(3) + "%"
                            },
                            initial: {
                              width: "0%"
                            }
                          }),
                      className: "overflow-hidden rounded-l-full bg-gray-200 mt-1 place-content-end border-r-4 border-black"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx(FramerMotion.motion.div, {
                            className: "h-2 rounded-r-full bg-blue-400",
                            animate: {
                              width: rightOdds.toFixed(3) + "%"
                            },
                            initial: {
                              width: "0%"
                            }
                          }),
                      className: "overflow-hidden rounded-r-full bg-gray-200 mt-1 border-l-4 border-black border-l-radius"
                    })
              ],
              className: "grid grid-cols-2 gap-0"
            });
}

var PredictionBar = {
  make: SubmitMatch$PredictionBar
};

var ControllerOfInputsMatch = {};

var schema = Zod.z.object({
      scoreLeft: Zod.z.preprocess((function (a) {
              return Core__Float.fromString(a);
            }), Zod.z.number({
                  invalid_type_error: "Enter a number"
                }).gte(0)),
      scoreRight: Zod.z.preprocess((function (a) {
              return Core__Float.fromString(a);
            }), Zod.z.number({
                  invalid_type_error: "Enter a number"
                }).gte(0))
    });

var nullFormEvent = null;

function SubmitMatch(props) {
  var onSubmitted = props.onSubmitted;
  var onComplete = props.onComplete;
  var maxRating = props.maxRating;
  var minRating = props.minRating;
  var activity = props.activity;
  var match = props.match;
  var match$1 = use$1();
  var commitMutationCreateLeagueMatch = match$1[0];
  var team1 = match[0];
  var team2 = match[1];
  var doublesMatch = Rating.DoublesMatch.fromMatch(match);
  var outcome = use({
        input: {
          team1RatingIds: team1.map(function (node) {
                return Core__Option.getOr(Core__Option.flatMap(node.data, (function (node) {
                                  return Core__Option.map(node.rating, (function (rating) {
                                                return rating.id;
                                              }));
                                })), "");
              }),
          team2RatingIds: team2.map(function (node) {
                return Core__Option.getOr(Core__Option.flatMap(node.data, (function (node) {
                                  return Core__Option.map(node.rating, (function (rating) {
                                                return rating.id;
                                              }));
                                })), "");
              })
        }
      }, undefined, undefined, undefined).predictMatchOutcome;
  var match$2 = ReactHookForm.useForm({
        resolver: Caml_option.some(Zod$1.zodResolver(schema)),
        defaultValues: {}
      });
  var setValue = match$2.setValue;
  var handleSubmit = match$2.handleSubmit;
  var register = match$2.register;
  var match$3 = React.useState(function () {
        return false;
      });
  var setSubmitting = match$3[1];
  var submitting = match$3[0];
  var onSubmit = function (rated, data) {
    setSubmitting(function (param) {
          return true;
        });
    if (data.scoreLeft === data.scoreRight) {
      alert("No ties allowed");
      return ;
    }
    var winningSide = data.scoreLeft > data.scoreRight ? "Left" : "Right";
    var winners = (
        winningSide === "Left" ? team1 : team2
      ).map(function (p) {
          return p.id;
        });
    var losers = (
        winningSide === "Left" ? team2 : team1
      ).map(function (p) {
          return p.id;
        });
    var score = winningSide === "Left" ? [
        data.scoreLeft,
        data.scoreRight
      ] : [
        data.scoreRight,
        data.scoreLeft
      ];
    Core__Option.map(onComplete, (function (f) {
            var match_0 = winningSide === "Left" ? team1 : team2;
            var match_1 = winningSide === "Left" ? team2 : team1;
            var match = [
              match_0,
              match_1
            ];
            f(match);
          }));
    if (rated) {
      Core__Option.map(activity.slug, (function (slug) {
              var connectionId = RelayRuntime.ConnectionHandler.getConnectionID("root", "MatchListFragment_matches", {
                    activitySlug: slug,
                    after: undefined,
                    before: undefined,
                    eventId: undefined,
                    first: undefined,
                    namespace: "doubles:rec"
                  });
              commitMutationCreateLeagueMatch({
                    connections: [connectionId],
                    matchInput: {
                      activitySlug: slug,
                      doublesMatch: {
                        createdAt: Util.Datetime.fromDate(new Date()),
                        losers: losers,
                        score: score,
                        winners: winners
                      },
                      namespace: "doubles:rec"
                    }
                  }, undefined, undefined, undefined, (function (param, errs) {
                      if (errs !== undefined) {
                        console.log(errs);
                      } else {
                        Core__Option.getOr(Core__Option.map(onSubmitted, (function (f) {
                                    f();
                                  })), undefined);
                      }
                      setSubmitting(function (param) {
                            return false;
                          });
                    }), (function (param) {
                      setSubmitting(function (param) {
                            return false;
                          });
                    }), undefined);
              setValue("scoreLeft", 0, undefined);
              setValue("scoreRight", 0, undefined);
            }));
      return ;
    }
    
  };
  return JsxRuntime.jsx("form", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            children: team1.map(function (player) {
                                  var data = player.data;
                                  if (data !== undefined) {
                                    return Core__Option.getOr(Core__Option.map(data.user, (function (user) {
                                                      return JsxRuntime.jsx(EventRsvpUser.make, {
                                                                  user: user.fragmentRefs,
                                                                  ratingPercent: (player.rating.mu - minRating) / (maxRating - minRating) * 100
                                                                });
                                                    })), null);
                                  } else {
                                    return JsxRuntime.jsx(RsvpUser.make, {
                                                user: RsvpUser.makeGuest(player.name),
                                                ratingPercent: (player.rating.mu - minRating) / (maxRating - minRating) * 100
                                              });
                                  }
                                }),
                            className: "grid gap-4"
                          }),
                      JsxRuntime.jsx("div", {
                            children: team2.map(function (player) {
                                  var data = player.data;
                                  if (data !== undefined) {
                                    return Core__Option.getOr(Core__Option.map(data.user, (function (user) {
                                                      return JsxRuntime.jsx(EventRsvpUser.make, {
                                                                  user: user.fragmentRefs,
                                                                  ratingPercent: (player.rating.mu - minRating) / (maxRating - minRating) * 100
                                                                });
                                                    })), null);
                                  } else {
                                    return null;
                                  }
                                }),
                            className: "grid gap-4"
                          }),
                      JsxRuntime.jsx("div", {
                            children: Core__Option.getOr(Core__Option.map(outcome, (function (outcome) {
                                        return JsxRuntime.jsx(SubmitMatch$PredictionBar, {
                                                    odds: [
                                                      Core__Option.getOr(outcome.team1, 0),
                                                      Core__Option.getOr(outcome.team2, 0)
                                                    ]
                                                  });
                                      })), null),
                            className: "grid gap-0 col-span-2"
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(Form.Input.make, {
                                                label: t`points`,
                                                className: "w-24 sm:w-32 md:w-48  flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 text-2xl sm:text-5xl sm:leading-6",
                                                id: "scoreLeft",
                                                type_: "text",
                                                register: register("scoreLeft", undefined)
                                              }),
                                          className: "mx-auto col-span-1"
                                        }),
                                    className: "grid grid-cols-1 gap-4"
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx(Form.Input.make, {
                                                label: t`points`,
                                                className: "w-24 sm:w-32 md:w-48 block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 text-2xl sm:text-5xl sm:leading-6",
                                                id: "scoreRight",
                                                type_: "text",
                                                register: register("scoreRight", undefined)
                                              }),
                                          className: "mx-auto col-span-1"
                                        }),
                                    className: "grid grid-cols-1 gap-4"
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsxs("div", {
                                          children: [
                                            Core__Option.getOr(Core__Option.map(props.onDelete, (function (onDelete) {
                                                        return JsxRuntime.jsx(UiAction.make, {
                                                                    onClick: onDelete,
                                                                    className: "inline-flex items-center",
                                                                    children: t`Cancel`
                                                                  });
                                                      })), null),
                                            Core__Option.getOr(Core__Option.map(onComplete, (function (onComplete) {
                                                        return JsxRuntime.jsx(UiAction.make, {
                                                                    onClick: (function () {
                                                                        handleSubmit(function (extra) {
                                                                                return onSubmit(false, extra);
                                                                              })(nullFormEvent);
                                                                      }),
                                                                    className: "ml-3 inline-flex items-center",
                                                                    children: t`Completed`
                                                                  });
                                                      })), null),
                                            Core__Result.getOr(Core__Result.flatMap(doublesMatch, (function (param) {
                                                        var match = param[1];
                                                        var match$1 = param[0];
                                                        var match$2 = match$1[0].data;
                                                        var match$3 = match$1[1].data;
                                                        var match$4 = match[0].data;
                                                        var match$5 = match[1].data;
                                                        if (match$2 !== undefined && match$3 !== undefined && match$4 !== undefined && match$5 !== undefined) {
                                                          return {
                                                                  TAG: "Ok",
                                                                  _0: JsxRuntime.jsx("input", {
                                                                        className: "ml-3 inline-flex items-center text-3xl bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded",
                                                                        disabled: submitting,
                                                                        type: "submit",
                                                                        value: t`Submit Rated`
                                                                      })
                                                                };
                                                        } else {
                                                          return {
                                                                  TAG: "Error",
                                                                  _0: "TwoPlayersRequired"
                                                                };
                                                        }
                                                      })), null)
                                          ],
                                          className: "mt-3 flex md:top-3 md:mt-0 justify-center"
                                        }),
                                    className: "col-span-2 md:col-span-2 gap-4"
                                  })
                            ],
                            className: "grid grid-cols-2 col-span-2 items-start gap-4 md:grid-cols-2 md:gap-8"
                          })
                    ],
                    className: "grid grid-cols-2 gap-4 col-span-2"
                  }),
              onSubmit: handleSubmit(function (extra) {
                    return onSubmit(true, extra);
                  })
            });
}

var make = SubmitMatch;

export {
  PredictMatchOutcome ,
  CreateLeagueMatchMutation ,
  PredictionBar ,
  ControllerOfInputsMatch ,
  schema ,
  nullFormEvent ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Layout from "../shared/Layout.re.mjs";
import * as PinMap from "./PinMap.re.mjs";
import * as Router from "../shared/Router.re.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as EventItem from "./EventItem.re.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as ClubCalendar from "./ClubCalendar.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as WarningAlert from "../molecules/WarningAlert.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as Outline from "@heroicons/react/24/outline";
import * as ClubEventsListFragment_graphql from "../../__generated__/ClubEventsListFragment_graphql.re.mjs";
import * as ClubEventsListRefetchQuery_graphql from "../../__generated__/ClubEventsListRefetchQuery_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var getConnectionNodes = ClubEventsListFragment_graphql.Utils.getConnectionNodes;

var convertFragment = ClubEventsListFragment_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(ClubEventsListFragment_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, ClubEventsListFragment_graphql.node, convertFragment);
}

var makeRefetchVariables = ClubEventsListRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = ClubEventsListRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(ClubEventsListFragment_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(ClubEventsListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(ClubEventsListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

function addEventToGroups(intl, filterByDate, groups, $$event) {
  Core__Option.map($$event.startDate, (function (startDate) {
          var dateJs = Util.Datetime.toDate(startDate);
          var key = intl.formatDate(dateJs, {
                timeZone: Core__Option.getOr($$event.timezone, "UTC"),
                weekday: "long",
                month: "short",
                day: "numeric"
              });
          var shouldInclude = filterByDate !== undefined ? dateJs.getTime() > Caml_option.valFromOption(filterByDate).getTime() : true;
          if (!shouldInclude) {
            return ;
          }
          var existing = Js_dict.get(groups, key);
          if (existing !== undefined) {
            groups[key] = Belt_Array.concatMany([
                  [$$event],
                  existing
                ]);
          } else {
            groups[key] = [$$event];
          }
        }));
  return groups;
}

function updateParams(filter, params) {
  switch (filter.TAG) {
    case "ByDate" :
        return params.set("selectedDate", filter._0.toDateString());
    case "ByAfter" :
        return params.set("after", filter._0).delete("before");
    case "ByBefore" :
        return params.set("before", filter._0).delete("after");
    case "ByAfterDate" :
        return params.set("afterDate", filter._0.toISOString());
    
  }
}

var Filter = {
  updateParams: updateParams
};

function ClubEventsList$Day(props) {
  var viewer = props.viewer;
  var highlightedLocation = props.highlightedLocation;
  var events = props.events;
  var match = React.useState(function () {
        return false;
      });
  var setShowShadow = match[1];
  var showShadow = match[0];
  var shadowEvents = events.filter(function (e) {
        return Core__Option.getOr(e.shadow, false);
      });
  var shadowCount = shadowEvents.length;
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                events.map(function (edge) {
                      var highlighted = Core__Option.getOr(Core__Option.map(edge.location, (function (loc) {
                                  return highlightedLocation === loc.id;
                                })), false);
                      if (Core__Option.getOr(edge.shadow, false) && !showShadow) {
                        return null;
                      } else {
                        return JsxRuntime.jsx("li", {
                                    children: JsxRuntime.jsx(EventItem.make, {
                                          event: edge.fragmentRefs,
                                          user: Core__Option.flatMap(viewer, (function (v) {
                                                  return Core__Option.map(v.user, (function (u) {
                                                                return u.fragmentRefs;
                                                              }));
                                                })),
                                          highlightedLocation: highlighted
                                        }),
                                    className: highlighted ? "bg-yellow-100/35" : "",
                                    id: highlighted ? "highlighted" : ""
                                  }, edge.id);
                      }
                    }),
                shadowCount > 0 && !showShadow ? JsxRuntime.jsx("li", {
                        children: JsxRuntime.jsxs("p", {
                              children: [
                                shadowCount.toString() + " private event" + (
                                  shadowCount > 1 ? "s" : ""
                                ) + " hidden",
                                " ",
                                JsxRuntime.jsx(UiAction.make, {
                                      onClick: (function (param) {
                                          setShowShadow(function (param) {
                                                return true;
                                              });
                                        }),
                                      children: t`show`
                                    })
                              ],
                              className: "text-gray-700 p-3 italic ml-6"
                            })
                      }) : null
              ]
            });
}

var Day = {
  make: ClubEventsList$Day
};

function ClubEventsList(props) {
  var viewer = props.viewer;
  var events = props.events;
  var match = use(events);
  var match$1 = usePagination(events);
  var data = match$1.data;
  var nodes = getConnectionNodes(data.events);
  var pageInfo = data.events.pageInfo;
  var hasPrevious = pageInfo.hasPreviousPage;
  var match$2 = React.useState(function () {
        return false;
      });
  var setShareOpen = match$2[1];
  var match$3 = React.useState(function () {
        
      });
  var navigate = ReactRouterDom.useNavigate();
  var match$4 = ReactRouterDom.useSearchParams();
  var setSearchParams = match$4[1];
  var immParams = Router.ImmSearchParams.fromSearchParams(match$4[0]);
  var filterByDate = Core__Option.map(Router.ImmSearchParams.get(immParams, "selectedDate"), (function (d) {
          return new Date(d);
        }));
  var clearFilterByDate = function () {
    setSearchParams(function (prev) {
          prev.delete("selectedDate");
          return prev;
        });
  };
  var intl = ReactIntl.useIntl();
  var grouped = Core__Array.reduce(nodes, {}, (function (extra, extra$1) {
          return addEventToGroups(intl, filterByDate, extra, extra$1);
        }));
  var calendarDates = Object.keys(grouped).map(function (dateString) {
        return new Date(dateString);
      });
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(LangProvider.DetectedLang.make, {}),
                        JsxRuntime.jsxs("div", {
                              children: [
                                props.header,
                                JsxRuntime.jsx(Layout.Container.make, {
                                      children: JsxRuntime.jsx(UiAction.make, {
                                            onClick: (function (param) {
                                                setShareOpen(function (o) {
                                                      return !o;
                                                    });
                                              }),
                                            active: match$2[0],
                                            alt: t`share as text`,
                                            children: JsxRuntime.jsx(Outline.DocumentTextIcon, {
                                                  className: "inline w-6 h-6"
                                                })
                                          }),
                                      className: "p-2 flex-row flex gap-2"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsx(ClubCalendar.make, {
                                                    dates: calendarDates,
                                                    onDateSelected: (function (date) {
                                                        setSearchParams(function (prev) {
                                                              return Router.ImmSearchParams.toSearchParams(updateParams({
                                                                              TAG: "ByDate",
                                                                              _0: date
                                                                            }, Router.ImmSearchParams.fromSearchParams(prev)));
                                                            });
                                                      })
                                                  }),
                                              Core__Option.getOr(Core__Option.map(filterByDate, (function (param) {
                                                          return JsxRuntime.jsx(WarningAlert.make, {
                                                                      children: JsxRuntime.jsx(JsxRuntime.Fragment, {
                                                                            children: Caml_option.some(t`filtering by date`)
                                                                          }),
                                                                      cta: Caml_option.some(t`clear filter`),
                                                                      ctaClick: (function () {
                                                                          clearFilterByDate();
                                                                        })
                                                                    });
                                                        })), null),
                                              !match$1.isLoadingPrevious && hasPrevious ? Core__Option.getOr(Core__Option.map(pageInfo.startCursor, (function (startCursor) {
                                                            return JsxRuntime.jsx(LangProvider.Router.LinkWithOpts.make, {
                                                                        to: {
                                                                          pathname: "./",
                                                                          search: updateParams({
                                                                                  TAG: "ByBefore",
                                                                                  _0: startCursor
                                                                                }, immParams).toString()
                                                                        },
                                                                        children: JsxRuntime.jsx(Solid.ChevronUpIcon, {
                                                                              className: "inline w-7 h-7"
                                                                            }),
                                                                        className: "hover:bg-gray-100 p-3 w-full text-center block"
                                                                      });
                                                          })), null) : null,
                                              JsxRuntime.jsx("ul", {
                                                    children: Js_dict.entries(grouped).map(function (param) {
                                                          var dateString = param[0];
                                                          return JsxRuntime.jsxs("li", {
                                                                      children: [
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsx(Layout.Container.make, {
                                                                                    children: JsxRuntime.jsx("h3", {
                                                                                          children: dateString
                                                                                        })
                                                                                  }),
                                                                              className: "sticky top-0 z-10 border-y border-b-gray-200 border-t-gray-100 bg-gray-50 px-0 py-1.5 text-sm font-semibold leading-6 text-gray-900"
                                                                            }),
                                                                        JsxRuntime.jsx("ul", {
                                                                              children: JsxRuntime.jsx(ClubEventsList$Day, {
                                                                                    events: param[1],
                                                                                    highlightedLocation: "",
                                                                                    viewer: viewer
                                                                                  }),
                                                                              className: "divide-y divide-gray-200",
                                                                              role: "list"
                                                                            })
                                                                      ]
                                                                    }, dateString);
                                                        }),
                                                    role: "list"
                                                  }),
                                              match$1.hasNext && !match$1.isLoadingNext ? JsxRuntime.jsx(Layout.Container.make, {
                                                      children: Core__Option.getOr(Core__Option.map(pageInfo.endCursor, (function (endCursor) {
                                                                  return JsxRuntime.jsx(LangProvider.Router.LinkWithOpts.make, {
                                                                              to: {
                                                                                pathname: "./",
                                                                                search: updateParams({
                                                                                        TAG: "ByAfter",
                                                                                        _0: endCursor
                                                                                      }, immParams).toString()
                                                                              },
                                                                              children: JsxRuntime.jsx(Solid.ChevronDownIcon, {
                                                                                    className: "inline w-7 h-7"
                                                                                  }),
                                                                              className: "hover:bg-gray-100 p-3 w-full text-center block"
                                                                            });
                                                                })), null)
                                                    }) : null
                                            ],
                                            className: "w-full lg:overflow-x-hidden"
                                          }),
                                      className: "mx-auto w-full grow lg:flex"
                                    })
                              ],
                              className: "mx-auto max-w-7xl"
                            })
                      ],
                      className: "grow p-0 z-10 lg:w-1/2 lg:h-[calc(100vh-50px)] lg:overflow-scroll lg:rounded-lg lg:bg-white lg:p-10 lg:shadow-sm lg:ring-1 lg:ring-zinc-950/5 dark:lg:bg-zinc-900 dark:lg:ring-white/10"
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx("div", {
                                  children: JsxRuntime.jsx("div", {
                                        children: JsxRuntime.jsx(PinMap.make, {
                                              connection: match.events.fragmentRefs,
                                              onLocationClick: (function ($$location) {
                                                  navigate("/locations/" + $$location.id, undefined);
                                                }),
                                              selected: match$3[0]
                                            }),
                                        className: "w-full lg:min-h-96 h-96 lg:h-[calc(100vh-50px)] lg:max-h-screen"
                                      }),
                                  className: "shrink-0 border-t border-gray-200 lg:border-l lg:border-t-0"
                                }),
                            className: "mx-auto"
                          }),
                      className: "grow p-0 lg:w-1/2 lg:-ml-1 lg:shadow-sm lg:ring-1 lg:ring-zinc-950/5 dark:lg:bg-zinc-900 dark:lg:ring-white/10"
                    })
              ]
            });
}

function __unused() {
  t({
        id: "Badminton"
      });
  t({
        id: "Table Tennis"
      });
  t({
        id: "Pickleball"
      });
  t({
        id: "Futsal"
      });
}

var make = ClubEventsList;

export {
  Fragment ,
  addEventToGroups ,
  Filter ,
  Day ,
  make ,
  __unused ,
}
/*  Not a pure module */

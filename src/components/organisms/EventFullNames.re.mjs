// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as UiAction from "../atoms/UiAction.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as Core from "@linaria/core";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as EventFullNames_event_graphql from "../../__generated__/EventFullNames_event_graphql.re.mjs";
import * as EventFullNamesRefetchQuery_graphql from "../../__generated__/EventFullNamesRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = EventFullNames_event_graphql.Utils.getConnectionNodes;

var convertFragment = EventFullNames_event_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventFullNames_event_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventFullNames_event_graphql.node, convertFragment);
}

var makeRefetchVariables = EventFullNamesRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = EventFullNamesRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(EventFullNames_event_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(EventFullNames_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(EventFullNames_event_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

function EventFullNames(props) {
  var $$event = props.event;
  var match = usePagination($$event);
  use($$event);
  var rsvps = getConnectionNodes(match.data.rsvps);
  var match$1 = React.useState(function () {
        return false;
      });
  var setExpanded = match$1[1];
  var expanded = match$1[0];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("dl", {
                      children: JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx("dt", {
                                  children: t`guest list`,
                                  className: "text-sm font-semibold leading-6 text-gray-900"
                                }),
                            className: "flex-auto pl-6 pt-3"
                          }),
                      className: "flex flex-wrap"
                    }),
                JsxRuntime.jsx("dl", {
                      children: JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsx(JsxRuntime.Fragment, {
                                  children: Caml_option.some(JsxRuntime.jsx("ul", {
                                            children: rsvps.length !== 0 ? Core__Array.filterMap(rsvps, (function (edge) {
                                                        return Core__Option.flatMap(edge.user, (function (user) {
                                                                      return user.fullName;
                                                                    }));
                                                      })).map(function (fullName) {
                                                    return JsxRuntime.jsx("li", {
                                                                children: fullName
                                                              });
                                                  }) : t`no players yet`,
                                            className: ""
                                          }))
                                }),
                            className: "mt-4 w-full flex flex-col gap-x-4 border-t border-gray-900/5 px-6 pt-4"
                          }),
                      className: Core.cx(expanded ? "" : "hidden", "flex flex-wrap")
                    }),
                JsxRuntime.jsxs(UiAction.make, {
                      onClick: (function (param) {
                          setExpanded(function (expanded) {
                                return !expanded;
                              });
                        }),
                      className: "p-3 w-full flex flex-col items-center hover:bg-gray-100",
                      children: [
                        expanded ? null : JsxRuntime.jsx(Solid.UsersIcon, {
                                className: "inline w-5 h-5"
                              }),
                        expanded ? JsxRuntime.jsx(Solid.ChevronUpIcon, {
                                className: "inline w-5 h-5"
                              }) : JsxRuntime.jsx(Solid.ChevronDownIcon, {
                                className: "inline w-5 h-5"
                              })
                      ]
                    })
              ],
              className: "rounded-lg bg-gray-50 shadow-sm ring-1 ring-gray-900/5 flex flex-col"
            });
}

var make = EventFullNames;

export {
  Fragment ,
  make ,
}
/*  Not a pure module */

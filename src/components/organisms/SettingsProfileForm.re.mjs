// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zod from "zod";
import * as Form from "../molecules/forms/Form.re.mjs";
import * as Grid from "../vanillaui/atoms/Grid.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FormSection from "../molecules/forms/FormSection.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as FramerMotion from "framer-motion";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactHookForm from "react-hook-form";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as SeekingPartnerInput from "./SeekingPartnerInput.re.mjs";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as Zod$1 from "@hookform/resolvers/zod";
import * as SettingsProfileForm_query_graphql from "../../__generated__/SettingsProfileForm_query_graphql.re.mjs";
import * as SettingsProfileFormMutation_graphql from "../../__generated__/SettingsProfileFormMutation_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

function ts(prim0, prim1) {
  return Caml_splice_call.spliceApply(t, [
              prim0,
              prim1
            ]);
}

var convertVariables = SettingsProfileFormMutation_graphql.Internal.convertVariables;

var convertResponse = SettingsProfileFormMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = SettingsProfileFormMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, SettingsProfileFormMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, SettingsProfileFormMutation_graphql.node, convertResponse, convertWrapRawResponse);

var Mutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use
};

var convertFragment = SettingsProfileForm_query_graphql.Internal.convertFragment;

function use$1(fRef) {
  return RescriptRelay_Fragment.useFragment(SettingsProfileForm_query_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, SettingsProfileForm_query_graphql.node, convertFragment);
}

var QueryFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use$1,
  useOpt: useOpt
};

var sessionContext = AppContext.SessionContext;

var ControllerOfInputs = {};

var schema = Zod.z.object({
      biography: Zod.z.string({}),
      fullName: Zod.z.string({}),
      username: Zod.z.string({})
    });

function SettingsProfileForm(props) {
  var navigate = ReactRouterDom.useNavigate();
  var query = use$1(props.query);
  var match = use();
  var commitMutation = match[0];
  var match$1 = ReactHookForm.useForm({
        resolver: Caml_option.some(Zod$1.zodResolver(schema)),
        defaultValues: {
          biography: Core__Option.getOr(Core__Option.flatMap(query.viewer, (function (viewer) {
                      return Core__Option.flatMap(viewer.profile, (function (profile) {
                                    return profile.biography;
                                  }));
                    })), ""),
          fullName: Core__Option.getOr(Core__Option.flatMap(query.viewer, (function (viewer) {
                      return Core__Option.flatMap(viewer.profile, (function (profile) {
                                    return profile.fullName;
                                  }));
                    })), ""),
          username: Core__Option.getOr(Core__Option.flatMap(query.viewer, (function (viewer) {
                      return Core__Option.flatMap(viewer.profile, (function (profile) {
                                    return profile.lineUsername;
                                  }));
                    })), "")
        }
      });
  var formState = match$1.formState;
  var handleSubmit = match$1.handleSubmit;
  var register = match$1.register;
  var onSubmit = function (data) {
    commitMutation({
          input: {
            biography: data.biography,
            fullName: data.fullName,
            username: data.username
          }
        }, undefined, undefined, undefined, undefined, undefined, undefined);
    navigate("/", undefined);
  };
  return JsxRuntime.jsx(FramerMotion.motion.div, {
              style: {
                opacity: 0,
                y: -50
              },
              animate: {
                opacity: 1,
                scale: 1,
                y: 0.00
              },
              initial: {
                opacity: 0,
                scale: 1,
                y: -50
              },
              exit: {
                opacity: 0,
                scale: 1,
                y: -50
              },
              children: Caml_option.some(JsxRuntime.jsx(WaitForMessages.make, {
                        children: (function () {
                            var match = formState.errors.fullName;
                            var tmp;
                            if (match !== undefined) {
                              var message = match.message;
                              tmp = message !== undefined ? message : "";
                            } else {
                              tmp = "";
                            }
                            var match$1 = formState.errors.biography;
                            var tmp$1;
                            if (match$1 !== undefined) {
                              var message$1 = match$1.message;
                              tmp$1 = message$1 !== undefined ? message$1 : "";
                            } else {
                              tmp$1 = "";
                            }
                            return JsxRuntime.jsx(JsxRuntime.Fragment, {
                                        children: Caml_option.some(JsxRuntime.jsx(Grid.make, {
                                                  children: JsxRuntime.jsxs("form", {
                                                        children: [
                                                          JsxRuntime.jsx(FormSection.make, {
                                                                title: t`profile`,
                                                                description: Caml_option.some(t`details about yourself`),
                                                                children: JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsxs("div", {
                                                                              children: [
                                                                                JsxRuntime.jsxs("div", {
                                                                                      children: [
                                                                                        JsxRuntime.jsx(Form.Input.make, {
                                                                                              label: Caml_option.some(t`full name`),
                                                                                              name: "fullName",
                                                                                              hint: Caml_option.some(t`Some events require your legal name as shown on an ID card.`),
                                                                                              id: "fullName",
                                                                                              placeholder: t`Doe John`,
                                                                                              register: register("fullName", undefined)
                                                                                            }),
                                                                                        JsxRuntime.jsx("p", {
                                                                                              children: tmp
                                                                                            })
                                                                                      ],
                                                                                      className: ""
                                                                                    }),
                                                                                JsxRuntime.jsx("div", {
                                                                                      children: JsxRuntime.jsx(SeekingPartnerInput.make, {
                                                                                            seekingPartner: undefined,
                                                                                            onChange: (function (param) {
                                                                                                
                                                                                              })
                                                                                          })
                                                                                    })
                                                                              ],
                                                                              className: "sm:col-span-4 md:col-span-3"
                                                                            }),
                                                                        JsxRuntime.jsxs("div", {
                                                                              children: [
                                                                                JsxRuntime.jsx(Form.TextArea.make, {
                                                                                      label: t`biography`,
                                                                                      name: "biography",
                                                                                      id: "biography",
                                                                                      hint: Caml_option.some(t`tell us a little about yourself`),
                                                                                      rows: 10,
                                                                                      register: register("biography", undefined)
                                                                                    }),
                                                                                JsxRuntime.jsx("p", {
                                                                                      children: tmp$1
                                                                                    })
                                                                              ],
                                                                              className: "sm:col-span-4 md:col-span-3"
                                                                            })
                                                                      ],
                                                                      className: "mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6"
                                                                    })
                                                              }),
                                                          JsxRuntime.jsx(Form.Footer.make, {})
                                                        ],
                                                        onSubmit: handleSubmit(onSubmit)
                                                      })
                                                }))
                                      });
                          })
                      }))
            });
}

var make = SettingsProfileForm;

export {
  ts ,
  Mutation ,
  QueryFragment ,
  sessionContext ,
  ControllerOfInputs ,
  schema ,
  make ,
}
/*  Not a pure module */

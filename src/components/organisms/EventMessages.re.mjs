// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as DateFns from "date-fns";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LucideReact from "lucide-react";
import * as Core from "@linaria/core";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as EventMessages_query_graphql from "../../__generated__/EventMessages_query_graphql.re.mjs";
import * as DifferenceInMinutes from "date-fns/differenceInMinutes";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertFragment = EventMessages_query_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventMessages_query_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventMessages_query_graphql.node, convertFragment);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

function decodePayload(payloadString) {
  try {
    var json = JSON.parse(payloadString);
    var dict = Js_json.decodeObject(json);
    if (dict !== undefined) {
      return {
              actorUserName: Core__Option.flatMap(Js_dict.get(dict, "actorUserName"), Js_json.decodeString),
              activityType: Core__Option.flatMap(Js_dict.get(dict, "activityType"), Js_json.decodeString)
            };
    } else {
      return ;
    }
  }
  catch (exn){
    return ;
  }
}

function EventMessages(props) {
  var eventStartDate = props.eventStartDate;
  var data = use(props.queryRef);
  var messages = data.messagesByTopic;
  if (messages.length > 0) {
    return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx("ul", {
                      children: messages.map(function (message, index) {
                            var decodedPayload = Core__Option.flatMap(message.payload, decodePayload);
                            var actorUserName = Core__Option.getOr(Core__Option.flatMap(decodedPayload, (function (p) {
                                        return p.actorUserName;
                                      })), "Unknown User");
                            var match = Core__Option.flatMap(decodedPayload, (function (p) {
                                    return p.activityType;
                                  }));
                            var match$1;
                            var exit = 0;
                            if (match === "rsvp_deleted") {
                              var messageCreatedAtDate = Util.Datetime.toDate(Util.Datetime.parse(message.createdAt));
                              var diffHours = DateFns.differenceInHours(eventStartDate, messageCreatedAtDate);
                              var timeColorClass = diffHours < 24 ? "text-red-600 font-medium" : (
                                  diffHours < 48 ? "text-yellow-600 font-medium" : "text-gray-500"
                                );
                              match$1 = [
                                JsxRuntime.jsx(LucideReact.X, {
                                      className: "size-5 text-white"
                                    }),
                                "bg-red-500",
                                Caml_option.some(t`left the event`),
                                timeColorClass
                              ];
                            } else {
                              exit = 1;
                            }
                            if (exit === 1) {
                              match$1 = [
                                JsxRuntime.jsx(LucideReact.User, {
                                      className: "size-5 text-white"
                                    }),
                                "bg-gray-400",
                                undefined,
                                "text-gray-500"
                              ];
                            }
                            return JsxRuntime.jsx("li", {
                                        children: JsxRuntime.jsxs("div", {
                                              children: [
                                                index !== (messages.length - 1 | 0) ? JsxRuntime.jsx("span", {
                                                        "aria-hidden": true,
                                                        className: "absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200"
                                                      }) : null,
                                                JsxRuntime.jsxs("div", {
                                                      children: [
                                                        JsxRuntime.jsx("div", {
                                                              children: JsxRuntime.jsx("span", {
                                                                    children: match$1[0],
                                                                    className: Core.cx(match$1[1], "flex size-8 items-center justify-center rounded-full ring-8 ring-white")
                                                                  })
                                                            }),
                                                        JsxRuntime.jsxs("div", {
                                                              children: [
                                                                JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsx("p", {
                                                                              children: actorUserName,
                                                                              className: "text-sm text-gray-900 font-medium"
                                                                            }),
                                                                        Core__Option.getOr(Core__Option.map(match$1[2], (function (desc) {
                                                                                    return JsxRuntime.jsx("p", {
                                                                                                children: desc,
                                                                                                className: "text-sm text-gray-500 italic"
                                                                                              });
                                                                                  })), null)
                                                                      ]
                                                                    }),
                                                                JsxRuntime.jsx("div", {
                                                                      children: JsxRuntime.jsx("time", {
                                                                            children: JsxRuntime.jsx(ReactIntl.FormattedRelativeTime, {
                                                                                  value: DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(Util.Datetime.parse(message.createdAt)), new Date()),
                                                                                  unit: "minute",
                                                                                  numeric: "always",
                                                                                  updateIntervalInSeconds: 60
                                                                                }),
                                                                            dateTime: message.createdAt
                                                                          }),
                                                                      className: Core.cx("whitespace-nowrap text-right text-sm", match$1[3])
                                                                    })
                                                              ],
                                                              className: "flex min-w-0 flex-1 justify-between space-x-4 pt-1.5"
                                                            })
                                                      ],
                                                      className: "relative flex space-x-3"
                                                    })
                                              ],
                                              className: "relative pb-8"
                                            })
                                      }, message.id);
                          }),
                      className: "-mb-8",
                      role: "list"
                    }),
                className: "flow-root mt-4"
              });
  } else {
    return null;
  }
}

var make = EventMessages;

export {
  Fragment ,
  decodePayload ,
  make ,
}
/*  Not a pure module */

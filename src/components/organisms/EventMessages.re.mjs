// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as DateFns from "date-fns";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LucideReact from "lucide-react";
import * as Core from "@linaria/core";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as EventMessages_query_graphql from "../../__generated__/EventMessages_query_graphql.re.mjs";
import * as EventMessagesUpdateViewerRsvpMessageMutation_graphql from "../../__generated__/EventMessagesUpdateViewerRsvpMessageMutation_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var getConnectionNodes = EventMessages_query_graphql.Utils.getConnectionNodes;

var convertFragment = EventMessages_query_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(EventMessages_query_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, EventMessages_query_graphql.node, convertFragment);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt
};

var convertVariables = EventMessagesUpdateViewerRsvpMessageMutation_graphql.Internal.convertVariables;

var convertResponse = EventMessagesUpdateViewerRsvpMessageMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = EventMessagesUpdateViewerRsvpMessageMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, EventMessagesUpdateViewerRsvpMessageMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables, EventMessagesUpdateViewerRsvpMessageMutation_graphql.node, convertResponse, convertWrapRawResponse);

var EventMessagesUpdateViewerRsvpMessageMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use$1
};

function decodePayload(payloadString) {
  try {
    var json = JSON.parse(payloadString);
    var dict = Js_json.decodeObject(json);
    if (dict !== undefined) {
      return {
              actorUserName: Core__Option.flatMap(Js_dict.get(dict, "actorUserName"), Js_json.decodeString),
              activityType: Core__Option.flatMap(Js_dict.get(dict, "activityType"), Js_json.decodeString),
              details: Core__Option.flatMap(Js_dict.get(dict, "details"), Js_json.decodeString)
            };
    } else {
      return ;
    }
  }
  catch (exn){
    return ;
  }
}

function EventMessages$Message(props) {
  var eventId = props.eventId;
  var match = React.useState(function () {
        return "";
      });
  var setEditedMessage = match[1];
  var editedMessage = match[0];
  var match$1 = use$1();
  var commitUpdate = match$1[0];
  var onSave = function () {
    var trimmedMessage = editedMessage.trim();
    if (trimmedMessage === "") {
      return ;
    }
    var connectionId = EventMessages_query_graphql.makeConnectionId("client:root", eventId + ".updated");
    commitUpdate({
          connections: [connectionId],
          input: {
            eventId: eventId,
            message: trimmedMessage
          }
        }, undefined, undefined, undefined, undefined, undefined, undefined);
    setEditedMessage(function (param) {
          return "";
        });
  };
  var onSubmit = function (e) {
    e.preventDefault();
    onSave();
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("label", {
                      children: t`Status message`,
                      className: "block text-sm font-medium text-gray-700"
                    }),
                JsxRuntime.jsxs("form", {
                      children: [
                        JsxRuntime.jsx("input", {
                              className: "block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6",
                              placeholder: t`Type a status message for people to see... such as 'I will arrive at 19:00.'`,
                              value: editedMessage,
                              onChange: (function (e) {
                                  setEditedMessage(e.target.value);
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: t`Send`,
                              className: "rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600",
                              type: "submit"
                            })
                      ],
                      className: "mt-1 flex gap-2",
                      onSubmit: onSubmit
                    })
              ],
              className: "mb-4"
            });
}

var Message = {
  make: EventMessages$Message
};

function EventMessages(props) {
  var eventId = props.eventId;
  var eventStartDate = props.eventStartDate;
  var data = use(props.queryRef);
  var messages = getConnectionNodes(data.messagesByTopic);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h2", {
                      children: "Activity",
                      className: "text-lg font-semibold mb-4"
                    }),
                Core__Option.getOr(Core__Option.map(props.viewerHasRsvp, (function (has) {
                            if (has) {
                              return JsxRuntime.jsx(EventMessages$Message, {
                                          eventId: eventId
                                        });
                            } else {
                              return null;
                            }
                          })), null),
                messages.length === 0 ? JsxRuntime.jsxs("div", {
                        children: [
                          JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx(LucideReact.MessageCircle, {
                                      className: "size-12 mx-auto opacity-50"
                                    }),
                                className: "text-gray-400 mb-2"
                              }),
                          JsxRuntime.jsx("p", {
                                children: t`No activity yet`,
                                className: "text-gray-500 text-sm"
                              })
                        ],
                        className: "text-center py-8"
                      }) : JsxRuntime.jsx("div", {
                        children: messages.map(function (message) {
                              var decodedPayload = Core__Option.flatMap(message.payload, decodePayload);
                              var actorUserName = Core__Option.getOr(Core__Option.flatMap(decodedPayload, (function (p) {
                                          return p.actorUserName;
                                        })), "Unknown User");
                              var activityTypeOpt = Core__Option.flatMap(decodedPayload, (function (p) {
                                      return p.activityType;
                                    }));
                              var detailsOpt = Core__Option.flatMap(decodedPayload, (function (p) {
                                      return p.details;
                                    }));
                              var match = Core__Option.getOr(activityTypeOpt, "");
                              var match$1;
                              switch (match) {
                                case "host_message" :
                                    match$1 = [
                                      JsxRuntime.jsx(LucideReact.MessageCircle, {
                                            className: "size-4 text-indigo-600"
                                          }),
                                      "bg-indigo-100"
                                    ];
                                    break;
                                case "rsvp_created" :
                                    match$1 = [
                                      JsxRuntime.jsx(LucideReact.Check, {
                                            className: "size-4 text-green-600"
                                          }),
                                      "bg-green-100"
                                    ];
                                    break;
                                case "rsvp_deleted" :
                                    match$1 = [
                                      JsxRuntime.jsx(LucideReact.X, {
                                            className: "size-4 text-red-600"
                                          }),
                                      "bg-red-100"
                                    ];
                                    break;
                                case "rsvp_promoted" :
                                    match$1 = [
                                      JsxRuntime.jsx(LucideReact.ArrowUpCircle, {
                                            className: "size-4 text-blue-600"
                                          }),
                                      "bg-blue-100"
                                    ];
                                    break;
                                case "update" :
                                    match$1 = [
                                      JsxRuntime.jsx(LucideReact.Bell, {
                                            className: "size-4 text-blue-600"
                                          }),
                                      "bg-blue-100"
                                    ];
                                    break;
                                case "user_message" :
                                    match$1 = [
                                      JsxRuntime.jsx(LucideReact.MessageCircle, {
                                            className: "size-4 text-slate-600"
                                          }),
                                      "bg-slate-100"
                                    ];
                                    break;
                                default:
                                  match$1 = [
                                    JsxRuntime.jsx(LucideReact.User, {
                                          className: "size-4 text-gray-600"
                                        }),
                                    "bg-gray-100"
                                  ];
                              }
                              var mainMessageText;
                              if (activityTypeOpt !== undefined) {
                                switch (activityTypeOpt) {
                                  case "rsvp_created" :
                                      mainMessageText = Core__Option.getOr(detailsOpt, t`joined the event`);
                                      break;
                                  case "rsvp_deleted" :
                                      mainMessageText = Core__Option.getOr(detailsOpt, t`left the event`);
                                      break;
                                  case "rsvp_promoted" :
                                      mainMessageText = Core__Option.getOr(detailsOpt, t`joined from waitlist`);
                                      break;
                                  default:
                                    mainMessageText = Core__Option.getOr(detailsOpt, "");
                                }
                              } else {
                                mainMessageText = Core__Option.getOr(detailsOpt, "");
                              }
                              var actorNameEl;
                              var exit = 0;
                              if (activityTypeOpt === "host_message") {
                                actorNameEl = JsxRuntime.jsx("span", {
                                      children: actorUserName,
                                      className: "font-medium text-indigo-600"
                                    });
                              } else {
                                exit = 1;
                              }
                              if (exit === 1) {
                                actorNameEl = JsxRuntime.jsx("span", {
                                      children: actorUserName,
                                      className: "font-medium text-gray-900"
                                    });
                              }
                              var timeClassName;
                              if (activityTypeOpt === "rsvp_deleted") {
                                var messageCreatedAtDate = Util.Datetime.toDate(Util.Datetime.parse(message.createdAt));
                                var diffHours = DateFns.differenceInHours(eventStartDate, messageCreatedAtDate);
                                timeClassName = diffHours < 24 ? "text-red-600 font-medium" : (
                                    diffHours < 48 ? "text-yellow-600 font-medium" : "text-gray-500"
                                  );
                              } else {
                                timeClassName = "text-gray-500";
                              }
                              var dt = Util.Datetime.toDate(Util.Datetime.parse(message.createdAt));
                              return JsxRuntime.jsxs("div", {
                                          children: [
                                            JsxRuntime.jsx("div", {
                                                  children: JsxRuntime.jsx("div", {
                                                        children: match$1[0],
                                                        className: Core.cx(match$1[1], "p-2 rounded-full")
                                                      }),
                                                  className: "mr-3 mt-1"
                                                }),
                                            JsxRuntime.jsxs("div", {
                                                  children: [
                                                    mainMessageText === "" ? null : JsxRuntime.jsx("p", {
                                                            children: mainMessageText,
                                                            className: "text-gray-700"
                                                          }),
                                                    JsxRuntime.jsxs("p", {
                                                          children: [
                                                            actorNameEl,
                                                            " • ",
                                                            JsxRuntime.jsxs("span", {
                                                                  children: [
                                                                    JsxRuntime.jsx(ReactIntl.FormattedDate, {
                                                                          value: dt,
                                                                          month: "short",
                                                                          day: "numeric"
                                                                        }),
                                                                    " ",
                                                                    JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                          value: dt
                                                                        })
                                                                  ],
                                                                  className: timeClassName
                                                                })
                                                          ],
                                                          className: "text-xs text-gray-500 mt-1"
                                                        })
                                                  ],
                                                  className: "flex-1"
                                                })
                                          ],
                                          className: "flex"
                                        }, message.id);
                            }),
                        className: "space-y-4"
                      })
              ],
              className: "bg-white rounded-lg shadow-sm p-4 md:p-5 mt-4"
            });
}

var make = EventMessages;

export {
  Fragment ,
  EventMessagesUpdateViewerRsvpMessageMutation ,
  decodePayload ,
  Message ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Grid from "../vanillaui/atoms/Grid.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FormSection from "../molecules/forms/FormSection.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as FramerMotion from "framer-motion";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import ReactGoogleAutocomplete from "react-google-autocomplete";
import * as AutocompleteLocationFormMutation_graphql from "../../__generated__/AutocompleteLocationFormMutation_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var sessionContext = AppContext.SessionContext;

var convertVariables = AutocompleteLocationFormMutation_graphql.Internal.convertVariables;

var convertResponse = AutocompleteLocationFormMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = AutocompleteLocationFormMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, AutocompleteLocationFormMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, AutocompleteLocationFormMutation_graphql.node, convertResponse, convertWrapRawResponse);

var AutocompleteLocationMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use
};

function mapToAutocompleteLocationInput(resp) {
  
}

function AutocompleteLocation(props) {
  var navigate = ReactRouterDom.useNavigate();
  var match = use();
  var commitMutationCreate = match[0];
  var onSelect = function (place) {
    var match = place.name;
    var match$1 = place.formatted_address;
    var match$2 = place.geometry;
    var match$3 = place.place_id;
    if (match !== undefined && match$1 !== undefined && match$2 !== undefined && match$3 !== undefined) {
      commitMutationCreate({
            input: {
              formattedAddress: match$1,
              lat: match$2.location.lat(),
              lng: match$2.location.lng(),
              mapsId: match$3,
              name: match
            }
          }, undefined, undefined, undefined, (function (response, _errors) {
              Core__Option.map(response.autocompleteLocation.location, (function ($$location) {
                      navigate($$location.id, undefined);
                    }));
            }), undefined, undefined);
      return ;
    }
    
  };
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  return JsxRuntime.jsxs(Grid.make, {
                              children: [
                                JsxRuntime.jsx(FormSection.make, {
                                      title: t`event location`,
                                      description: Caml_option.some(t`choose the location where this event will be held.`),
                                      children: JsxRuntime.jsx("div", {
                                            children: JsxRuntime.jsx(ReactGoogleAutocomplete, {
                                                  apiKey: "AIzaSyCZWn4QS-HcYV_KDt9dOSy-EiJ9s3m8WIk",
                                                  onPlaceSelected: onSelect,
                                                  options: {
                                                    types: ["establishment"],
                                                    fields: [
                                                      "place_id",
                                                      "geometry.location",
                                                      "name",
                                                      "formatted_address",
                                                      "plus_code"
                                                    ]
                                                  }
                                                }),
                                            className: "mt-10 grid grid-cols-1 gap-x-6 gap-y-8"
                                          })
                                    }),
                                JsxRuntime.jsx(FramerMotion.AnimatePresence, {
                                      mode: "wait",
                                      children: JsxRuntime.jsx(ReactRouterDom.Outlet, {})
                                    })
                              ]
                            });
                })
            });
}

var make = AutocompleteLocation;

export {
  sessionContext ,
  AutocompleteLocationMutation ,
  mapToAutocompleteLocationInput ,
  make ,
}
/*  Not a pure module */

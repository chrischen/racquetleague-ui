// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as LucideReact from "lucide-react";
import * as Core$1 from "@linaria/core";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as ReactExperimental from "rescript-relay/src/ReactExperimental.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as MatchList_match_graphql from "../../__generated__/MatchList_match_graphql.re.mjs";
import * as Solid from "@heroicons/react/24/solid";
import * as MatchListFragment_graphql from "../../__generated__/MatchListFragment_graphql.re.mjs";
import * as MatchListTeam_user_graphql from "../../__generated__/MatchListTeam_user_graphql.re.mjs";
import * as MatchListUser_user_graphql from "../../__generated__/MatchListUser_user_graphql.re.mjs";
import * as Outline from "@heroicons/react/24/outline";
import * as MatchListRefetchQuery_graphql from "../../__generated__/MatchListRefetchQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t, plural } from '@lingui/macro'
;

var getConnectionNodes = MatchListFragment_graphql.Utils.getConnectionNodes;

var convertFragment = MatchListFragment_graphql.Internal.convertFragment;

function use(fRef) {
  return RescriptRelay_Fragment.useFragment(MatchListFragment_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, MatchListFragment_graphql.node, convertFragment);
}

var makeRefetchVariables = MatchListRefetchQuery_graphql.Types.makeRefetchVariables;

var convertRefetchVariables = MatchListRefetchQuery_graphql.Internal.convertVariables;

function useRefetchable(fRef) {
  return RescriptRelay_Fragment.useRefetchableFragment(MatchListFragment_graphql.node, convertFragment, convertRefetchVariables, fRef);
}

function usePagination(fRef) {
  return RescriptRelay_Fragment.usePaginationFragment(MatchListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

function useBlockingPagination(fRef) {
  return RescriptRelay_Fragment.useBlockingPaginationFragment(MatchListFragment_graphql.node, fRef, convertFragment, convertRefetchVariables);
}

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables,
  convertRefetchVariables: convertRefetchVariables,
  useRefetchable: useRefetchable,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination
};

var convertFragment$1 = MatchList_match_graphql.Internal.convertFragment;

function use$1(fRef) {
  return RescriptRelay_Fragment.useFragment(MatchList_match_graphql.node, convertFragment$1, fRef);
}

function useOpt$1(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, MatchList_match_graphql.node, convertFragment$1);
}

var ItemFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment$1,
  use: use$1,
  useOpt: useOpt$1
};

function make(key, id) {
  return [
          key,
          id
        ];
}

function toId(param) {
  return param[1];
}

var NodeId = {
  toId: toId,
  make: make
};

function toDomain(t) {
  var match = t.split(":");
  if (match.length !== 2) {
    return {
            TAG: "Error",
            _0: "InvalidNode"
          };
  }
  var key = match[0];
  var id = match[1];
  return {
          TAG: "Ok",
          _0: [
            key,
            id
          ]
        };
}

var NodeIdDto = {
  toDomain: toDomain
};

var convertFragment$2 = MatchListTeam_user_graphql.Internal.convertFragment;

function use$2(fRef) {
  return RescriptRelay_Fragment.useFragment(MatchListTeam_user_graphql.node, convertFragment$2, fRef);
}

function useOpt$2(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, MatchListTeam_user_graphql.node, convertFragment$2);
}

var MatchListTeamFragment_gender_decode = MatchListTeam_user_graphql.Utils.gender_decode;

var MatchListTeamFragment_gender_fromString = MatchListTeam_user_graphql.Utils.gender_fromString;

var MatchListTeamFragment = {
  gender_decode: MatchListTeamFragment_gender_decode,
  gender_fromString: MatchListTeamFragment_gender_fromString,
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment$2,
  use: use$2,
  useOpt: useOpt$2
};

function MatchList$InlineTeam(props) {
  var players = props.players;
  return players.map(function (player, i) {
              var player$1 = use$2(player);
              return JsxRuntime.jsxs(React.Fragment, {
                          children: [
                            JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                  to: "../p/" + player$1.id,
                                  children: Core__Option.getOr(player$1.lineUsername, ""),
                                  className: "font-medium text-gray-900"
                                }, player$1.id),
                            i !== (players.length - 1 | 0) ? " â€¢ " : null
                          ]
                        }, player$1.id);
            });
}

var InlineTeam = {
  make: MatchList$InlineTeam
};

var convertFragment$3 = MatchListUser_user_graphql.Internal.convertFragment;

function use$3(fRef) {
  return RescriptRelay_Fragment.useFragment(MatchListUser_user_graphql.node, convertFragment$3, fRef);
}

function useOpt$3(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, MatchListUser_user_graphql.node, convertFragment$3);
}

var MatchListUserFragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment$3,
  use: use$3,
  useOpt: useOpt$3
};

function td(prim) {
  return Core.i18n._(prim);
}

function ts(prim0, prim1) {
  return Caml_splice_call.spliceApply(t, [
              prim0,
              prim1
            ]);
}

function MatchList$Match(props) {
  var match = use$1(props.match);
  var winners = match.winners;
  var namespace = match.namespace;
  var losers = match.losers;
  var createdAt = match.createdAt;
  var isWinner = Core__Option.isSome(Core__Option.flatMap(props.user, (function (user) {
              var user$1 = use$3(user);
              return Core__Option.flatMap(winners, (function (__x) {
                            return Core__Array.findMap(__x, (function (x) {
                                          if (x.id === user$1.id) {
                                            return user$1.id;
                                          }
                                          
                                        }));
                          }));
            })));
  var tmp;
  tmp = namespace === "doubles:comp" ? JsxRuntime.jsx(LucideReact.Trophy, {
          className: "h-4 w-4 text-amber-500"
        }) : null;
  return JsxRuntime.jsx("li", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      props.idx !== (props.length - 1 | 0) ? JsxRuntime.jsx("span", {
                              "aria-hidden": true,
                              className: "absolute left-4 top-4 -ml-px h-full w-0.5 bg-gray-200"
                            }) : null,
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("span", {
                                          children: isWinner ? JsxRuntime.jsx(Solid.CheckIcon, {
                                                  className: "h-5 w-5 text-white",
                                                  "aria-hidden": "true"
                                                }) : JsxRuntime.jsx(Outline.XMarkIcon, {
                                                  className: "h-5 w-5 text-white",
                                                  "aria-hidden": "true"
                                                }),
                                          className: Core$1.cx(isWinner ? "bg-green-500" : "bg-red-500", "h-8 w-8 rounded-full flex items-center justify-center ring-8 ring-white")
                                        })
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsxs("div", {
                                            children: [
                                              JsxRuntime.jsxs("p", {
                                                    children: [
                                                      tmp,
                                                      isWinner ? Core__Option.getOr(Core__Option.map(winners, (function (winners) {
                                                                    return JsxRuntime.jsx(MatchList$InlineTeam, {
                                                                                players: winners.map(function (x) {
                                                                                      return x.fragmentRefs;
                                                                                    })
                                                                              });
                                                                  })), null) : Core__Option.getOr(Core__Option.map(losers, (function (winners) {
                                                                    return JsxRuntime.jsx(MatchList$InlineTeam, {
                                                                                players: winners.map(function (x) {
                                                                                      return x.fragmentRefs;
                                                                                    })
                                                                              });
                                                                  })), null),
                                                      JsxRuntime.jsx("span", {
                                                            children: " VS ",
                                                            className: "font-extrabold"
                                                          }),
                                                      isWinner ? Core__Option.getOr(Core__Option.map(losers, (function (winners) {
                                                                    return JsxRuntime.jsx(MatchList$InlineTeam, {
                                                                                players: winners.map(function (x) {
                                                                                      return x.fragmentRefs;
                                                                                    })
                                                                              });
                                                                  })), null) : Core__Option.getOr(Core__Option.map(winners, (function (winners) {
                                                                    return JsxRuntime.jsx(MatchList$InlineTeam, {
                                                                                players: winners.map(function (x) {
                                                                                      return x.fragmentRefs;
                                                                                    })
                                                                              });
                                                                  })), null)
                                                    ],
                                                    className: "text-sm text-gray-500 flex items-center gap-1"
                                                  }),
                                              JsxRuntime.jsx(JsxRuntime.Fragment, {
                                                    children: Caml_option.some(JsxRuntime.jsxs("div", {
                                                              children: [
                                                                JsxRuntime.jsx("div", {
                                                                      children: JsxRuntime.jsxs("div", {
                                                                            children: [
                                                                              t`Score:`,
                                                                              " ",
                                                                              Core__Option.getOr(Core__Option.map(match.score, (function (score) {
                                                                                          if (score.length !== 2) {
                                                                                            return null;
                                                                                          }
                                                                                          var winScore = score[0];
                                                                                          var loseScore = score[1];
                                                                                          if (isWinner) {
                                                                                            return winScore.toFixed(0) + " - " + loseScore.toFixed(0);
                                                                                          } else {
                                                                                            return loseScore.toFixed(0) + " - " + winScore.toFixed(0);
                                                                                          }
                                                                                        })), null)
                                                                            ],
                                                                            className: "py-0.5 inline text-lg leading-5 text-gray-500"
                                                                          }),
                                                                      className: "flex gap-x-4 text-center"
                                                                    }),
                                                                JsxRuntime.jsx("p", {
                                                                      className: "text-sm leading-6 text-gray-500"
                                                                    })
                                                              ],
                                                              className: "flex-auto rounded-md p-3 ring-1 ring-inset ring-gray-200 mt-5"
                                                            }))
                                                  })
                                            ]
                                          }),
                                      JsxRuntime.jsx("div", {
                                            children: JsxRuntime.jsx("time", {
                                                  children: Core__Option.getOr(Core__Option.map(createdAt, (function (date) {
                                                              return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                          children: [
                                                                            JsxRuntime.jsx(ReactIntl.FormattedDate, {
                                                                                  value: Util.Datetime.toDate(date)
                                                                                }),
                                                                            " ",
                                                                            JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                  value: Util.Datetime.toDate(date)
                                                                                })
                                                                          ]
                                                                        });
                                                            })), ""),
                                                  dateTime: Core__Option.getOr(Core__Option.map(createdAt, (function (date) {
                                                              return Util.Datetime.toDate(date).toDateString();
                                                            })), "")
                                                }),
                                            className: "whitespace-nowrap text-right text-sm text-gray-500"
                                          })
                                    ],
                                    className: "flex min-w-0 flex-1 justify-between space-x-4 pt-1.5"
                                  })
                            ],
                            className: "relative flex space-x-3"
                          })
                    ],
                    className: "relative pb-8"
                  })
            }, match.id);
}

var Match = {
  td: td,
  ts: ts,
  make: MatchList$Match
};

function MatchList(props) {
  var user = props.user;
  ReactExperimental.useTransition();
  var match = usePagination(props.matches);
  var data = match.data;
  var matches = getConnectionNodes(data.matches);
  var pageInfo = data.matches.pageInfo;
  var hasPrevious = pageInfo.hasPreviousPage;
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                !match.isLoadingPrevious && hasPrevious ? Core__Option.getOr(Core__Option.map(pageInfo.startCursor, (function (startCursor) {
                              return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                          to: "./?before=" + encodeURIComponent(startCursor),
                                          children: t`...load previous matches`,
                                          className: "mt-5"
                                        });
                            })), null) : null,
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("ul", {
                            children: matches.map(function (edge, idx) {
                                  return JsxRuntime.jsx(MatchList$Match, {
                                              user: user,
                                              match: edge.fragmentRefs,
                                              idx: idx,
                                              length: matches.length
                                            }, edge.id);
                                }),
                            className: "",
                            role: "list"
                          }),
                      className: "flow-root mt-5"
                    }),
                JsxRuntime.jsx("div", {
                      children: match.hasNext && !match.isLoadingNext ? Core__Option.getOr(Core__Option.map(pageInfo.endCursor, (function (endCursor) {
                                    return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                to: "./?after=" + encodeURIComponent(endCursor),
                                                children: t`Load more matches...`
                                              });
                                  })), null) : null,
                      className: ""
                    })
              ]
            });
}

var make$1 = MatchList;

var $$default = MatchList;

export {
  Fragment ,
  ItemFragment ,
  NodeId ,
  NodeIdDto ,
  MatchListTeamFragment ,
  InlineTeam ,
  MatchListUserFragment ,
  Match ,
  make$1 as make,
  $$default as default,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LucideReact from "lucide-react";
import * as AIResponseCard from "../molecules/AIResponseCard.re.mjs";
import * as ExamplePrompts from "../atoms/ExamplePrompts.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as AIAssistantModalChatMutation_graphql from "../../__generated__/AIAssistantModalChatMutation_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = AIAssistantModalChatMutation_graphql.Internal.convertVariables;

var convertResponse = AIAssistantModalChatMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = AIAssistantModalChatMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, AIAssistantModalChatMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, AIAssistantModalChatMutation_graphql.node, convertResponse, convertWrapRawResponse);

var ChatMutation_messageType_decode = AIAssistantModalChatMutation_graphql.Utils.messageType_decode;

var ChatMutation_messageType_fromString = AIAssistantModalChatMutation_graphql.Utils.messageType_fromString;

var ChatMutation = {
  messageType_decode: ChatMutation_messageType_decode,
  messageType_fromString: ChatMutation_messageType_fromString,
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use
};

function AIAssistantModal(props) {
  var context = props.context;
  var onOpenChange = props.onOpenChange;
  var __open_ = props.open_;
  var open_ = __open_ !== undefined ? __open_ : false;
  var match = React.useState(function () {
        return "";
      });
  var setPrompt = match[1];
  var prompt = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setIsLoading = match$1[1];
  var isLoading = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setResponse = match$2[1];
  var response = match$2[0];
  var match$3 = use();
  var chatMutate = match$3[0];
  var handleAsk = function () {
    if (prompt.trim() === "") {
      return ;
    } else {
      setIsLoading(function (param) {
            return true;
          });
      chatMutate({
            input: {
              message: prompt
            }
          }, undefined, undefined, undefined, (function (result, _errors) {
              var chatResponse = result.chat;
              var message = chatResponse.message;
              if (message !== undefined) {
                var suggestedEvents = Core__Option.map(chatResponse.suggestedEvents, (function (events) {
                        return events.map(function ($$event) {
                                    var startDateStr = Util.Datetime.toDate($$event.startDate).toISOString();
                                    var endDateStr = Util.Datetime.toDate($$event.endDate).toISOString();
                                    return {
                                            title: $$event.title,
                                            date: startDateStr,
                                            time: endDateStr,
                                            location: $$event.address,
                                            description: $$event.details,
                                            maxRsvps: $$event.maxRsvps
                                          };
                                  });
                      }));
                setResponse(function (param) {
                      return {
                              summary: message.content,
                              eventDetails: undefined,
                              suggestedEvents: suggestedEvents
                            };
                    });
                setPrompt(function (param) {
                      return "";
                    });
              } else {
                setResponse(function (param) {
                      return {
                              summary: Core__Option.getOr(chatResponse.error, t`I couldn't process that request. Please try again.`),
                              eventDetails: undefined,
                              suggestedEvents: undefined
                            };
                    });
              }
              setIsLoading(function (param) {
                    return false;
                  });
            }), (function (_error) {
              setResponse(function (param) {
                    return {
                            summary: t`An error occurred. Please try again.`,
                            eventDetails: undefined,
                            suggestedEvents: undefined
                          };
                  });
              setIsLoading(function (param) {
                    return false;
                  });
            }), undefined);
      return ;
    }
  };
  var handleExampleClick = function (example) {
    setPrompt(function (param) {
          return example;
        });
    setResponse(function (param) {
          
        });
  };
  var handleReset = function () {
    setPrompt(function (param) {
          return "";
        });
    setResponse(function (param) {
          
        });
  };
  var examplePrompts = [
    t`Need 5 players for KPI Park tomorrow 6-9pm. Split the cost.`,
    t`Badminton every thursday next month at Akabane Elementary 7-9pm.`
  ];
  return JsxRuntime.jsx(ReactDialog.Root, {
              children: JsxRuntime.jsxs(ReactDialog.Portal, {
                    children: [
                      JsxRuntime.jsx(ReactDialog.Overlay, {
                            className: "fixed inset-0 bg-black/40 backdrop-blur-sm animate-in fade-in z-100"
                          }),
                      JsxRuntime.jsx(ReactDialog.Content, {
                            className: "fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[90vw] max-w-2xl max-h-[85vh] overflow-hidden animate-in fade-in zoom-in-95 duration-200",
                            children: JsxRuntime.jsxs("div", {
                                  children: [
                                    JsxRuntime.jsxs("div", {
                                          children: [
                                            JsxRuntime.jsxs("div", {
                                                  children: [
                                                    JsxRuntime.jsx("div", {
                                                          children: JsxRuntime.jsx(LucideReact.Sparkles, {
                                                                className: "w-5 h-5 text-white"
                                                              }),
                                                          className: "w-10 h-10 rounded-2xl bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center"
                                                        }),
                                                    JsxRuntime.jsxs("div", {
                                                          children: [
                                                            JsxRuntime.jsx(ReactDialog.Title, {
                                                                  children: t`AI Assistant`,
                                                                  className: "text-lg font-semibold text-gray-900 dark:text-white"
                                                                }),
                                                            JsxRuntime.jsx(ReactDialog.Description, {
                                                                  children: JsxRuntime.jsx("span", {
                                                                        children: t`Let me know when and where you'd like to play, and I'll help you create an event. You can continue talking to me in a conversation to refine any details.`,
                                                                        className: "text-sm text-gray-500 dark:text-gray-400"
                                                                      })
                                                                })
                                                          ]
                                                        })
                                                  ],
                                                  className: "flex items-center gap-3"
                                                }),
                                            JsxRuntime.jsx(ReactDialog.Close, {
                                                  children: Caml_option.some(JsxRuntime.jsx("button", {
                                                            children: JsxRuntime.jsx(LucideReact.X, {
                                                                  className: "w-4 h-4 text-gray-600 dark:text-gray-400"
                                                                }),
                                                            className: "w-8 h-8 rounded-full bg-gray-100/80 dark:bg-gray-800/80 hover:bg-gray-200/80 dark:hover:bg-gray-700/80 flex items-center justify-center transition-colors"
                                                          }))
                                                })
                                          ],
                                          className: "flex items-center justify-between p-6 border-b border-gray-200/50 dark:border-gray-700/50 flex-shrink-0"
                                        }),
                                    JsxRuntime.jsxs("div", {
                                          children: [
                                            response !== undefined ? null : JsxRuntime.jsx(ExamplePrompts.make, {
                                                    examples: examplePrompts,
                                                    onExampleClick: handleExampleClick
                                                  }),
                                            Core__Option.getOr(Core__Option.map(response, (function (resp) {
                                                        var handleEventsCreated = Core__Option.map(onOpenChange, (function (fn) {
                                                                return function () {
                                                                  fn(false);
                                                                };
                                                              }));
                                                        return JsxRuntime.jsx(AIResponseCard.make, {
                                                                    response: resp,
                                                                    activitySlug: Core__Option.getOr(context.activitySlug, "pickleball"),
                                                                    clubId: context.clubId,
                                                                    locationAddress: context.locationAddress,
                                                                    onEventsCreated: handleEventsCreated
                                                                  });
                                                      })), null)
                                          ],
                                          className: "p-6 space-y-6 overflow-y-auto flex-1"
                                        }),
                                    JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("textarea", {
                                                        className: "w-full px-4 py-3 bg-gray-50/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 rounded-2xl text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500/50 resize-none transition-all",
                                                        disabled: isLoading,
                                                        placeholder: t`Describe the event you want to create...`,
                                                        rows: 3,
                                                        value: prompt,
                                                        onChange: (function (e) {
                                                            var value = e.target.value;
                                                            setPrompt(function (param) {
                                                                  return value;
                                                                });
                                                          })
                                                      }),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx("button", {
                                                                children: isLoading ? JsxRuntime.jsxs("span", {
                                                                        children: [
                                                                          JsxRuntime.jsxs("svg", {
                                                                                children: [
                                                                                  JsxRuntime.jsx("circle", {
                                                                                        className: "opacity-25",
                                                                                        cx: "12",
                                                                                        cy: "12",
                                                                                        fill: "none",
                                                                                        r: "10",
                                                                                        stroke: "currentColor",
                                                                                        strokeWidth: "4"
                                                                                      }),
                                                                                  JsxRuntime.jsx("path", {
                                                                                        className: "opacity-75",
                                                                                        d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z",
                                                                                        fill: "currentColor"
                                                                                      })
                                                                                ],
                                                                                className: "animate-spin h-5 w-5",
                                                                                viewBox: "0 0 24 24"
                                                                              }),
                                                                          t`Processing...`
                                                                        ],
                                                                        className: "flex items-center justify-center gap-2"
                                                                      }) : (
                                                                    response !== undefined ? t`Reply` : t`Ask`
                                                                  ),
                                                                className: "flex-1 px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 disabled:from-gray-300 disabled:to-gray-300 dark:disabled:from-gray-700 dark:disabled:to-gray-700 text-white rounded-2xl font-medium transition-all disabled:cursor-not-allowed shadow-lg shadow-purple-500/25",
                                                                disabled: prompt.trim() === "" || isLoading,
                                                                onClick: (function (param) {
                                                                    handleAsk();
                                                                  })
                                                              }),
                                                          Core__Option.getOr(Core__Option.map(response, (function (param) {
                                                                      return JsxRuntime.jsx("button", {
                                                                                  children: t`New`,
                                                                                  className: "px-6 py-3 bg-gray-100/80 dark:bg-gray-800/80 hover:bg-gray-200/80 dark:hover:bg-gray-700/80 text-gray-700 dark:text-gray-300 rounded-2xl font-medium transition-all backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50",
                                                                                  onClick: (function (param) {
                                                                                      handleReset();
                                                                                    })
                                                                                });
                                                                    })), null)
                                                        ],
                                                        className: "flex gap-2"
                                                      })
                                                ],
                                                className: "space-y-3"
                                              }),
                                          className: "p-6 border-t border-gray-200/50 dark:border-gray-700/50 bg-white/60 dark:bg-gray-900/60 backdrop-blur-xl flex-shrink-0"
                                        })
                                  ],
                                  className: "relative bg-white/80 dark:bg-gray-900/80 backdrop-blur-2xl rounded-3xl shadow-2xl border border-white/20 dark:border-gray-700/30 flex flex-col max-h-[85vh]"
                                })
                          })
                    ]
                  }),
              onOpenChange: onOpenChange,
              open: open_
            });
}

var make = AIAssistantModal;

export {
  ChatMutation ,
  make ,
}
/*  Not a pure module */

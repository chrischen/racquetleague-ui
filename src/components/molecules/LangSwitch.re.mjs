// Generated by ReScript, PLEASE EDIT WITH CARE

import * as I18n from "../../lib/I18n.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as React from "@lingui/react";
import * as ReactRouterDom from "react-router-dom";
import * as React$1 from "@headlessui/react";
import * as JsxRuntime from "react/jsx-runtime";
import * as DropdownTsx from "../catalyst/dropdown.tsx";
import * as Solid from "@heroicons/react/24/solid";

function LangSwitch$LocaleButton(props) {
  var locale = props.locale;
  var locPath = I18n.getLangPath(locale.lang);
  if (props.active) {
    return JsxRuntime.jsx("span", {
                children: locale.display,
                className: "font-semibold text-gray-900"
              });
  } else {
    return JsxRuntime.jsx(ReactRouterDom.Link, {
                to: locPath + props.path,
                children: JsxRuntime.jsx("span", {
                      children: locale.display,
                      className: "text-gray-700"
                    })
              });
  }
}

var LocaleButton = {
  make: LangSwitch$LocaleButton
};

var locales = [
  {
    lang: "en",
    display: "English",
    flag: "üá∫üá∏"
  },
  {
    lang: "ja",
    display: "Êó•Êú¨Ë™û",
    flag: "üáØüáµ"
  },
  {
    lang: "th",
    display: "‡πÑ‡∏ó‡∏¢",
    flag: "üáπüá≠"
  },
  {
    lang: "zh-TW",
    display: "ÁπÅÈ´î‰∏≠Êñá",
    flag: "üáπüáº"
  },
  {
    lang: "zh-CN",
    display: "ÁÆÄ‰Ωì‰∏≠Êñá",
    flag: "üá®üá≥"
  }
];

var make = DropdownTsx.DropdownButton;

var DropdownButton = {
  make: make
};

var make$1 = DropdownTsx.DropdownMenu;

var DropdownMenu = {
  make: make$1
};

var make$2 = DropdownTsx.DropdownItem;

var DropdownItem = {
  make: make$2
};

var make$3 = DropdownTsx.DropdownLabel;

var DropdownLabel = {
  make: make$3
};

function LangSwitch(props) {
  var match = React.useLingui();
  var locale = match.i18n.locale;
  var match$1 = ReactRouterDom.useLocation();
  var basePath = I18n.getBasePath(locale, match$1.pathname);
  var basePathWithQuery = basePath + match$1.search;
  var currentLocale = Core__Option.getOr(locales.find(function (loc) {
            return loc.lang === locale;
          }), {
        lang: "en",
        display: "English",
        flag: "üá∫üá∏"
      });
  return JsxRuntime.jsxs(React$1.Menu, {
              children: [
                JsxRuntime.jsxs(make, {
                      className: "inline-flex items-center gap-2 rounded-lg px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500",
                      children: [
                        JsxRuntime.jsx("span", {
                              children: currentLocale.flag
                            }),
                        JsxRuntime.jsx("span", {
                              children: currentLocale.display
                            }),
                        JsxRuntime.jsx(Solid.ChevronDownIcon, {
                              className: "w-4 h-4"
                            })
                      ]
                    }),
                JsxRuntime.jsx(make$1, {
                      className: "min-w-48",
                      anchor: "bottom start",
                      children: locales.map(function (loc) {
                            var isActive = loc.lang === locale;
                            return JsxRuntime.jsx(make$2, {
                                        className: isActive ? "bg-gray-50" : "",
                                        children: JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx("span", {
                                                      children: loc.flag,
                                                      className: "text-lg"
                                                    }),
                                                JsxRuntime.jsx(make$3, {
                                                      children: JsxRuntime.jsx(LangSwitch$LocaleButton, {
                                                            locale: loc,
                                                            path: basePathWithQuery,
                                                            active: isActive
                                                          })
                                                    })
                                              ],
                                              className: "flex items-center gap-3"
                                            })
                                      }, loc.lang);
                          })
                    })
              ]
            });
}

var Dropdown;

var make$4 = LangSwitch;

var $$default = LangSwitch;

export {
  LocaleButton ,
  locales ,
  Dropdown ,
  DropdownButton ,
  DropdownMenu ,
  DropdownItem ,
  DropdownLabel ,
  make$4 as make,
  $$default as default,
}
/* make Not a pure module */

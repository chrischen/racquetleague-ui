// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Fragment from "rescript-relay/src/RescriptRelay_Fragment.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as SubscribeActivityMutation_graphql from "../../__generated__/SubscribeActivityMutation_graphql.re.mjs";
import * as SubscribeActivity_activity_graphql from "../../__generated__/SubscribeActivity_activity_graphql.re.mjs";
import * as SubscribeActivityDeleteMutation_graphql from "../../__generated__/SubscribeActivityDeleteMutation_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = SubscribeActivityMutation_graphql.Internal.convertVariables;

var convertResponse = SubscribeActivityMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse = SubscribeActivityMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables, SubscribeActivityMutation_graphql.node, convertResponse, convertWrapRawResponse);

var use = RescriptRelay_Mutation.useMutation(convertVariables, SubscribeActivityMutation_graphql.node, convertResponse, convertWrapRawResponse);

var SubscribeActivityMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  commitMutation: commitMutation,
  use: use
};

var convertVariables$1 = SubscribeActivityDeleteMutation_graphql.Internal.convertVariables;

var convertResponse$1 = SubscribeActivityDeleteMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = SubscribeActivityDeleteMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$1 = RescriptRelay_Mutation.commitMutation(convertVariables$1, SubscribeActivityDeleteMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables$1, SubscribeActivityDeleteMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var SubscribeActivityDeleteMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  commitMutation: commitMutation$1,
  use: use$1
};

var convertFragment = SubscribeActivity_activity_graphql.Internal.convertFragment;

function use$2(fRef) {
  return RescriptRelay_Fragment.useFragment(SubscribeActivity_activity_graphql.node, convertFragment, fRef);
}

function useOpt(fRef) {
  return RescriptRelay_Fragment.useFragmentOpt(fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(fRef)) : undefined, SubscribeActivity_activity_graphql.node, convertFragment);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  convertFragment: convertFragment,
  use: use$2,
  useOpt: useOpt
};

function SubscribeActivity(props) {
  var match = use$2(props.activity);
  var sub = match.sub;
  var id = match.id;
  var match$1 = use();
  var commitMutationSubscribe = match$1[0];
  var match$2 = use$1();
  var commitMutationUnsubscribe = match$2[0];
  var activityName = Core__Option.getOr(Core__Option.map(match.name, (function (name) {
              return Core.i18n._(name);
            })), "");
  if (sub !== undefined) {
    return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                children: [
                  JsxRuntime.jsxs("a", {
                        children: [
                          "<- ",
                          t`unsubscribe from ${activityName} events`,
                          " "
                        ],
                        href: "#",
                        onClick: (function (e) {
                            e.preventDefault();
                            commitMutationUnsubscribe({
                                  input: {
                                    subscriptionId: sub.id
                                  }
                                }, undefined, undefined, undefined, undefined, undefined, undefined);
                          })
                      }),
                  t`you will receive email notifications for new events`
                ]
              });
  } else {
    return JsxRuntime.jsx(JsxRuntime.Fragment, {
                children: Caml_option.some(JsxRuntime.jsxs("a", {
                          children: [
                            "-> ",
                            t`subscribe to all ${activityName} events`
                          ],
                          href: "#",
                          onClick: (function (e) {
                              e.preventDefault();
                              commitMutationSubscribe({
                                    input: {
                                      activityId: id
                                    }
                                  }, undefined, undefined, undefined, undefined, undefined, undefined);
                            })
                        }))
              });
  }
}

function td(prim) {
  return t(prim);
}

t({
      id: "Badminton"
    });

t({
      id: "Table Tennis"
    });

t({
      id: "Pickleball"
    });

t({
      id: "Futsal"
    });

var make = SubscribeActivity;

export {
  SubscribeActivityMutation ,
  SubscribeActivityDeleteMutation ,
  Fragment ,
  make ,
  td ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as ReactPopover from "@radix-ui/react-popover";
import * as ReactTooltip from "@radix-ui/react-tooltip";

function useMobileDetection() {
  var match = React.useState(function () {
        return false;
      });
  var setIsMobile = match[1];
  React.useEffect((function () {
          var checkIsMobile = function () {
            setIsMobile(function (param) {
                  return (typeof window !== 'undefined' && window.innerWidth < 768);
                });
          };
          checkIsMobile();
          var handleResize = function () {
            checkIsMobile();
          };
          (window.addEventListener("resize", handleResize));
          return (function () {
                    (window.removeEventListener("resize", handleResize));
                  });
        }), []);
  return match[0];
}

function ResponsiveTooltip(props) {
  var __className = props.className;
  var __delayDuration = props.delayDuration;
  var __side = props.side;
  var content = props.content;
  var children = props.children;
  var side = __side !== undefined ? __side : "top";
  var delayDuration = __delayDuration !== undefined ? __delayDuration : 200;
  var className = __className !== undefined ? __className : "z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95";
  var isMobile = useMobileDetection();
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  if (isMobile) {
                    return JsxRuntime.jsxs(ReactPopover.Root, {
                                children: [
                                  JsxRuntime.jsx(ReactPopover.Trigger, {
                                        asChild: true,
                                        children: Caml_option.some(children)
                                      }),
                                  JsxRuntime.jsx(ReactPopover.Content, {
                                        side: side,
                                        className: className,
                                        children: content
                                      })
                                ]
                              });
                  } else {
                    return JsxRuntime.jsxs(ReactTooltip.Root, {
                                delayDuration: delayDuration,
                                children: [
                                  JsxRuntime.jsx(ReactTooltip.Trigger, {
                                        asChild: true,
                                        children: children
                                      }),
                                  JsxRuntime.jsx(ReactTooltip.Content, {
                                        children: content,
                                        side: side,
                                        className: className
                                      })
                                ]
                              });
                  }
                })
            });
}

function ResponsiveTooltip$Provider(props) {
  return JsxRuntime.jsx(ReactTooltip.Provider, {
              children: props.children
            });
}

var Provider = {
  make: ResponsiveTooltip$Provider
};

var make = ResponsiveTooltip;

export {
  useMobileDetection ,
  make ,
  Provider ,
}
/* react Not a pure module */

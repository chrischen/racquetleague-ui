// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Core from "@linaria/core";
import * as JsxRuntime from "react/jsx-runtime";
import * as Solid from "@heroicons/react/24/solid";

import { t, plural } from '@lingui/macro'
;

function SlideAction(props) {
  var onToggle = props.onToggle;
  var __defaultOpen = props.defaultOpen;
  var __panelClassName = props.panelClassName;
  var __className = props.className;
  var __panelWidthClass = props.panelWidthClass;
  var panelWidthClass = __panelWidthClass !== undefined ? __panelWidthClass : "w-4/5 sm:w-3/4 md:w-2/3 max-w-xs";
  var className = __className !== undefined ? __className : "";
  var panelClassName = __panelClassName !== undefined ? __panelClassName : "";
  var defaultOpen = __defaultOpen !== undefined ? __defaultOpen : false;
  var match = React.useState(function () {
        return defaultOpen;
      });
  var setIsOpen = match[1];
  var isOpen = match[0];
  var toggle = function () {
    setIsOpen(function (prev) {
          var next = !prev;
          if (onToggle !== undefined) {
            onToggle(next);
          }
          return next;
        });
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: props.children,
                      onClick: (function (param) {
                          toggle();
                        })
                    }),
                isOpen ? JsxRuntime.jsx("button", {
                        "aria-label": t`close actions`,
                        className: "absolute inset-0 bg-white/60 backdrop-blur-sm z-10 cursor-pointer",
                        onClick: (function (e) {
                            e.stopPropagation();
                            setIsOpen(function (param) {
                                  if (onToggle !== undefined) {
                                    onToggle(false);
                                  }
                                  return false;
                                });
                          })
                      }) : null,
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("button", {
                                    children: JsxRuntime.jsx(Solid.ChevronRightIcon, {
                                          className: "h-5 w-5"
                                        }),
                                    "aria-label": t`close`,
                                    className: "self-stretch flex items-center px-2 -ml-2 rounded-r-md text-gray-500 hover:text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors",
                                    type: "button",
                                    onClick: (function (param) {
                                        setIsOpen(function (param) {
                                              if (onToggle !== undefined) {
                                                onToggle(false);
                                              }
                                              return false;
                                            });
                                      })
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: props.actions,
                                    className: "flex flex-1 items-center justify-end gap-3 px-4"
                                  })
                            ],
                            className: "flex h-full w-full items-stretch"
                          }),
                      "aria-hidden": !isOpen,
                      className: Core.cx("absolute top-0 right-0 h-full bg-white/95 backdrop-blur border-l border-gray-200", panelWidthClass, "flex px-4 py-2 z-20 overflow-y-auto transition-transform duration-200 ease-out will-change-transform", isOpen ? "translate-x-0 shadow-[-4px_0_8px_-2px_rgba(0,0,0,0.15)] pointer-events-auto" : "translate-x-full pointer-events-none", panelClassName),
                      onClick: (function (e) {
                          e.stopPropagation();
                        })
                    })
              ],
              className: Core.cx("relative overflow-hidden", className)
            });
}

var make = SlideAction;

export {
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as React from "react";
import * as Lingui from "../../locales/Lingui.re.mjs";
import * as RelayEnv from "../../entry/RelayEnv.re.mjs";
import * as Localized from "../shared/i18n/Localized.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as ViewerEventsPage from "../pages/ViewerEventsPage.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as ViewerEventsPageQuery_graphql from "../../__generated__/ViewerEventsPageQuery_graphql.re.mjs";

var LoaderArgs = {};

function loadMessages(lang) {
  var tmp = lang === "ja" ? import("../../locales/src/components/pages/ViewerEventsPage.re/ja") : import("../../locales/src/components/pages/ViewerEventsPage.re/en");
  return [tmp.then(function (messages) {
                React.startTransition(function () {
                      Lingui.i18n.load(lang, messages.messages);
                    });
              })];
}

async function loader(param) {
  var params = param.params;
  var url = new URL(param.request.url);
  var after = url.searchParams.get("after");
  var before = url.searchParams.get("before");
  if (import.meta.env.SSR) {
    await Localized.loadMessages(params.lang, loadMessages);
  }
  return {
          data: Core__Option.map(RelayEnv.getRelayEnv(param.context, import.meta.env.SSR), (function (env) {
                  return ViewerEventsPageQuery_graphql.load(env, {
                              after: after,
                              afterDate: Caml_option.some(Util.Datetime.fromDate(new Date())),
                              before: before,
                              filters: {
                                viewer: true
                              }
                            }, "store-or-network", undefined, undefined);
                })),
          i18nLoaders: import.meta.env.SSR ? undefined : Caml_option.some(Localized.loadMessages(params.lang, loadMessages))
        };
}

var HydrateFallbackElement = JsxRuntime.jsx("div", {
      children: "Loading fallback..."
    });

var Component = ViewerEventsPage.make;

export {
  Component ,
  LoaderArgs ,
  loadMessages ,
  loader ,
  HydrateFallbackElement ,
}
/* HydrateFallbackElement Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Grid from "../vanillaui/atoms/Grid.re.mjs";
import * as Layout from "../shared/Layout.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as SelectedLocation from "../organisms/SelectedLocation.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as CreateLocationEventForm from "../organisms/CreateLocationEventForm.re.mjs";
import * as UpdateEventPageQuery_graphql from "../../__generated__/UpdateEventPageQuery_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = UpdateEventPageQuery_graphql.Internal.convertVariables;

var convertResponse = UpdateEventPageQuery_graphql.Internal.convertResponse;

RescriptRelay_Query.useQuery(convertVariables, UpdateEventPageQuery_graphql.node, convertResponse);

RescriptRelay_Query.useLoader(convertVariables, UpdateEventPageQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(UpdateEventPageQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

RescriptRelay_Query.$$fetch(UpdateEventPageQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.fetchPromised(UpdateEventPageQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.retain(UpdateEventPageQuery_graphql.node, convertVariables);

function UpdateEventPage(props) {
  var data = ReactRouterDom.useLoaderData();
  var query = usePreloaded(data.data);
  var navigate = ReactRouterDom.useNavigate();
  return JsxRuntime.jsx(Layout.Container.make, {
              children: JsxRuntime.jsx(WaitForMessages.make, {
                    children: (function () {
                        return Core__Option.getOr(Core__Option.flatMap(query.location, (function ($$location) {
                                          return Core__Option.map(query.event, (function ($$event) {
                                                        return JsxRuntime.jsxs(Grid.make, {
                                                                    children: [
                                                                      JsxRuntime.jsx(SelectedLocation.make, {
                                                                            location: $$location.fragmentRefs,
                                                                            onNewLocation: (function ($$location) {
                                                                                navigate("../update/" + $$event.id + "/" + $$location, undefined);
                                                                              })
                                                                          }, "selected_location"),
                                                                      JsxRuntime.jsx(CreateLocationEventForm.make, {
                                                                            event: Caml_option.some($$event.fragmentRefs),
                                                                            location: $$location.fragmentRefs,
                                                                            query: query.fragmentRefs
                                                                          }, "create_location_event_form")
                                                                    ]
                                                                  });
                                                      }));
                                        })), t`Event or Location doesn't exist.`);
                      })
                  })
            });
}

var make = UpdateEventPage;

export {
  make ,
}
/*  Not a pure module */

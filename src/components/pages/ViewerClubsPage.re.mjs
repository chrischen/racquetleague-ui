// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Layout from "../shared/Layout.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as ViewerClubsPageQuery_graphql from "../../__generated__/ViewerClubsPageQuery_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = ViewerClubsPageQuery_graphql.Internal.convertVariables;

var convertResponse = ViewerClubsPageQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = ViewerClubsPageQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, ViewerClubsPageQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, ViewerClubsPageQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(ViewerClubsPageQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(ViewerClubsPageQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(ViewerClubsPageQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(ViewerClubsPageQuery_graphql.node, convertVariables);

var Query = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

function ViewerClubsPage(props) {
  var data = ReactRouterDom.useLoaderData();
  var query = usePreloaded(data.data);
  var clubs = Core__Array.filterMap(Core__Array.filterMap(Core__Option.getOr(Core__Option.flatMap(Core__Option.map(query.viewer, (function (v) {
                          return v.adminClubs;
                        })), (function (clubs) {
                      return clubs.edges;
                    })), []), (function (edge) {
              return edge;
            })), (function (edge) {
          return edge.node;
        }));
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  var match = clubs.length;
                  return JsxRuntime.jsx(JsxRuntime.Fragment, {
                              children: Caml_option.some(JsxRuntime.jsxs(Layout.Container.make, {
                                        children: [
                                          JsxRuntime.jsx("h1", {
                                                children: JsxRuntime.jsx("div", {
                                                      children: t`my clubs`,
                                                      className: "flex items-center mt-1 text-2xl font-semibold leading-6 text-gray-900"
                                                    })
                                              }),
                                          match !== 0 ? JsxRuntime.jsx("ul", {
                                                  children: clubs.map(function (club) {
                                                        return JsxRuntime.jsx("li", {
                                                                    children: Core__Option.getOr(Core__Option.map(club.slug, (function (slug) {
                                                                                return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                                            to: "/clubs/" + slug,
                                                                                            children: Core__Option.getOr(club.name, "---"),
                                                                                            className: "text-lg font-semibold text-indigo-600 hover:text-indigo-500"
                                                                                          });
                                                                              })), JsxRuntime.jsx("span", {
                                                                              children: Core__Option.getOr(club.name, "---"),
                                                                              className: "text-lg font-semibold text-gray-900"
                                                                            })),
                                                                    className: "py-4"
                                                                  }, club.id);
                                                      }),
                                                  className: "mt-4 divide-y divide-gray-200"
                                                }) : JsxRuntime.jsx("div", {
                                                  children: t`You are not an admin of any clubs.`,
                                                  className: "mt-4 text-gray-500"
                                                })
                                        ]
                                      }))
                            });
                })
            });
}

var make = ViewerClubsPage;

export {
  Query ,
  make ,
}
/*  Not a pure module */

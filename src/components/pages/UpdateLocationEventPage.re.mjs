// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as CreateLocationEventForm from "../organisms/CreateLocationEventForm.re.mjs";
import * as UpdateLocationEventPageQuery_graphql from "../../__generated__/UpdateLocationEventPageQuery_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = UpdateLocationEventPageQuery_graphql.Internal.convertVariables;

var convertResponse = UpdateLocationEventPageQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = UpdateLocationEventPageQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, UpdateLocationEventPageQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, UpdateLocationEventPageQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(UpdateLocationEventPageQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(UpdateLocationEventPageQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(UpdateLocationEventPageQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(UpdateLocationEventPageQuery_graphql.node, convertVariables);

var Query = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

function UpdateLocationEventPage(props) {
  var data = ReactRouterDom.useLoaderData();
  var query = usePreloaded(data.data);
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  return Core__Option.getOr(Core__Option.flatMap(query.location, (function ($$location) {
                                    return Core__Option.map(query.event, (function ($$event) {
                                                  return JsxRuntime.jsx(CreateLocationEventForm.make, {
                                                              event: Caml_option.some($$event.fragmentRefs),
                                                              location: $$location.fragmentRefs,
                                                              query: query.fragmentRefs
                                                            });
                                                }));
                                  })), t`Event or Location doesn't exist.`);
                })
            });
}

var make = UpdateLocationEventPage;

export {
  Query ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as Button from "../catalyst/Button.re.mjs";
import * as Layout from "../shared/Layout.re.mjs";
import * as Lingui from "../../locales/Lingui.re.mjs";
import * as Router from "../shared/Router.re.mjs";
import * as RelayEnv from "../../entry/RelayEnv.re.mjs";
import * as Localized from "../shared/i18n/Localized.re.mjs";
import * as $$MediaList from "../organisms/MediaList.re.mjs";
import * as ErrorAlert from "../molecules/ErrorAlert.re.mjs";
import * as EventRsvps from "../organisms/EventRsvps.re.mjs";
import * as ReactIntl from "react-intl";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core from "@lingui/core";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as LucideReact from "lucide-react";
import * as Core$1 from "@linaria/core";
import * as AddToCalendar from "../molecules/AddToCalendar.re.mjs";
import * as EventLocation from "../organisms/EventLocation.re.mjs";
import * as EventMessages from "../organisms/EventMessages.re.mjs";
import * as EventFullNames from "../organisms/EventFullNames.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as SubscribeActivity from "../molecules/SubscribeActivity.re.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as EventQuery_graphql from "../../__generated__/EventQuery_graphql.re.mjs";
import * as ReactHelmetAsync from "react-helmet-async";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as AppContext from "../layouts/appContext";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as EventCancelMutation_graphql from "../../__generated__/EventCancelMutation_graphql.re.mjs";
import * as DifferenceInMinutes from "date-fns/differenceInMinutes";
import * as EventUncancelMutation_graphql from "../../__generated__/EventUncancelMutation_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertVariables = EventQuery_graphql.Internal.convertVariables;

var convertResponse = EventQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = EventQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, EventQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, EventQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(EventQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(EventQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(EventQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(EventQuery_graphql.node, convertVariables);

var EventQuery = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var convertVariables$1 = EventCancelMutation_graphql.Internal.convertVariables;

var convertResponse$1 = EventCancelMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = EventCancelMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables$1, EventCancelMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables$1, EventCancelMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var EventCancelMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  commitMutation: commitMutation,
  use: use$1
};

var convertVariables$2 = EventUncancelMutation_graphql.Internal.convertVariables;

var convertResponse$2 = EventUncancelMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$2 = EventUncancelMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$1 = RescriptRelay_Mutation.commitMutation(convertVariables$2, EventUncancelMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var use$2 = RescriptRelay_Mutation.useMutation(convertVariables$2, EventUncancelMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var EventUncancelMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$2,
  convertResponse: convertResponse$2,
  convertWrapRawResponse: convertWrapRawResponse$2,
  commitMutation: commitMutation$1,
  use: use$2
};

var sessionContext = AppContext.SessionContext;

function $$Event(props) {
  var td = function (prim) {
    return Core.i18n._(prim);
  };
  var query = ReactRouterDom.useLoaderData();
  var match = usePreloaded(query.data);
  var queryFragmentRefs = match.fragmentRefs;
  var viewer = Core__Option.flatMap(match.viewer, (function (v) {
          return v.user;
        }));
  var navigate = ReactRouterDom.useNavigate();
  var match$1 = use$1();
  var canceling = match$1[1];
  var cancelEvent = match$1[0];
  var match$2 = use$2();
  var uncanceling = match$2[1];
  var uncancelEvent = match$2[0];
  return Core__Option.getOr(Core__Option.map(match.event, (function ($$event) {
                    var fragmentRefs = $$event.fragmentRefs;
                    var title = $$event.title;
                    var shadow = $$event.shadow;
                    var $$location = $$event.location;
                    var details = $$event.details;
                    var activity = $$event.activity;
                    var viewerIsAdmin = $$event.viewerIsAdmin;
                    var viewerHasRsvp = Core__Option.getOr($$event.viewerHasRsvp, false);
                    var canOpenAiTetsu = viewerHasRsvp || viewerIsAdmin ? true : false;
                    var until = Core__Option.map($$event.startDate, (function (startDate) {
                            return DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(startDate), new Date());
                          }));
                    var duration = Core__Option.flatMap($$event.startDate, (function (startDate) {
                            return Core__Option.map($$event.endDate, (function (endDate) {
                                          return DifferenceInMinutes.differenceInMinutes(Util.Datetime.toDate(endDate), Util.Datetime.toDate(startDate));
                                        }));
                          }));
                    var duration$1 = Core__Option.map(duration, (function (duration) {
                            var hours = Math.floor(duration / 60);
                            var minutes = (duration | 0) % 60;
                            if (minutes === 0) {
                              return t`${hours.toString()} hours`;
                            } else {
                              return t`${hours.toString()} hours and ${minutes.toString()} minutes`;
                            }
                          }));
                    var activityName = Core__Option.getOr(Core__Option.flatMap(activity, (function (activity) {
                                return Core__Option.map(activity.name, td);
                              })), "---");
                    var pageTitle = Core__Option.getOr(Core__Option.flatMap(activity, (function (a) {
                                return Core__Option.map(a.name, (function (name) {
                                              return Core.i18n._(name);
                                            }));
                              })), "") + " / " + Core__Option.getOr(title, "") + Core__Option.getOr(Core__Option.map(duration$1, (function (duration) {
                                return " / " + duration;
                              })), "") + " @ " + Core__Option.getOr(Core__Option.flatMap($$location, (function ($$location) {
                                return $$location.name;
                              })), "?");
                    var secret = Core__Option.getOr(shadow, false);
                    return JsxRuntime.jsx(WaitForMessages.make, {
                                children: (function () {
                                    var tmp;
                                    if (viewerIsAdmin) {
                                      var match = $$event.deleted;
                                      tmp = JsxRuntime.jsx(Layout.Container.make, {
                                            children: JsxRuntime.jsx("div", {
                                                  children: JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx(Button.Button.make, {
                                                                children: t`edit event`,
                                                                href: "/events/update/" + $$event.id + "/" + Core__Option.getOr(Core__Option.map($$event.location, (function (l) {
                                                                            return l.id;
                                                                          })), "")
                                                              }),
                                                          match !== undefined ? JsxRuntime.jsx(Button.Button.make, {
                                                                  children: t`uncancel event`,
                                                                  onClick: (function (param) {
                                                                      if (!uncanceling) {
                                                                        uncancelEvent({
                                                                              eventId: $$event.id
                                                                            }, undefined, undefined, undefined, undefined, undefined, undefined);
                                                                        return ;
                                                                      }
                                                                      
                                                                    })
                                                                }) : JsxRuntime.jsx(Button.Button.make, {
                                                                  children: t`cancel event`,
                                                                  onClick: (function (param) {
                                                                      if (!canceling) {
                                                                        cancelEvent({
                                                                              eventId: $$event.id
                                                                            }, undefined, undefined, undefined, undefined, undefined, undefined);
                                                                        return ;
                                                                      }
                                                                      
                                                                    })
                                                                })
                                                        ],
                                                        className: "-mx-4 px-6 py-4 shadow-sm ring-1 ring-gray-900/5 sm:mx-0 sm:rounded-lg sm:px-8 sm:pb-4 col-span-3 lg:row-span-2 lg:row-end-2 flex flex-row gap-2"
                                                      }),
                                                  className: "mx-auto grid max-w-2xl grid-cols-1 grid-rows-1 items-start gap-x-8 gap-y-4 lg:mx-0 lg:max-w-none lg:grid-cols-3"
                                                }),
                                            className: "py-4"
                                          });
                                    } else {
                                      tmp = null;
                                    }
                                    var tmp$1;
                                    var exit = 0;
                                    if (shadow !== undefined && shadow) {
                                      tmp$1 = JsxRuntime.jsxs(ErrorAlert.make, {
                                            children: [
                                              t`this is a private event that requires membership with the club. To join this club, please join a Japan Pickleball League event first to get a referral.`,
                                              JsxRuntime.jsx("p", {
                                                    children: JsxRuntime.jsx("strong", {
                                                          children: t`showing up without permission may result in a ban for failing to follow rules.`
                                                        })
                                                  })
                                            ],
                                            cta: Caml_option.some(t`view events`),
                                            ctaClick: (function () {
                                                navigate("/clubs/japanpickle", undefined);
                                              })
                                          });
                                    } else {
                                      exit = 1;
                                    }
                                    if (exit === 1) {
                                      tmp$1 = JsxRuntime.jsx(EventRsvps.make, {
                                            event: fragmentRefs,
                                            user: Core__Option.map(viewer, (function (v) {
                                                    return v.fragmentRefs;
                                                  }))
                                          });
                                    }
                                    return JsxRuntime.jsxs("main", {
                                                children: [
                                                  JsxRuntime.jsxs(ReactHelmetAsync.Helmet, {
                                                        children: [
                                                          JsxRuntime.jsx("title", {
                                                                children: secret ? "---" : pageTitle
                                                              }),
                                                          JsxRuntime.jsx("meta", {
                                                                content: pageTitle,
                                                                property: "og:title"
                                                              })
                                                        ]
                                                      }),
                                                  JsxRuntime.jsxs("header", {
                                                        children: [
                                                          JsxRuntime.jsxs("div", {
                                                                children: [
                                                                  JsxRuntime.jsx("div", {
                                                                        className: "absolute left-16 top-full -mt-16 transform-gpu opacity-50 blur-3xl xl:left-1/2 xl:-ml-80"
                                                                      }),
                                                                  JsxRuntime.jsx("div", {
                                                                        className: "absolute inset-x-0 bottom-0 h-px bg-gray-900/5"
                                                                      })
                                                                ],
                                                                "aria-hidden": true,
                                                                className: "absolute inset-0 -z-10 overflow-hidden"
                                                              }),
                                                          JsxRuntime.jsx(Layout.Container.make, {
                                                                children: JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsx("div", {
                                                                              children: JsxRuntime.jsxs("h1", {
                                                                                    children: [
                                                                                      JsxRuntime.jsxs("div", {
                                                                                            children: [
                                                                                              t`event @`,
                                                                                              " ",
                                                                                              JsxRuntime.jsx("span", {
                                                                                                    children: secret ? "---" : Core__Option.getOr(Core__Option.flatMap($$location, (function ($$location) {
                                                                                                                  return Core__Option.map($$location.name, (function (name) {
                                                                                                                                return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                                                                                            to: "/locations/" + $$location.id,
                                                                                                                                            children: name
                                                                                                                                          });
                                                                                                                              }));
                                                                                                                })), null),
                                                                                                    className: "text-gray-700"
                                                                                                  })
                                                                                            ],
                                                                                            className: "text-base leading-6 text-gray-500"
                                                                                          }),
                                                                                      JsxRuntime.jsxs("div", {
                                                                                            children: [
                                                                                              JsxRuntime.jsxs("span", {
                                                                                                    children: [
                                                                                                      Core__Option.getOr(Core__Option.flatMap(activity, (function (a) {
                                                                                                                  return Core__Option.map(a.name, (function (name) {
                                                                                                                                return JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                                                                                            to: "/?activity=" + Core__Option.getOr(a.slug, ""),
                                                                                                                                            children: Core.i18n._(name)
                                                                                                                                          });
                                                                                                                              }));
                                                                                                                })), null),
                                                                                                      " / ",
                                                                                                      secret ? "---" : Core__Option.getOr(Core__Option.map(title, (function (prim) {
                                                                                                                    return prim;
                                                                                                                  })), null),
                                                                                                      Core__Option.getOr(Core__Option.map(duration$1, (function (duration) {
                                                                                                                  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                                                                              children: [
                                                                                                                                " / ",
                                                                                                                                duration
                                                                                                                              ]
                                                                                                                            });
                                                                                                                })), null)
                                                                                                    ],
                                                                                                    className: Core$1.cx(Core__Option.isSome($$event.deleted) ? "line-through" : "")
                                                                                                  }),
                                                                                              Core__Option.getOr(Core__Option.map($$event.deleted, (function (param) {
                                                                                                          return JsxRuntime.jsx("span", {
                                                                                                                      children: t`CANCELED`,
                                                                                                                      className: "ml-2"
                                                                                                                    });
                                                                                                        })), null)
                                                                                            ],
                                                                                            className: Core$1.cx("mt-1 text-2xl font-semibold leading-6 text-gray-900")
                                                                                          }),
                                                                                      Core__Option.getOr(Core__Option.flatMap($$event.club, (function (club) {
                                                                                                  return Core__Option.map(club.name, (function (name) {
                                                                                                                return JsxRuntime.jsx("div", {
                                                                                                                            children: JsxRuntime.jsx("span", {
                                                                                                                                  children: JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                                                                                        to: "/clubs/" + Core__Option.getOr(club.slug, ""),
                                                                                                                                        children: t`hosted by ${name}`
                                                                                                                                      }),
                                                                                                                                  className: "text-gray-700"
                                                                                                                                }),
                                                                                                                            className: "mt-2 text-base leading-6 text-gray-500"
                                                                                                                          });
                                                                                                              }));
                                                                                                })), null)
                                                                                    ]
                                                                                  }),
                                                                              className: "flex items-center gap-x-6"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              children: Core__Option.getOr(Core__Option.flatMap($$event.startDate, (function (startDate) {
                                                                                          return Core__Option.map($$event.endDate, (function (endDate) {
                                                                                                        return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                                                                    children: [
                                                                                                                      JsxRuntime.jsx(ReactIntl.FormattedDate, {
                                                                                                                            value: Util.Datetime.toDate(startDate),
                                                                                                                            timeZone: Core__Option.getOr($$event.timezone, "Asia/Tokyo"),
                                                                                                                            month: "numeric",
                                                                                                                            day: "2-digit"
                                                                                                                          }),
                                                                                                                      " ",
                                                                                                                      JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                            value: Util.Datetime.toDate(startDate),
                                                                                                                            timeZone: Core__Option.getOr($$event.timezone, "Asia/Tokyo")
                                                                                                                          }),
                                                                                                                      " -> ",
                                                                                                                      JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                            value: Util.Datetime.toDate(endDate),
                                                                                                                            timeZone: Core__Option.getOr($$event.timezone, "Asia/Tokyo")
                                                                                                                          }),
                                                                                                                      " ",
                                                                                                                      Core__Option.getOr(Core__Option.map(until, (function (until) {
                                                                                                                                  return JsxRuntime.jsx(ReactIntl.FormattedRelativeTime, {
                                                                                                                                              value: until,
                                                                                                                                              unit: "minute",
                                                                                                                                              updateIntervalInSeconds: 1
                                                                                                                                            });
                                                                                                                                })), null)
                                                                                                                    ]
                                                                                                                  });
                                                                                                      }));
                                                                                        })), "???"),
                                                                              className: "font-bold flex items-center mt-2 mb-2 lg:text-xl leading-8 text-gray-700"
                                                                            }),
                                                                        JsxRuntime.jsx("div", {
                                                                              className: "flex items-center gap-x-4 sm:gap-x-6"
                                                                            })
                                                                      ],
                                                                      className: "mx-auto flex flex-col max-w-2xl justify-between gap-x-8 lg:mx-0 lg:max-w-none"
                                                                    }),
                                                                className: "py-0"
                                                              })
                                                        ],
                                                        className: "relative isolate pt-4"
                                                      }),
                                                  tmp,
                                                  JsxRuntime.jsx(Layout.Container.make, {
                                                        children: JsxRuntime.jsx("div", {
                                                              children: JsxRuntime.jsx("div", {
                                                                    children: Core__Option.getOr(Core__Option.flatMap(viewer, (function (param) {
                                                                                return Core__Option.map(activity, (function (activity) {
                                                                                              return JsxRuntime.jsx(SubscribeActivity.make, {
                                                                                                          activity: activity.fragmentRefs
                                                                                                        });
                                                                                            }));
                                                                              })), t`login to subscribe to ${activityName} events`),
                                                                    className: "-mx-4 px-6 py-4 shadow-sm ring-1 ring-gray-900/5 sm:mx-0 sm:rounded-lg sm:px-8 sm:pb-4 col-span-3 lg:row-span-2 lg:row-end-2"
                                                                  }),
                                                              className: "mx-auto grid max-w-2xl grid-cols-1 grid-rows-1 items-start gap-x-8 gap-y-4 lg:mx-0 lg:max-w-none lg:grid-cols-3"
                                                            }),
                                                        className: "py-4"
                                                      }),
                                                  JsxRuntime.jsx(Layout.Container.make, {
                                                        children: JsxRuntime.jsxs("div", {
                                                              children: [
                                                                JsxRuntime.jsx("div", {
                                                                      children: JsxRuntime.jsxs("div", {
                                                                            children: [
                                                                              tmp$1,
                                                                              Core__Option.getOr(Core__Option.flatMap($$event.activity, (function (activity) {
                                                                                          return Core__Option.map(activity.slug, (function (slug) {
                                                                                                        if (!canOpenAiTetsu) {
                                                                                                          return null;
                                                                                                        }
                                                                                                        switch (slug) {
                                                                                                          case "badminton" :
                                                                                                          case "pickleball" :
                                                                                                              break;
                                                                                                          default:
                                                                                                            return null;
                                                                                                        }
                                                                                                        return JsxRuntime.jsxs("div", {
                                                                                                                    children: [
                                                                                                                      JsxRuntime.jsx("h2", {
                                                                                                                            children: t`league`,
                                                                                                                            className: "text-base font-semibold leading-6 text-gray-900"
                                                                                                                          }),
                                                                                                                      JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                                                                            to: "/league/events/" + $$event.id + "/" + slug,
                                                                                                                            children: t`submit matches`
                                                                                                                          })
                                                                                                                    ],
                                                                                                                    className: "-mx-4 px-6 py-4 shadow-sm ring-1 ring-gray-900/5 sm:mx-0 sm:rounded-lg sm:px-6 sm:pb-4"
                                                                                                                  });
                                                                                                      }));
                                                                                        })), null),
                                                                              viewerIsAdmin ? JsxRuntime.jsx(EventFullNames.make, {
                                                                                      event: fragmentRefs
                                                                                    }) : null
                                                                            ],
                                                                            className: "grid grid-cols-1 grid-rows-1 items-start gap-x-8 gap-y-4 lg:mx-0 lg:max-w-none"
                                                                          }),
                                                                      className: "lg:col-start-3 lg:row-end-1"
                                                                    }),
                                                                JsxRuntime.jsx("div", {
                                                                      children: JsxRuntime.jsxs("div", {
                                                                            children: [
                                                                              JsxRuntime.jsxs("div", {
                                                                                    children: [
                                                                                      JsxRuntime.jsx("h2", {
                                                                                            children: t`details`,
                                                                                            className: "text-base font-semibold leading-6 text-gray-900"
                                                                                          }),
                                                                                      JsxRuntime.jsxs("div", {
                                                                                            children: [
                                                                                              JsxRuntime.jsx(LucideReact.CalendarClock, {
                                                                                                    className: "mr-2 h-7 w-7 flex-shrink-0 text-gray-500",
                                                                                                    "aria-hidden": "true"
                                                                                                  }),
                                                                                              Core__Option.getOr(Core__Option.flatMap($$event.startDate, (function (startDate) {
                                                                                                          return Core__Option.map($$event.endDate, (function (endDate) {
                                                                                                                        return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                                                                                    children: [
                                                                                                                                      JsxRuntime.jsx(ReactIntl.FormattedDate, {
                                                                                                                                            value: Util.Datetime.toDate(startDate),
                                                                                                                                            timeZone: Core__Option.getOr($$event.timezone, "Asia/Tokyo"),
                                                                                                                                            weekday: "long",
                                                                                                                                            year: "2-digit",
                                                                                                                                            month: "numeric",
                                                                                                                                            day: "2-digit"
                                                                                                                                          }),
                                                                                                                                      " ",
                                                                                                                                      JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                                            value: Util.Datetime.toDate(startDate),
                                                                                                                                            timeZone: Core__Option.getOr($$event.timezone, "Asia/Tokyo")
                                                                                                                                          }),
                                                                                                                                      " -> ",
                                                                                                                                      JsxRuntime.jsx(ReactIntl.FormattedTime, {
                                                                                                                                            value: Util.Datetime.toDate(endDate),
                                                                                                                                            timeZone: Core__Option.getOr($$event.timezone, "Asia/Tokyo")
                                                                                                                                          }),
                                                                                                                                      " ",
                                                                                                                                      Core__Option.getOr(Core__Option.map(until, (function (until) {
                                                                                                                                                  return JsxRuntime.jsx(ReactIntl.FormattedRelativeTime, {
                                                                                                                                                              value: until,
                                                                                                                                                              unit: "minute",
                                                                                                                                                              updateIntervalInSeconds: 1
                                                                                                                                                            });
                                                                                                                                                })), null)
                                                                                                                                    ]
                                                                                                                                  });
                                                                                                                      }));
                                                                                                        })), "???")
                                                                                            ],
                                                                                            className: "font-bold flex items-center mt-4 lg:text-xl leading-8 text-gray-700"
                                                                                          }),
                                                                                      JsxRuntime.jsx("div", {
                                                                                            children: JsxRuntime.jsx(AddToCalendar.make, {}),
                                                                                            className: "ml-3 border-gray-200 border-l-4 pl-5 mt-4"
                                                                                          }),
                                                                                      secret ? null : Core__Option.getOr(Core__Option.map($$location, (function ($$location) {
                                                                                                    return JsxRuntime.jsx(EventLocation.make, {
                                                                                                                location: $$location.fragmentRefs
                                                                                                              });
                                                                                                  })), null),
                                                                                      Core__Option.getOr(Core__Option.map(details, (function (details) {
                                                                                                  var tmp;
                                                                                                  tmp = secret ? "---" : (
                                                                                                      details === "" ? t`good luck, have fun` : details
                                                                                                    );
                                                                                                  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                                                              children: [
                                                                                                                JsxRuntime.jsxs("div", {
                                                                                                                      children: [
                                                                                                                        JsxRuntime.jsx(LucideReact.Info, {
                                                                                                                              className: "mr-2 h-7 w-7 flex-shrink-0 text-gray-500",
                                                                                                                              "aria-hidden": "true"
                                                                                                                            }),
                                                                                                                        t`notes`
                                                                                                                      ],
                                                                                                                      className: "font-bold flex items-center mt-4 lg:text-xl leading-8 text-gray-700"
                                                                                                                    }),
                                                                                                                JsxRuntime.jsx("div", {
                                                                                                                      children: JsxRuntime.jsx("p", {
                                                                                                                            children: tmp,
                                                                                                                            className: "lg:text-xl leading-8 text-gray-700 whitespace-pre text-wrap"
                                                                                                                          }),
                                                                                                                      className: "ml-3 border-gray-200 border-l-4 pl-5 mt-4"
                                                                                                                    })
                                                                                                              ]
                                                                                                            });
                                                                                                })), null),
                                                                                      JsxRuntime.jsxs("div", {
                                                                                            children: [
                                                                                              JsxRuntime.jsx(LucideReact.List, {
                                                                                                    className: "mr-2 h-7 w-7 flex-shrink-0 text-gray-500",
                                                                                                    "aria-hidden": "true"
                                                                                                  }),
                                                                                              t`activity`
                                                                                            ],
                                                                                            className: "font-bold flex items-center mt-4 lg:text-xl leading-8 text-gray-700"
                                                                                          }),
                                                                                      JsxRuntime.jsx("div", {
                                                                                            children: JsxRuntime.jsx(EventMessages.make, {
                                                                                                  queryRef: queryFragmentRefs,
                                                                                                  eventStartDate: Core__Option.getOr(Core__Option.map($$event.startDate, Util.Datetime.toDate), new Date())
                                                                                                }),
                                                                                            className: "ml-3 border-gray-200 border-l-4 pl-5 mt-4"
                                                                                          })
                                                                                    ],
                                                                                    className: "-mx-4 px-6 py-4 shadow-sm ring-1 ring-gray-900/5 sm:mx-0 sm:rounded-lg sm:px-8 sm:py-6 xl:px-12 xl:py-8"
                                                                                  }),
                                                                              Core__Option.getOr(Core__Option.map($$event.location, (function ($$location) {
                                                                                          return JsxRuntime.jsxs("div", {
                                                                                                      children: [
                                                                                                        JsxRuntime.jsx("h2", {
                                                                                                              children: t`media`,
                                                                                                              className: "text-base font-semibold leading-6 text-gray-900"
                                                                                                            }),
                                                                                                        JsxRuntime.jsx($$MediaList.make, {
                                                                                                              media: $$location.fragmentRefs
                                                                                                            })
                                                                                                      ],
                                                                                                      className: "-mx-4 px-6 py-4 shadow-sm ring-1 ring-gray-900/5 sm:mx-0 sm:rounded-lg sm:px-8 sm:py-6 xl:px-12 xl:py-8"
                                                                                                    });
                                                                                        })), null)
                                                                            ],
                                                                            className: "grid grid-cols-1 grid-rows-1 items-start gap-x-8 gap-y-4 lg:mx-0 lg:max-w-none"
                                                                          }),
                                                                      className: "lg:col-span-2 lg:row-span-2 lg:row-end-2"
                                                                    })
                                                              ],
                                                              className: "mx-auto grid max-w-2xl grid-cols-1 grid-rows-1 items-start gap-x-8 gap-y-4 lg:mx-0 lg:max-w-none lg:grid-cols-3"
                                                            })
                                                      })
                                                ]
                                              });
                                  })
                              });
                  })), JsxRuntime.jsx("div", {
                  children: t`event doesn't exist`
                }));
}

var LoaderArgs = {};

var loadMessages = Lingui.loadMessages({
      ja: import("../../locales/src/components/pages/Event.re/ja"),
      en: import("../../locales/src/components/pages/Event.re/en")
    });

async function loader(param) {
  var params = param.params;
  var url = new URL(param.request.url);
  var after = Router.SearchParams.get(url.searchParams, "after");
  var before = Router.SearchParams.get(url.searchParams, "before");
  if (import.meta.env.SSR) {
    await Localized.loadMessages(params.lang, loadMessages);
  }
  return ReactRouterDom.defer({
              data: EventQuery_graphql.load(RelayEnv.getRelayEnv(param.context, import.meta.env.SSR), {
                    after: after,
                    before: before,
                    eventId: params.eventId,
                    topic: params.eventId + ".updated"
                  }, "store-or-network", undefined, undefined),
              i18nLoaders: Caml_option.some(Localized.loadMessages(params.lang, loadMessages))
            });
}

function __unused() {
  t({
        id: "Badminton"
      });
  t({
        id: "Table Tennis"
      });
  t({
        id: "Pickleball"
      });
  t({
        id: "Futsal"
      });
}

var make = $$Event;

var $$default = $$Event;

var Component = $$Event;

export {
  EventQuery ,
  EventCancelMutation ,
  EventUncancelMutation ,
  sessionContext ,
  make ,
  $$default as default,
  Component ,
  LoaderArgs ,
  loadMessages ,
  loader ,
  __unused ,
}
/*  Not a pure module */

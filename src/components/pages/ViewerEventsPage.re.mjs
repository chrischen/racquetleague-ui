// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Grid from "../vanillaui/atoms/Grid.re.mjs";
import * as React from "react";
import * as Layout from "../shared/Layout.re.mjs";
import * as PageTitle from "../vanillaui/atoms/PageTitle.re.mjs";
import * as EventsList from "../organisms/EventsList.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GlobalQuery from "../shared/GlobalQuery.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as AddToCalendar from "../molecules/AddToCalendar.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as ViewerEventsPageQuery_graphql from "../../__generated__/ViewerEventsPageQuery_graphql.re.mjs";

import { css, cx } from '@linaria/core'
;

import { t } from '@lingui/macro'
;

var convertVariables = ViewerEventsPageQuery_graphql.Internal.convertVariables;

var convertResponse = ViewerEventsPageQuery_graphql.Internal.convertResponse;

RescriptRelay_Query.useQuery(convertVariables, ViewerEventsPageQuery_graphql.node, convertResponse);

RescriptRelay_Query.useLoader(convertVariables, ViewerEventsPageQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(ViewerEventsPageQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

RescriptRelay_Query.$$fetch(ViewerEventsPageQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.fetchPromised(ViewerEventsPageQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.retain(ViewerEventsPageQuery_graphql.node, convertVariables);

function ViewerEventsPage(props) {
  var query = ReactRouterDom.useLoaderData();
  var viewer = GlobalQuery.useViewer();
  var match = usePreloaded(query.data);
  var fragmentRefs = match.fragmentRefs;
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                              children: [
                                JsxRuntime.jsx(Layout.Container.make, {
                                      children: JsxRuntime.jsxs(Grid.make, {
                                            children: [
                                              JsxRuntime.jsx(PageTitle.make, {
                                                    children: t`my events`
                                                  }),
                                              JsxRuntime.jsxs("div", {
                                                    children: [
                                                      JsxRuntime.jsx(ReactRouterDom.Link, {
                                                            to: "/",
                                                            children: t`public events`
                                                          }),
                                                      Core__Option.getOr(Core__Option.map(viewer.user, (function (param) {
                                                                  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                                                              children: [
                                                                                " ",
                                                                                JsxRuntime.jsx("svg", {
                                                                                      children: JsxRuntime.jsx("circle", {
                                                                                            cx: (1).toString(),
                                                                                            cy: (1).toString(),
                                                                                            r: (1).toString()
                                                                                          }),
                                                                                      className: "h-1.5 w-1.5 inline flex-none fill-gray-600",
                                                                                      viewBox: "0 0 2 2"
                                                                                    }),
                                                                                " ",
                                                                                JsxRuntime.jsx(ReactRouterDom.Link, {
                                                                                      to: "/events",
                                                                                      children: t`my events`,
                                                                                      relative: "path"
                                                                                    })
                                                                              ]
                                                                            });
                                                                })), null)
                                                    ]
                                                  })
                                            ]
                                          })
                                    }),
                                JsxRuntime.jsx(Layout.Container.make, {
                                      children: JsxRuntime.jsx(AddToCalendar.make, {})
                                    }),
                                JsxRuntime.jsx(React.Suspense, {
                                      children: Caml_option.some(JsxRuntime.jsx(EventsList.make, {
                                                events: fragmentRefs
                                              })),
                                      fallback: Caml_option.some(JsxRuntime.jsx(Layout.Container.make, {
                                                children: "Loading events..."
                                              }))
                                    })
                              ]
                            });
                })
            });
}

var make = ViewerEventsPage;

export {
  make ,
}
/*  Not a pure module */

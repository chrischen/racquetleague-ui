// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../shared/Util.re.mjs";
import * as Button from "../catalyst/Button.re.mjs";
import * as Lingui from "../../locales/Lingui.re.mjs";
import * as Router from "../shared/Router.re.mjs";
import * as RelayEnv from "../../entry/RelayEnv.re.mjs";
import * as Localized from "../shared/i18n/Localized.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as EventHeader from "../organisms/EventHeader.re.mjs";
import * as RSVPSection from "../organisms/RSVPSection.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as EventDetails from "../organisms/EventDetails.re.mjs";
import * as EventMessages from "../organisms/EventMessages.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as EventPageQuery_graphql from "../../__generated__/EventPageQuery_graphql.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as EventPageCancelMutation_graphql from "../../__generated__/EventPageCancelMutation_graphql.re.mjs";
import * as EventPageUncancelMutation_graphql from "../../__generated__/EventPageUncancelMutation_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = EventPageQuery_graphql.Internal.convertVariables;

var convertResponse = EventPageQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = EventPageQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, EventPageQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, EventPageQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(EventPageQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(EventPageQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(EventPageQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(EventPageQuery_graphql.node, convertVariables);

var EventPageQuery = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var convertVariables$1 = EventPageCancelMutation_graphql.Internal.convertVariables;

var convertResponse$1 = EventPageCancelMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = EventPageCancelMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables$1, EventPageCancelMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var use$1 = RescriptRelay_Mutation.useMutation(convertVariables$1, EventPageCancelMutation_graphql.node, convertResponse$1, convertWrapRawResponse$1);

var EventCancelMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  commitMutation: commitMutation,
  use: use$1
};

var convertVariables$2 = EventPageUncancelMutation_graphql.Internal.convertVariables;

var convertResponse$2 = EventPageUncancelMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$2 = EventPageUncancelMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$1 = RescriptRelay_Mutation.commitMutation(convertVariables$2, EventPageUncancelMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var use$2 = RescriptRelay_Mutation.useMutation(convertVariables$2, EventPageUncancelMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var EventUncancelMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$2,
  convertResponse: convertResponse$2,
  convertWrapRawResponse: convertWrapRawResponse$2,
  commitMutation: commitMutation$1,
  use: use$2
};

function EventPage(props) {
  var query = ReactRouterDom.useLoaderData();
  var match = usePreloaded(query.data);
  var queryFragmentRefs = match.fragmentRefs;
  var $$event = match.event;
  var viewerUser = Core__Option.flatMap(match.viewer, (function (v) {
          return v.user;
        }));
  var match$1 = use$1();
  var canceling = match$1[1];
  var cancelEvent = match$1[0];
  var match$2 = use$2();
  var uncanceling = match$2[1];
  var uncancelEvent = match$2[0];
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  return Core__Option.getOr(Core__Option.map($$event, (function ($$event) {
                                    var startDateJs = Core__Option.getOr(Core__Option.map($$event.startDate, Util.Datetime.toDate), new Date());
                                    var match = $$event.viewerIsAdmin;
                                    var tmp;
                                    if (match && viewerUser !== undefined) {
                                      var match$1 = $$event.deleted;
                                      tmp = JsxRuntime.jsx("div", {
                                            children: JsxRuntime.jsx("div", {
                                                  children: JsxRuntime.jsxs("div", {
                                                        children: [
                                                          JsxRuntime.jsx(Button.Button.make, {
                                                                children: t`edit event`,
                                                                href: "/events/update/" + $$event.id + "/" + Core__Option.getOr(Core__Option.map($$event.location, (function (l) {
                                                                            return l.id;
                                                                          })), "")
                                                              }),
                                                          match$1 !== undefined ? JsxRuntime.jsx(Button.Button.make, {
                                                                  children: t`uncancel event`,
                                                                  onClick: (function (param) {
                                                                      if (!uncanceling) {
                                                                        uncancelEvent({
                                                                              eventId: $$event.id
                                                                            }, undefined, undefined, undefined, undefined, undefined, undefined);
                                                                        return ;
                                                                      }
                                                                      
                                                                    })
                                                                }) : JsxRuntime.jsx(Button.Button.make, {
                                                                  children: t`cancel event`,
                                                                  onClick: (function (param) {
                                                                      if (!canceling) {
                                                                        cancelEvent({
                                                                              eventId: $$event.id
                                                                            }, undefined, undefined, undefined, undefined, undefined, undefined);
                                                                        return ;
                                                                      }
                                                                      
                                                                    })
                                                                }),
                                                          Core__Option.getOr(Core__Option.flatMap($$event.activity, (function (activity) {
                                                                      return Core__Option.map(activity.slug, (function (slug) {
                                                                                    switch (slug) {
                                                                                      case "badminton" :
                                                                                      case "pickleball" :
                                                                                          break;
                                                                                      default:
                                                                                        return null;
                                                                                    }
                                                                                    return JsxRuntime.jsx(Button.Button.make, {
                                                                                                children: t`submit matches`,
                                                                                                href: "/league/events/" + $$event.id + "/" + slug
                                                                                              });
                                                                                  }));
                                                                    })), null)
                                                        ],
                                                        className: "flex flex-row gap-2"
                                                      }),
                                                  className: "bg-gray-50 rounded-lg p-4 border"
                                                }),
                                            className: "px-4 md:px-6 lg:px-8 mb-6"
                                          });
                                    } else {
                                      tmp = null;
                                    }
                                    return JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx(EventHeader.make, {
                                                        event: $$event.fragmentRefs
                                                      }),
                                                  tmp,
                                                  JsxRuntime.jsx("div", {
                                                        children: JsxRuntime.jsxs("div", {
                                                              children: [
                                                                JsxRuntime.jsxs("div", {
                                                                      children: [
                                                                        JsxRuntime.jsx(EventDetails.make, {
                                                                              event: $$event.fragmentRefs
                                                                            }),
                                                                        JsxRuntime.jsx(EventMessages.make, {
                                                                              queryRef: queryFragmentRefs,
                                                                              eventStartDate: startDateJs,
                                                                              eventId: $$event.id,
                                                                              viewerHasRsvp: $$event.viewerHasRsvp
                                                                            })
                                                                      ],
                                                                      className: "md:col-span-7 lg:col-span-8 pb-8 md:pb-0"
                                                                    }),
                                                                JsxRuntime.jsx("div", {
                                                                      children: JsxRuntime.jsx(RSVPSection.make, {
                                                                            event: $$event.fragmentRefs,
                                                                            user: Core__Option.map(viewerUser, (function (v) {
                                                                                    return v.fragmentRefs;
                                                                                  }))
                                                                          }),
                                                                      className: "md:col-span-5 lg:col-span-4"
                                                                    })
                                                              ],
                                                              className: "md:grid md:grid-cols-12 md:gap-8"
                                                            }),
                                                        className: "px-4 md:px-6 lg:px-8"
                                                      })
                                                ],
                                                className: "w-full max-w-7xl mx-auto pb-16 md:pb-8"
                                              });
                                  })), JsxRuntime.jsx("div", {
                                  children: t`Event not found`,
                                  className: "p-6 text-center text-gray-600"
                                }));
                })
            });
}

var LoaderArgs = {};

var loadMessages = Lingui.loadMessages({
      en: import("../../locales/src/components/pages/EventPage.re/en"),
      ja: import("../../locales/src/components/pages/EventPage.re/ja"),
      th: import("../../locales/src/components/pages/EventPage.re/th"),
      zhTW: import("../../locales/src/components/pages/EventPage.re/zh-TW"),
      zhCN: import("../../locales/src/components/pages/EventPage.re/zh-CN")
    });

async function loader(param) {
  var params = param.params;
  var url = new URL(param.request.url);
  var after = Router.SearchParams.get(url.searchParams, "after");
  var before = Router.SearchParams.get(url.searchParams, "before");
  if (import.meta.env.SSR) {
    await Localized.loadMessages(params.lang, loadMessages);
  }
  return ReactRouterDom.defer({
              data: EventPageQuery_graphql.load(RelayEnv.getRelayEnv(param.context, import.meta.env.SSR), {
                    after: after,
                    before: before,
                    eventId: params.eventId,
                    topic: params.eventId + ".updated"
                  }, "store-or-network", undefined, undefined),
              i18nLoaders: Caml_option.some(Localized.loadMessages(params.lang, loadMessages))
            });
}

function __unused() {
  t({
        id: "Badminton"
      });
  t({
        id: "Table Tennis"
      });
  t({
        id: "Pickleball"
      });
  t({
        id: "Futsal"
      });
  t({
        id: "drill"
      });
  t({
        id: "comp"
      });
  t({
        id: "rec"
      });
  t({
        id: "all level"
      });
}

var make = EventPage;

var $$default = EventPage;

var Component = EventPage;

export {
  EventPageQuery ,
  EventCancelMutation ,
  EventUncancelMutation ,
  make ,
  $$default as default,
  Component ,
  LoaderArgs ,
  loadMessages ,
  loader ,
  __unused ,
}
/*  Not a pure module */

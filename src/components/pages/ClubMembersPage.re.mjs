// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Button from "../catalyst/Button.re.mjs";
import * as Layout from "../shared/Layout.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.re.mjs";
import * as SwipeAction from "../molecules/SwipeAction.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as LangProvider from "../shared/LangProvider.re.mjs";
import * as ConfirmButton from "../molecules/ConfirmButton.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as RescriptRelay_Mutation from "rescript-relay/src/RescriptRelay_Mutation.re.mjs";
import * as ClubMembersPageQuery_graphql from "../../__generated__/ClubMembersPageQuery_graphql.re.mjs";
import * as ClubMembersPageMembersQuery_graphql from "../../__generated__/ClubMembersPageMembersQuery_graphql.re.mjs";
import * as ClubMembersPageRemoveUserFromClubMutation_graphql from "../../__generated__/ClubMembersPageRemoveUserFromClubMutation_graphql.re.mjs";
import * as ClubMembersPageUpdateMembershipStatusMutation_graphql from "../../__generated__/ClubMembersPageUpdateMembershipStatusMutation_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = ClubMembersPageQuery_graphql.Internal.convertVariables;

var convertResponse = ClubMembersPageQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse = ClubMembersPageQuery_graphql.Internal.convertWrapRawResponse;

var use = RescriptRelay_Query.useQuery(convertVariables, ClubMembersPageQuery_graphql.node, convertResponse);

var useLoader = RescriptRelay_Query.useLoader(convertVariables, ClubMembersPageQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(ClubMembersPageQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

var $$fetch = RescriptRelay_Query.$$fetch(ClubMembersPageQuery_graphql.node, convertResponse, convertVariables);

var fetchPromised = RescriptRelay_Query.fetchPromised(ClubMembersPageQuery_graphql.node, convertResponse, convertVariables);

var retain = RescriptRelay_Query.retain(ClubMembersPageQuery_graphql.node, convertVariables);

var Query = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapRawResponse,
  use: use,
  useLoader: useLoader,
  usePreloaded: usePreloaded,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  retain: retain
};

var convertVariables$1 = ClubMembersPageMembersQuery_graphql.Internal.convertVariables;

var convertResponse$1 = ClubMembersPageMembersQuery_graphql.Internal.convertResponse;

var convertWrapRawResponse$1 = ClubMembersPageMembersQuery_graphql.Internal.convertWrapRawResponse;

var use$1 = RescriptRelay_Query.useQuery(convertVariables$1, ClubMembersPageMembersQuery_graphql.node, convertResponse$1);

var useLoader$1 = RescriptRelay_Query.useLoader(convertVariables$1, ClubMembersPageMembersQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded$1 = RescriptRelay_Query.usePreloaded(ClubMembersPageMembersQuery_graphql.node, convertResponse$1, (function (prim) {
        return prim;
      }));

var $$fetch$1 = RescriptRelay_Query.$$fetch(ClubMembersPageMembersQuery_graphql.node, convertResponse$1, convertVariables$1);

var fetchPromised$1 = RescriptRelay_Query.fetchPromised(ClubMembersPageMembersQuery_graphql.node, convertResponse$1, convertVariables$1);

var retain$1 = RescriptRelay_Query.retain(ClubMembersPageMembersQuery_graphql.node, convertVariables$1);

var MembersQuery_t_decode = ClubMembersPageMembersQuery_graphql.Utils.t_decode;

var MembersQuery_t_fromString = ClubMembersPageMembersQuery_graphql.Utils.t_fromString;

var MembersQuery = {
  t_decode: MembersQuery_t_decode,
  t_fromString: MembersQuery_t_fromString,
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$1,
  convertResponse: convertResponse$1,
  convertWrapRawResponse: convertWrapRawResponse$1,
  use: use$1,
  useLoader: useLoader$1,
  usePreloaded: usePreloaded$1,
  $$fetch: $$fetch$1,
  fetchPromised: fetchPromised$1,
  retain: retain$1
};

var convertVariables$2 = ClubMembersPageRemoveUserFromClubMutation_graphql.Internal.convertVariables;

var convertResponse$2 = ClubMembersPageRemoveUserFromClubMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$2 = ClubMembersPageRemoveUserFromClubMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation = RescriptRelay_Mutation.commitMutation(convertVariables$2, ClubMembersPageRemoveUserFromClubMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var use$2 = RescriptRelay_Mutation.useMutation(convertVariables$2, ClubMembersPageRemoveUserFromClubMutation_graphql.node, convertResponse$2, convertWrapRawResponse$2);

var RemoveUserFromClubMutation = {
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$2,
  convertResponse: convertResponse$2,
  convertWrapRawResponse: convertWrapRawResponse$2,
  commitMutation: commitMutation,
  use: use$2
};

var convertVariables$3 = ClubMembersPageUpdateMembershipStatusMutation_graphql.Internal.convertVariables;

var convertResponse$3 = ClubMembersPageUpdateMembershipStatusMutation_graphql.Internal.convertResponse;

var convertWrapRawResponse$3 = ClubMembersPageUpdateMembershipStatusMutation_graphql.Internal.convertWrapRawResponse;

var commitMutation$1 = RescriptRelay_Mutation.commitMutation(convertVariables$3, ClubMembersPageUpdateMembershipStatusMutation_graphql.node, convertResponse$3, convertWrapRawResponse$3);

var use$3 = RescriptRelay_Mutation.useMutation(convertVariables$3, ClubMembersPageUpdateMembershipStatusMutation_graphql.node, convertResponse$3, convertWrapRawResponse$3);

var UpdateMembershipStatusMutation_t_decode = ClubMembersPageUpdateMembershipStatusMutation_graphql.Utils.t_decode;

var UpdateMembershipStatusMutation_t_fromString = ClubMembersPageUpdateMembershipStatusMutation_graphql.Utils.t_fromString;

var UpdateMembershipStatusMutation = {
  t_decode: UpdateMembershipStatusMutation_t_decode,
  t_fromString: UpdateMembershipStatusMutation_t_fromString,
  Operation: undefined,
  Types: undefined,
  convertVariables: convertVariables$3,
  convertResponse: convertResponse$3,
  convertWrapRawResponse: convertWrapRawResponse$3,
  commitMutation: commitMutation$1,
  use: use$3
};

function ClubMembersPage$MemberItem(props) {
  var onApprove = props.onApprove;
  var onRemove = props.onRemove;
  var viewerIsAdmin = props.viewerIsAdmin;
  var membership = props.membership;
  var isAdmin = Core__Option.getOr(membership.isAdmin, false);
  var isOwner = Core__Option.getOr(membership.isOwner, false);
  var member = membership.user;
  if (member === undefined) {
    return null;
  }
  var username = member.lineUsername;
  var match = membership.status;
  var tmp;
  tmp = match !== undefined && (match === "Pending" || match === "Active" || match === "Rejected") && match === "Pending" && viewerIsAdmin && !isOwner ? JsxRuntime.jsx(Button.Button.make, {
          color: "indigo",
          children: t`Approve`,
          onClick: (function (param) {
              onApprove();
            })
        }) : null;
  return JsxRuntime.jsx(SwipeAction.make, {
              rightActions: Caml_option.some(viewerIsAdmin && !isOwner ? JsxRuntime.jsx(ConfirmButton.make, {
                          button: JsxRuntime.jsx(Button.Button.make, {
                                color: "red",
                                children: t`Remove`
                              }),
                          title: t`Remove member?`,
                          description: t`Are you sure you want to remove ${Core__Option.getOr(member.fullName, "this member")} from the club?`,
                          onConfirmed: (function () {
                              onRemove();
                            })
                        }) : null),
              partialThreshold: 120,
              fullThreshold: 260,
              className: "cursor-pointer border-b border-gray-200",
              hoverPartialSide: "right",
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("img", {
                                    className: "h-10 w-10 rounded-full",
                                    alt: Core__Option.getOr(member.fullName, "Member"),
                                    src: Core__Option.getOr(member.picture, "/default-avatar.png")
                                  }),
                              JsxRuntime.jsxs("div", {
                                    children: [
                                      JsxRuntime.jsx("h3", {
                                            children: Core__Option.getOr(member.fullName, "Unknown Member"),
                                            className: "text-sm font-medium text-gray-900"
                                          }),
                                      username !== undefined ? JsxRuntime.jsx("p", {
                                              children: "@" + username,
                                              className: "text-sm text-gray-500"
                                            }) : null
                                    ]
                                  })
                            ],
                            className: "flex items-center space-x-4"
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              tmp,
                              isOwner ? JsxRuntime.jsx("span", {
                                      children: "Owner",
                                      className: "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800"
                                    }) : null,
                              isAdmin && !isOwner ? JsxRuntime.jsx("span", {
                                      children: "Admin",
                                      className: "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                                    }) : null
                            ],
                            className: "flex items-center space-x-2"
                          })
                    ],
                    className: "flex items-center justify-between py-4 px-6"
                  })
            });
}

var MemberItem = {
  make: ClubMembersPage$MemberItem
};

function ClubMembersPage$ClubMembersData(props) {
  var viewerIsAdmin = props.viewerIsAdmin;
  var clubId = props.clubId;
  var data = use$1({
        clubId: clubId,
        first: 20
      }, undefined, undefined, undefined);
  var match = use$2();
  var removeMutation = match[0];
  var match$1 = use$3();
  var updateStatusMutation = match$1[0];
  var edges = data.clubMembers.edges;
  var tmp;
  var exit = 0;
  if (edges !== undefined && edges.length !== 0) {
    var memberships = Core__Array.filterMap(Core__Array.filterMap(edges, (function (edge) {
                return edge;
              })), (function (edge) {
            return edge.node;
          }));
    var pendingMembers = memberships.filter(function (m) {
          var match = m.status;
          if (match !== undefined && (match === "Pending" || match === "Active" || match === "Rejected") && match === "Pending") {
            return true;
          } else {
            return false;
          }
        });
    var otherMembers = memberships.filter(function (m) {
          var match = m.status;
          if (match !== undefined && (match === "Pending" || match === "Active" || match === "Rejected") && match === "Pending") {
            return false;
          } else {
            return true;
          }
        });
    var renderMembers = function (members) {
      return members.map(function (membership) {
                  return JsxRuntime.jsx(ClubMembersPage$MemberItem, {
                              membership: membership,
                              viewerIsAdmin: viewerIsAdmin,
                              onRemove: (function () {
                                  var user = membership.user;
                                  if (user !== undefined) {
                                    var userId = user.id;
                                    var membersConnectionId = data.clubMembers.__id;
                                    removeMutation({
                                          connections: [membersConnectionId],
                                          input: {
                                            clubId: clubId,
                                            userId: userId
                                          }
                                        }, undefined, undefined, undefined, (function (param, _errors) {
                                            var errors = param.removeUserFromClub.errors;
                                            if (errors !== undefined && errors.length !== 0) {
                                              errors.forEach(function (error) {
                                                    console.error("Failed to remove user: " + error.message);
                                                  });
                                              return ;
                                            }
                                            
                                          }), undefined, undefined);
                                    return ;
                                  }
                                  
                                }),
                              onApprove: (function () {
                                  var membershipId = membership.id;
                                  updateStatusMutation({
                                        input: {
                                          membershipId: membershipId,
                                          status: "Active"
                                        }
                                      }, undefined, undefined, undefined, (function (param, _errors) {
                                          var errors = param.updateMembershipStatus.errors;
                                          if (errors !== undefined && errors.length !== 0) {
                                            errors.forEach(function (e) {
                                                  console.error("Failed to approve user: " + e.message);
                                                });
                                            return ;
                                          }
                                          
                                        }), undefined, undefined);
                                })
                            }, membership.id);
                });
    };
    tmp = JsxRuntime.jsxs(JsxRuntime.Fragment, {
          children: [
            pendingMembers.length > 0 ? JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("h4", {
                            children: t`Pending`,
                            className: "text-sm font-semibold text-gray-700 mb-2"
                          }),
                      JsxRuntime.jsx("div", {
                            children: renderMembers(pendingMembers),
                            className: "divide-y divide-gray-200 rounded-md border border-gray-200 overflow-hidden"
                          })
                    ],
                    className: "mb-6"
                  }) : null,
            otherMembers.length > 0 ? JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx("div", {
                          children: renderMembers(otherMembers),
                          className: "divide-y divide-gray-200 rounded-md border border-gray-200 overflow-hidden"
                        }),
                    className: pendingMembers.length > 0 ? "pt-4 border-t border-gray-200" : ""
                  }) : null
          ]
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = JsxRuntime.jsx("div", {
          children: JsxRuntime.jsx("p", {
                children: t`No members found`,
                className: "text-sm"
              }),
          className: "py-8 text-center text-gray-500"
        });
  }
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("h3", {
                            children: t`Members`,
                            className: "text-lg font-medium text-gray-900 mb-4"
                          }),
                      JsxRuntime.jsx("div", {
                            children: tmp,
                            className: ""
                          })
                    ],
                    className: "px-4 py-5 sm:p-6"
                  }),
              className: "bg-white shadow overflow-hidden sm:rounded-md"
            });
}

var ClubMembersData = {
  make: ClubMembersPage$ClubMembersData
};

function ClubMembersPage(props) {
  var data = ReactRouterDom.useLoaderData();
  var query = usePreloaded(data.data);
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  return Core__Option.getOr(Core__Option.map(query.club, (function (club) {
                                    var viewerIsAdmin = Core__Option.getOr(Core__Option.map(Core__Option.flatMap(query.viewer, (function (viewer) {
                                                    return viewer.adminClubs.edges;
                                                  })), (function (edges) {
                                                return Core__Array.filterMap(Core__Array.filterMap(edges, (function (edge) {
                                                                    return edge;
                                                                  })), (function (edge) {
                                                                return edge.node;
                                                              })).some(function (adminClub) {
                                                            return adminClub.id === club.id;
                                                          });
                                              })), false);
                                    return JsxRuntime.jsxs(Layout.Container.make, {
                                                children: [
                                                  JsxRuntime.jsxs("h1", {
                                                        children: [
                                                          JsxRuntime.jsx("div", {
                                                                children: JsxRuntime.jsx(LangProvider.Router.Link.make, {
                                                                      to: "/clubs/" + Core__Option.getOr(club.slug, ""),
                                                                      children: Core__Option.getOr(club.name, "?")
                                                                    }),
                                                                className: "text-base leading-6 text-gray-500"
                                                              }),
                                                          JsxRuntime.jsx("div", {
                                                                children: t`Members`,
                                                                className: "mt-1 text-2xl font-semibold leading-6 text-gray-900"
                                                              })
                                                        ]
                                                      }),
                                                  JsxRuntime.jsx("div", {
                                                        children: JsxRuntime.jsx(React.Suspense, {
                                                              children: Caml_option.some(JsxRuntime.jsx(ClubMembersPage$ClubMembersData, {
                                                                        clubId: club.id,
                                                                        viewerIsAdmin: viewerIsAdmin
                                                                      })),
                                                              fallback: Caml_option.some(JsxRuntime.jsx("div", {
                                                                        children: "Loading members..."
                                                                      }))
                                                            }),
                                                        className: "mt-8"
                                                      })
                                                ]
                                              });
                                  })), JsxRuntime.jsx(Layout.Container.make, {
                                  children: t`club not found`
                                }));
                })
            });
}

var make = ClubMembersPage;

export {
  Query ,
  MembersQuery ,
  RemoveUserFromClubMutation ,
  UpdateMembershipStatusMutation ,
  MemberItem ,
  ClubMembersData ,
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Layout from "../shared/Layout.re.mjs";
import * as EventsList from "../organisms/EventsList.re.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ClubDetails from "../organisms/ClubDetails.re.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.re.mjs";
import * as WaitForMessages from "../shared/i18n/WaitForMessages.re.mjs";
import * as ReactRouterDom from "react-router-dom";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptRelay_Query from "rescript-relay/src/RescriptRelay_Query.re.mjs";
import * as ClubPageQuery_graphql from "../../__generated__/ClubPageQuery_graphql.re.mjs";

import { t } from '@lingui/macro'
;

var convertVariables = ClubPageQuery_graphql.Internal.convertVariables;

var convertResponse = ClubPageQuery_graphql.Internal.convertResponse;

RescriptRelay_Query.useQuery(convertVariables, ClubPageQuery_graphql.node, convertResponse);

RescriptRelay_Query.useLoader(convertVariables, ClubPageQuery_graphql.node, (function (prim) {
        return prim;
      }));

var usePreloaded = RescriptRelay_Query.usePreloaded(ClubPageQuery_graphql.node, convertResponse, (function (prim) {
        return prim;
      }));

RescriptRelay_Query.$$fetch(ClubPageQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.fetchPromised(ClubPageQuery_graphql.node, convertResponse, convertVariables);

RescriptRelay_Query.retain(ClubPageQuery_graphql.node, convertVariables);

function ClubPage(props) {
  var data = ReactRouterDom.useLoaderData();
  var query = usePreloaded(data.data);
  return JsxRuntime.jsx(WaitForMessages.make, {
              children: (function () {
                  return Core__Option.getOr(Core__Option.map(query.club, (function (club) {
                                    return JsxRuntime.jsx(JsxRuntime.Fragment, {
                                                children: Caml_option.some(JsxRuntime.jsx(EventsList.make, {
                                                          events: query.fragmentRefs,
                                                          header: JsxRuntime.jsxs(Layout.Container.make, {
                                                                children: [
                                                                  JsxRuntime.jsxs("h1", {
                                                                        children: [
                                                                          JsxRuntime.jsx("div", {
                                                                                children: t`club`,
                                                                                className: "text-base leading-6 text-gray-500"
                                                                              }),
                                                                          JsxRuntime.jsx("div", {
                                                                                children: Core__Option.getOr(club.name, "?"),
                                                                                className: "mt-1 text-2xl font-semibold leading-6 text-gray-900"
                                                                              })
                                                                        ]
                                                                      }),
                                                                  JsxRuntime.jsx(ClubDetails.make, {
                                                                        club: club.fragmentRefs
                                                                      })
                                                                ]
                                                              })
                                                        }))
                                              });
                                  })), JsxRuntime.jsx(Layout.Container.make, {
                                  children: t`club not found`
                                }));
                })
            });
}

var make = ClubPage;

export {
  make ,
}
/*  Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Openskill from "openskill";

function get_rating(t) {
  return t.mu;
}

function make(mu, sigma) {
  return Openskill.rating({
              mu: mu,
              sigma: sigma
            });
}

function makeDefault() {
  return Openskill.rating(undefined);
}

function Rating_predictDraw(prim) {
  return Openskill.predictDraw(prim);
}

function Rating_ordinal(prim) {
  return Openskill.ordinal(prim);
}

var Rating = {
  get_rating: get_rating,
  make: make,
  makeDefault: makeDefault,
  predictDraw: Rating_predictDraw,
  ordinal: Rating_ordinal
};

var Player = {};

function contains_player(players, player) {
  var players$1 = new Set(players.map(function (p) {
            return p.id;
          }));
  return players$1.has(player.id);
}

function is_equal_to(t1, t2) {
  var t1$1 = new Set(t1.map(function (p) {
            return p.id;
          }));
  var t2$1 = new Set(t2.map(function (p) {
            return p.id;
          }));
  return t1$1.intersection(t2$1).size === t1$1.size;
}

var Team = {
  contains_player: contains_player,
  is_equal_to: is_equal_to
};

function is_equal_to$1(t1, t2) {
  return t1.intersection(t2).size === t1.size;
}

var TeamSet = {
  is_equal_to: is_equal_to$1
};

function contains_player$1(param, player) {
  if (contains_player(param[0], player)) {
    return true;
  } else {
    return contains_player(param[1], player);
  }
}

function contains_any_players(param, players) {
  var players$1 = new Set(players.map(function (p) {
            return p.id;
          }));
  var match_players = new Set([
            param[0],
            param[1]
          ].map(function (t) {
              return t.map(function (p) {
                          return p.id;
                        });
            }).flatMap(function (x) {
            return x;
          }));
  return match_players.intersection(players$1).size > 0;
}

var Match = {
  contains_player: contains_player$1,
  contains_any_players: contains_any_players
};

function fromTeam(team) {
  if (team.length !== 2) {
    return {
            TAG: "Error",
            _0: "TwoPlayersRequired"
          };
  }
  var p1 = team[0];
  var p2 = team[1];
  return {
          TAG: "Ok",
          _0: [
            p1,
            p2
          ]
        };
}

var DoublesTeam = {
  fromTeam: fromTeam
};

function fromMatch(param) {
  var t1 = fromTeam(param[0]);
  var t2 = fromTeam(param[1]);
  if (t1.TAG === "Ok") {
    if (t2.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: [
                t1._0,
                t2._0
              ]
            };
    } else {
      return {
              TAG: "Error",
              _0: t2._0
            };
    }
  } else {
    return {
            TAG: "Error",
            _0: t1._0
          };
  }
}

var DoublesMatch = {
  fromMatch: fromMatch
};

export {
  Rating ,
  Player ,
  Team ,
  TeamSet ,
  Match ,
  DoublesTeam ,
  DoublesMatch ,
}
/* openskill Not a pure module */

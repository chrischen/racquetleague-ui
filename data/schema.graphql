"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean! = true

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to stream plural fields when the `if` argument is true or undefined.
"""
directive @stream(
  """Stream when true or undefined."""
  if: Boolean! = true

  """Number of items to return immediately"""
  initialCount: Int = 0

  """Unique name"""
  label: String
) on FIELD

type Activity implements Node {
  id: ID!
  name: String
  slug: String
  sub: Subscription
}

type ActivitySubscriptionMutationResult implements HasErrors {
  activity: Activity
  errors: [Error!]
}

type Club {
  defaultActivity: Activity
  description: String
  id: ID!
  name: String
}

"""A connection to clubs."""
type ClubConnection {
  """A list of edges."""
  edges: [ClubEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge to a club."""
type ClubEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Club
}

type Coords {
  lat: Float!
  lng: Float!
}

input CreateActivitySubscriptionInput {
  activityId: String!
}

input CreateClubInput {
  activity: ID!
  description: String
  name: String!
}

type CreateClubResult implements HasErrors {
  club: Club
  errors: [Error!]
}

input CreateEventInput {
  activity: ID!
  details: String
  endDate: Datetime!
  listed: Boolean
  locationId: ID!
  maxRsvps: Int
  startDate: Datetime!
  title: String!
}

input CreateEventsInput {
  activityId: String!
  clubId: String!
  input: String!
  listed: Boolean!
}

type CreateEventsResult implements HasErrors {
  errors: [Error!]
  events: [Event!]
}

input CreateLocationInput {
  address: String!
  details: String
  links: [String!]
  listed: Boolean
  name: String!
}

type CreateMatchResponse implements HasErrors {
  errors: [Error!]
  match: Match
}

"""A date."""
scalar Datetime

input DeleteActivitySubscriptionInput {
  subscriptionId: String!
}

input DoublesMatchInput {
  createdAt: Datetime!
  losers: [String!]!
  score: [Float!]
  winners: [String!]!
}

type Error {
  message: String!
}

type Event implements Node {
  activity: Activity
  details: String
  endDate: Datetime
  id: ID!
  listed: Boolean
  location: Location
  maxRsvps: Int
  owner: User
  rsvps(after: String, before: String, first: Int): EventRsvpConnection
  startDate: Datetime
  title: String
  viewerHasRsvp: Boolean
  viewerIsAdmin: Boolean
  viewerRsvpStatus: RsvpStatus
}

"""A connection to users."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge to a user."""
type EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Event
}

input EventFilters {
  locationId: ID
  userId: ID
  viewer: Boolean
}

"""A connection to users."""
type EventRsvpConnection {
  """A list of edges."""
  edges: [EventRsvpEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge to a user."""
type EventRsvpEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Rsvp
}

enum Gender {
  female
  male
}

interface HasErrors {
  errors: [Error!]
}

type JoinEventResult implements HasErrors {
  edge: EventRsvpEdge
  errors: [Error!]
}

input LeagueMatchInput {
  activitySlug: String!
  doublesMatch: DoublesMatchInput!
  namespace: String!
}

type LeaveEventResult implements HasErrors {
  errors: [Error!]
  eventIds: [ID!]
}

type Location implements Node {
  active: Boolean
  address: String
  coords: Coords
  details: String
  id: ID!
  links: [String!]
  listed: Boolean
  media: [Media!]
  name: String
}

"""A connection to locations."""
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge to a location."""
type LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Location
}

type Match {
  createdAt: Datetime
  id: ID!
  losers: [User!]
  namespace: String
  score: [Float!]
  winners: [User!]
}

"""A connection to users."""
type MatchConnection {
  """A list of edges."""
  edges: [MatchEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type MatchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Match
}

type Media {
  id: ID!
  title: String
  url: String
}

type Mutation {
  createActivitySubscription(input: CreateActivitySubscriptionInput!): ActivitySubscriptionMutationResult!
  createClub(input: CreateClubInput!): CreateClubResult!
  createEvent(input: CreateEventInput!): MutationResult2!
  createEvents(input: CreateEventsInput!): CreateEventsResult!
  createLocation(input: CreateLocationInput!): MutationResult!
  createMatch(match: LeagueMatchInput!): CreateMatchResponse!
  deleteActivitySubscription(input: DeleteActivitySubscriptionInput!): ActivitySubscriptionMutationResult!
  joinEvent(eventId: ID!): JoinEventResult!
  leaveEvent(eventId: ID!): LeaveEventResult!
  updateEvent(eventId: ID!, input: CreateEventInput!): MutationResult2!
}

type MutationResult implements HasErrors {
  errors: [Error!]
  location: Location
}

type MutationResult2 implements HasErrors {
  errors: [Error!]
  event: Event
}

interface Node {
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  activities: [Activity!]!
  activity(id: ID!): Activity
  club(id: ID!): Club
  clubs(after: String, before: String, first: Int): ClubConnection!

  """The current time on the server, as a timestamp."""
  currentTime: Float

  """Delayed current time to test @defer and streaming."""
  currentTime2: Float
  event(id: ID!): Event
  events(after: String, afterDate: Datetime, before: String, filters: EventFilters, first: Int): EventConnection!
  location(id: ID!): Location
  locations(after: String, before: String, first: Int): LocationConnection!
  matches(activitySlug: String!, after: String, before: String, first: Int, namespace: String, userId: ID): MatchConnection!
  node(id: ID!): Node
  parseBulkEvents(input: String!): String!
  ratings(activitySlug: String!, after: String, before: String, first: Int, namespace: String!): RatingConnection!
  user(id: ID!): User
  viewer: Viewer
}

type Rating {
  createdAt: Datetime
  id: ID!
  mu: Float
  namespace: String
  ordinal: Float
  sigma: Float
  updatedAt: Datetime
  user: User
}

"""A connection to users."""
type RatingConnection {
  """A list of edges."""
  edges: [RatingEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type RatingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Rating
}

type Rsvp implements Node {
  id: ID!
  joinTime: Int
  leaveDate: Datetime
  rating(namespace: String): Rating
  user: User
}

enum RsvpStatus {
  Joined
  Waitlist
}

type Subscription {
  id: ID!
  topic: String
}

type User implements Node {
  gender: Gender
  id: ID!
  lineUsername: String
  picture: String
  rating(activitySlug: String!, namespace: String): Rating
}

type Viewer {
  adminClubs(after: String, before: String, first: Int): ClubConnection!
  events(after: String, afterDate: Datetime, before: String, filters: EventFilters, first: Int): EventConnection!
  subscriptions: [Subscription!]!
  user: User
}